<?xml version="1.0" encoding="utf-8"?>
<doc>
				
  <assembly>
    <name>ShinobiCharts</name>
  </assembly>
			
  <members>
		
		<member name="T:ShinobiCharts.Messaging">
			<summary>Internal use only - generated class for Objective C integration
			</summary>
			<remarks>Do not use this class directly in application code</remarks>
		</member>


		<member name="T:ShinobiCharts.NSCopying">
			<summary>
				Marks the class as copy-able.
			</summary>
			<remarks>
				This interface doesn't actually do anything, but is used to mark classes on which you can safely call the
				<c>Copy</c> method inherited from <c>NSObject</c>.
			</remarks>
		</member>


		<member name="T:ShinobiCharts.SChartActivityIndicator">
			<summary>Protocol for activity indicators that are displayed while data loads asynchronously.</summary>
			<remarks>
				<para>
					SChart now offers you the option of loading data asynchronously.
					If data is loading in the background, the chart displays an activity indicator while the data is being loaded.
					The indicator can optionally adopt the SChartActivityIndicator protocol.
				</para><para>
					SChartActivityIndicator is based on the API of the UIActivityIndicatorView.
					As such, it offers methods to start and stop the indicator from animating.
					It also offers a color property to allow you to style the indicator.
				</para>
			</remarks>
		</member>
		
		<member name="M:ShinobiCharts.SChartActivityIndicator.#ctor">
			<summary>Default constructor.
			</summary>
			<remarks></remarks>
		</member>
		
		<member name="M:ShinobiCharts.SChartActivityIndicator.#ctor(MonoTouch.Foundation.NSCoder)">
			<summary>
				A constructor that initializes the object from the data stored in the unarchiver object.
			</summary>
			<remarks>
				This constructor is provided to allow the class to be initialized from an unarchiver (for example, during NIB deserialization).
			</remarks>
			<param name="coder">
				The unarchiver object
			</param>
		</member>
		
		<member name="M:ShinobiCharts.SChartActivityIndicator.#ctor(System.IntPtr)">
			<summary>
				A constructor used when creating managed representations of unmanaged objects.
			</summary>
			<remarks>
				You should not invoke this method directly.
			</remarks>
			<param name="handle">
				Handle of the unmanaged object
			</param>
		</member>
		
		<member name="M:ShinobiCharts.SChartActivityIndicator.#ctor(MonoTouch.Foundation.NSObjectFlag)">
			<summary>
				Constructor to call on derived classes to skip initialization and merely allocate the object.
			</summary>
			<remarks>
				You should not invoke this method directly.
			</remarks>
			<param name="t">
				Unused sentinel value
			</param>
		</member>
		
		<member name="P:ShinobiCharts.SChartActivityIndicator.ClassHandle">
			<summary>
				The handle for this class.
			</summary>
			<remarks></remarks>
		</member>
		
		<member name="M:ShinobiCharts.SChartActivityIndicator.ConformsToProtocol(System.IntPtr)">
			<summary>
				Checks whether this object conforms to a protocol.
			</summary>
			<remarks>
				Not normally called from application code - used by the Shinobi framework.
			</remarks>
			<param name="protocol">
				The protocol
			</param>
			<returns>
				True if the object conforms to the protocol
			</returns>
		</member>
		
		<member name="P:ShinobiCharts.SChartActivityIndicator.Color">
			<summary>
				The color of the indicator.
			</summary>
			<remarks></remarks>
		</member>
		
		<member name="M:ShinobiCharts.SChartActivityIndicator.StartAnimating">
			<summary>
				Starts the indicator animating.
			</summary>
			<remarks></remarks>
		</member>
		
		<member name="M:ShinobiCharts.SChartActivityIndicator.StopAnimating">
			<summary>
				Stops the indicator animating.
			</summary>
			<remarks></remarks>
		</member>

  
    <member name="T:ShinobiCharts.SChartTitleCentresOn">
      <summary>Title centering options: Canvas, Chart, PlottingArea
      </summary>
	  <remarks></remarks>
    </member>

    <member name="T:ShinobiCharts.SChartTitlePosition">
      <summary>Title positioning options: Center, BottomOrLeft, TopOrRight
      </summary>
	  <remarks></remarks>
    </member>

    <member name="T:ShinobiCharts.SChartAxisType">
      <summary>Axis type options: Category, DateTime, Logarithmic, Number
      </summary>
	  <remarks></remarks>
    </member>

    <member name="T:ShinobiCharts.SChartGesturePanType">
      <summary>Gesture pan type options: BoxDraw, None, PanPinch
      </summary>
	  <remarks></remarks>
    </member>

    <member name="T:ShinobiCharts.SChartAnimationCurve">
      <summary>Animation curve options: Bounce, EaseIn, EaseInOut, EaseOut, Linear
      </summary>
	  <remarks>The animation curve describes how the moves from one state to another, e.g linearly, with a bounce, etc. </remarks>
    </member>

    <member name="T:ShinobiCharts.SChartAnnotationPosition">
      <summary>Annotation position options: AboveData, BelowData
      </summary>
	  <remarks>This is above and below in the visual layer sense (i.e. on top of or underneath, z-order)</remarks>
    </member>

    <member name="T:ShinobiCharts.SChartOrientation">
      <summary>Chart orientation options: Horizontal, Vertical
      </summary>
	  <remarks></remarks>
    </member>

    <member name="T:ShinobiCharts.SChartAxisPosition">
      <summary>Axis position options: Normal, Reverse
      </summary>
 	  <remarks>
			<para>Normal is at the bottom of the chart for X axes, at the left for Y axes</para>
			<para>Reverse is at the top of the chart for X axes, at the right for Y axes</para>
			</remarks>
   </member>

    <member name="T:ShinobiCharts.SChartAxisZoomLevel">
      <summary>Axis zoom level options: Double, Half, Original
      </summary>
	  <remarks></remarks>
    </member>

    <member name="T:ShinobiCharts.TickLabelOrientation">
      <summary>Tick label orientation options: Diagonal, Horizontal, Vertical
      </summary>
	  <remarks></remarks>
    </member>

    <member name="T:ShinobiCharts.SChartAxisPanTo">
      <summary>Axis panning options: Center, End, Start
      </summary>
	  <remarks></remarks>
    </member>

    <member name="T:ShinobiCharts.SChartAxisTitleOrientation">
      <summary>Axis title orientation options: Horizontal, Vertical
      </summary>
	  <remarks></remarks>
    </member>

    <member name="T:ShinobiCharts.SChartDateFrequencyDenomination">
      <summary>Units for date frequencies: Days, Hours, Minute, Months, Seconds, Weeks, Years
      </summary>
	  <remarks></remarks>
    </member>

    <member name="T:ShinobiCharts.SChartRadialChartEffect">
      <summary>Radial chart effects.
      </summary>
	  <remarks></remarks>
    </member>

    <member name="T:ShinobiCharts.SChartSeriesLegendSymbolAlignment">
      <summary>Legend symbol alignment options: Left, Right
      </summary>
	  <remarks></remarks>
    </member>

    <member name="T:ShinobiCharts.SChartLegendOrientation">
      <summary>Legend orientation options: Horizontal, Vertical
      </summary>
	  <remarks></remarks>
    </member>

    <member name="T:ShinobiCharts.SChartLegendPlacement">
      <summary>Legend placement options: InsidePlotArea, OutsidePlotArea
      </summary>
	  <remarks></remarks>
    </member>

    <member name="T:ShinobiCharts.SChartLegendPosition">
      <summary>Legend position options: BottomLeft, BottomMiddle, BottomRight, MiddleLeft, MiddleRight, TopLeft, TopMiddle, TopRight
      </summary>
	  <remarks></remarks>
    </member>

    <member name="T:ShinobiCharts.EFillDirection">
      <summary>Fill direction options: Horizontal, Vertical
      </summary>
	  <remarks></remarks>
    </member>

    <member name="T:ShinobiCharts.SChartLineCrosshairTraceStyle">
      <summary>Crosshair trace style options: Horizontal, Vertical
      </summary>
	  <remarks></remarks>
    </member>

    <member name="T:ShinobiCharts.SChartLogLevel">
      <summary>Logging levels: Debug, Error, Silent, Warning
      </summary>
	  <remarks></remarks>
    </member>

    <member name="T:ShinobiCharts.SChartSelection">
      <summary>Selection options: None, Point, Selection
      </summary>
	  <remarks></remarks>
    </member>

    <member name="T:ShinobiCharts.SChartSeriesOrientation">
      <summary>Series orientation options: Horizontal, Vertical
      </summary>
	  <remarks></remarks>
    </member>
  
    <member name="T:ShinobiCharts.SChartTickLabelClippingMode">
      <summary>Tick label clipping mode options: NeitherPersist, TicksAndLabelsPersist, TicksPersist
      </summary>
	  <remarks></remarks>
    </member>
  
    <member name="T:ShinobiCharts.SChartCrosshairOutOfRangeBehavior">
      <summary>Tick label clipping mode options: KeepAtEdge, Hide, Remove
      </summary>
	  <remarks></remarks>
    </member>
  
    <member name="T:ShinobiCharts.SChartRadialSeriesDrawDirection">
      <summary>Radial series animation options: Anticlockwise, Clockwise
      </summary>
	  <remarks></remarks>
    </member>

    <member name="T:ShinobiCharts.SChartPoint">
      <summary>A 2 dimensional point structure
      </summary>
	  <remarks></remarks>
    </member>

    <member name="T:ShinobiCharts.SChartSize">
      <summary>Size structure: Height and Width
      </summary>
	  <remarks></remarks>
    </member>

    <member name="T:ShinobiCharts.SChartNumberSkip">
      <summary>Discontinuous axis number skip structure: Start and End
      </summary>
	  <remarks></remarks>
    </member>

    <member name="T:ShinobiCharts.SChartMovementInformation">
      <summary>A structure describing why a ShinobiChart is triggering pan and zoom delegate methods</summary>
	  <remarks>Currently it contains one member - movementIsMomentum. This is true if the chart is panning due to momentum.</remarks>
    </member>
		

    <member name="T:ShinobiCharts.SChartCrosshairMode">
      <summary>Crosshair mode options: Floating, SingleSeries
      </summary>
	  <remarks></remarks>
    </member>
		

		<member name="T:ShinobiCharts.SChartAnimation">
			<summary>
				An SChartAnimation object determines how an SChartSeries is animated.
			</summary>
			<remarks>
				<para>
					Depending on the action which an animation is linked to, it may be triggered by different actions:
					<list type="bullet">
						<item>
							<term>Entry Animations are triggered upon the initial addition of the series to the chart and when a series is unhidden using its hidden property.</term>
						</item>
						<item>
							<term>Exit Animations are triggered when a series is hidden using its hidden property.</term>
						</item>
					</list>
				</para>
				<para>
					The code snippet below demonstrates how to set a series to fade in when entering and fade out when exiting.
					We set the duration of both animations to be 3 seconds:
					<code>series.EntryAnimation = SChartAnimation.FadeAnimation();
series.EntryAnimation.Duration = 3;
series.ExitAnimation = SChartAnimation.FadeAnimation();
series.ExitAnimation.Duration = 3;</code>
				</para>
				<para>
					We updated the animation code in version 2.2 of charts.
					As a result of these updates, the SChartAnimationCurve enum defined in earlier versions of charts has been deprecated.
					Instead of using this, you should configure the properties of the animation to meet your needs.
					The properties you can set on an animation are:
					<list type="bullet">
						<item>
							<term>
								The duration of the animation.
								See <see cref="P:ShinobiCharts.SChartAnimation.Duration" /> for more information.
							</term>
						</item>
						<item>
							<term>
								The origin point on the chart from where the series animates to its final position.
								See <see cref="P:ShinobiCharts.SChartAnimation.AbsoluteOriginX" />, <see cref="P:ShinobiCharts.SChartAnimation.AbsoluteOriginY" />,
								<see cref="P:ShinobiCharts.SChartAnimation.NormalisedOriginX" /> and <see cref="P:ShinobiCharts.SChartAnimation.NormalisedOriginY" />
								for more information.
							</term>
						</item>
						<item>
							<term>
								How the chart series scales as the animation progresses.
								See <see cref="P:ShinobiCharts.SChartAnimation.XScaleCurve" />, <see cref="P:ShinobiCharts.SChartAnimation.YScaleCurve" />
								or <see cref="P:ShinobiCharts.SChartAnimation.RadiusCurve" /> for more information.
							</term>
						</item>
						<item>
							<term>
								How the transparency of the series varies over the period of the animation.
								See <see cref="P:ShinobiCharts.SChartAnimation.AlphaCurve" /> for more information.
							</term>
						</item>
						<item>
							<term>
								For radial chart series, you can specify how the series rotates around the origin during the animation.
								See <see cref="P:ShinobiCharts.SChartAnimation.AngleCurve" /> for more information.
							</term>
						</item>
					</list>
				</para>
				<para>
					The <see cref="T:ShinobiCharts.SChartAnimation" /> object is composed of several objects conforming to the
					<see cref="T:ShinobiCharts.SChartAnimationCurveProtocol" /> protocol, which each describe the transition of an aspect of the chart series
					from the start of the animation to the end.
					We have defined concrete implementations of this protocol to support common animation use cases which you might have.
					Some of the concrete animation curve classes are:
					<list type="bullet">
						<item>
							<term>
								<see cref="T:ShinobiCharts.SChartLinearAnimationCurve" /> - a linear animation.
							</term>
						</item>
						<item>
							<term>
								<see cref="T:ShinobiCharts.SChartEaseInAnimationCurve" /> - animation which starts off gently, then accelerates in the
								second half of the animation.
							</term>
						</item>
						<item>
							<term>
								<see cref="T:ShinobiCharts.SChartEaseOutAnimationCurve" /> - animation which starts off at a steady speed, then decelerates
								in the second half of the animation, creating a slow exit phase.
							</term>
						</item>
						<item>
							<term>
								<see cref="T:ShinobiCharts.SChartEaseInOutAnimationCurve" /> - animation which starts off gently, accelerates through the
								middle part of the animation, then decelerates at the end to finish gently.
							</term>
						</item>
						<item>
							<term>
								<see cref="T:ShinobiCharts.SChartBounceAnimationCurve" /> - animation where the series goes past its final value, then bounces
								back to it at the end.
							</term>
						</item>
					</list>
				</para>
				<para>
					Other animation curves are also available, see the API documentation for more information.
				</para>
				<para>
					To save you having to create animation classes from scratch, we've provided some pre-defined types for you.
					Have a look at the factory methods we've provided below.
				</para>
			</remarks>
		</member>
	
    <member name="M:ShinobiCharts.SChartAnimation.#ctor">
      <summary>Default constructor.
      </summary>
		<remarks></remarks>
    </member>
        
	<member name="M:ShinobiCharts.SChartAnimation.#ctor(MonoTouch.Foundation.NSCoder)">
      <summary>A constructor that initializes the object from the data stored in the unarchiver object.
      </summary>
	  <remarks>This constructor is provided to allow the class to be initialized from an unarchiver (for example, during NIB deserialization).</remarks>
	  <param name="coder">The unarchiver object</param>
    </member>
        
    <member name="M:ShinobiCharts.SChartAnimation.#ctor(MonoTouch.Foundation.NSObjectFlag)">
      <summary>Constructor to call on derived classes to skip initialization and merely allocate the object.
      </summary>
	  <remarks>You should not invoke this method directly.</remarks>
	  <param name="t">Unused sentinel value</param>
    </member>
		
	<member name="M:ShinobiCharts.SChartAnimation.#ctor(System.IntPtr)">
      <summary>A constructor used when creating managed representations of unmanaged objects.
      </summary>
	  <remarks>You should not invoke this method directly.</remarks>
	  <param name="handle">Handle of the unmanaged object</param>
    </member>
        
	<member name="P:ShinobiCharts.SChartAnimation.ClassHandle">
        <summary>The handle for this class.
        </summary>
	  <remarks>Not normally used by application code</remarks>
    </member>
        
	<member name="M:ShinobiCharts.SChartAnimation.Dispose(System.Boolean)">
      <summary> Releases unmanaged resources.
      </summary>
	  <remarks></remarks>
	  <param name="disposing">True if called by Dispose, false if called from a finalizer</param>
    </member>
		
		<member name="M:ShinobiCharts.SChartAnimation.GrowAnimation">
			<summary>
				Returns an animation where the series scales from its centre (the normalised X and Y are both set to 0.5f).
			</summary>
			<remarks>
				This is the default entry &amp; exit animation for <see cref="T:ShinobiCharts.SChartScatterSeries" />, <see cref="T:ShinobiCharts.SChartDonutSeries" />,
				and <see cref="T:ShinobiCharts.SChartPieSeries" />.
			</remarks>
		</member>
		
		<member name="M:ShinobiCharts.SChartAnimation.GrowHorizontalAnimation">
			<summary>
				Returns an animation where the series scales from its leftmost point.
			</summary>
			<remarks>
				This is the default entry &amp; exit animation for <see cref="T:ShinobiCharts.SChartBarSeries" />.
				If a baseline is set on a bar series, and a custom origin has not been set for the animation, the baseline will be used as the origin instead.
			</remarks>
		</member>
		
		<member name="M:ShinobiCharts.SChartAnimation.GrowVerticalAnimation">
			<summary>
				Returns an animation where the series scales from its lowest point.
			</summary>
			<remarks>
				This is the default entry &amp; exit animation for <see cref="T:ShinobiCharts.SChartColumnSeries" />, <see cref="T:ShinobiCharts.SChartOHLCSeries" />,
				and <see cref="T:ShinobiCharts.SChartCandlestickSeries" />.
				If a baseline is set on a column, OHLC, or candlestick series, and a custom origin has not been set on the animation,
				the baseline will be used as the origin instead.
			</remarks>
		</member>
		
	<member name="M:ShinobiCharts.SChartAnimation.FadeAnimation">
		<summary>Returns an animation where the series fades.</summary>
		<remarks></remarks>
	</member>
		
		<member name="M:ShinobiCharts.SChartAnimation.TelevisionAnimation">
			<summary>
				Returns an animation where the series mimics the entrance/exit of the picture of an old television.
			</summary>
			<remarks>
				By default, the point of entry/exit is the centre of the series (the normalised X and Y are both set to 0.5f).
				This is the default entry &amp; exit animation for <see cref="T:ShinobiCharts.SChartLineSeries" />, <see cref="T:ShinobiCharts.SChartStepLineSeries" />,
				and <see cref="T:ShinobiCharts.SChartBandSeries" />.
			</remarks>
		</member>
		
	<member name="M:ShinobiCharts.SChartAnimation.RadialSelection">
		<summary>Returns an animation where the series rotates with a bounce and changes its protrusion with a bounce.</summary>
		<remarks>This is the default selection animation for SChartDonutSeries and SChartPieSeries.</remarks>
	</member>
		
	<member name="P:ShinobiCharts.SChartAnimation.Curve">
		<summary>The overall animation curve for the animation.</summary>
		<remarks>Setting this curve will set each of the other curves for the animation to this same curve.</remarks>
	</member>
		
		<member name="P:ShinobiCharts.SChartAnimation.XScaleCurve">
			<summary>
				The animation curve describing the transition of the series parallel to the x axis.
			</summary>
			<remarks>
				This curve describes how the x values of the series scale from some origin along the x axis at the start of the animation to
				their destination at the end of the animation.
				An xScale value of 0 maps a point at the animation origin whereas a value of 1 maps the point at it's true value perpendicular to the x axis.
			</remarks>
		</member>
		
		<member name="P:ShinobiCharts.SChartAnimation.YScaleCurve">
			<summary>
				The animation curve describing the transition of the series parallel to the y axis.
			</summary>
			<remarks>
				This curve describes how the y values of the series scale from some origin along the y axis at the start of the animation to
				their destination at the end of the animation.
				An yScale value of 0 maps a point at the animation origin whereas a value of 1 maps the point at it's true value perpendicular to the y axis.
			</remarks>
		</member>
		
		<member name="P:ShinobiCharts.SChartAnimation.AngleCurve">
			<summary>
				The animation curve describes the transition of the series around its origin.
			</summary>
			<remarks>
				<para>
					This curve only applies to radial chart series.
				</para>
				<para>
					This curve describes how the points of the series rotate around the centre of the series from some initial angle at the start of the animation
					to a destination angle at the end of the animation.
					An angle scale value of 0 maps to the original angle whereas a value of 1 maps to the destination angle.
				</para>
			</remarks>
		</member>
		
		<member name="P:ShinobiCharts.SChartAnimation.RadiusCurve">
			<summary>
				The animation curve describing how the radius/radii of the series change during the animation.
			</summary>
			<remarks>
				This curve describes how both the x values and the y values of a series scale from some origin to their true values.
				It is mostly used for radial series, often in conjunction with an origin at the centre of the radial series.
				Setting this curve will override any previously set values for XScaleCurve and YScaleCurve.
			</remarks>
		</member>
		
	<member name="P:ShinobiCharts.SChartAnimation.AlphaCurve">
		<summary>The animation curve describing how the transparency of the series changes during the animation.</summary>
		<remarks>This curve describes how the alpha value of the colors of the series scale from some initial alpha value at the start of the animation
 to some destination alpha at the end of the animation.
 We multiply the value returned by this curve with the colors set to the series, therefore a curve value of 0 results in a completely transparent color and a value of 1 results in the final alpha value of the series color.
 This curve applies to both cartesian and radial series.</remarks>
	</member>
		
	<member name="P:ShinobiCharts.SChartAnimation.Duration">
		<summary>The duration of the animation.</summary>
		<remarks>The time taken, in seconds, for the animation to progress from start to finish.
 The duration of the animations returned by the factory methods provided is 2.4 seconds.
 The duration of an animation created via alloc/init is 1/64 seconds (instant).
 Use this property to configure how long an animation should take to complete.</remarks>
	</member>
		
		<member name="P:ShinobiCharts.SChartAnimation.AbsoluteOriginX">
			<summary>
				If this property is set, this will be the origin value in x in data terms -
				a curve returning 0 maps to this value, whereas a curve returning 1 maps to the final true value of the series.
			</summary>
			<remarks>
				Points will scale from this value along the x axis in either direction.
				If this property is not set, the animation will use a normalised origin on x - see <see cref="P:ShinobiCharts.SChartAnimation.NormalisedOriginX" />.
			</remarks>
		</member>
			
		<member name="P:ShinobiCharts.SChartAnimation.AbsoluteOriginY">
			<summary>
				If this property is set, this will be the origin value in y in data terms -
				a curve returning 0 maps to this value, whereas a curve returning 1 maps to the final true value.
			</summary>
			<remarks>
				Points will scale from this value along the y axis in either direction.
				If this property is not set, the animation will use a normalised origin on y - see <see cref="P:ShinobiCharts.SChartAnimation.NormalisedOriginY" />.
			</remarks>
		</member>
			
		<member name="P:ShinobiCharts.SChartAnimation.NormalisedOriginX">
			<summary>
				This property enables you to set a normalised point of origin along the x axis for the animation.
			</summary>
			<remarks>
				This value is normalised using the range of the series which the animation is applied to.
				For example, setting a <c>NormalisedOriginX</c> of 0.f would cause the series to animate from its left-most point.
				Setting a a <c>NormalisedOriginX</c> of 1.f would cause the series to animate from its right-most point.
				If a value is set for <see cref="P:ShinobiCharts.SChartAnimation.AbsoluteOriginX" />, this property will be ignored.
			</remarks>
		</member>
			
		<member name="P:ShinobiCharts.SChartAnimation.NormalisedOriginY">
			<summary>
				This property enables you to set a normalised point of origin along the y axis for the animation.
			</summary>
			<remarks>
				This value is normalised using the range of the series which the animation is applied to.
				For example, setting a <c>NormalisedOriginY</c> of 0.f would cause the series to animate from its lowest point.
				Setting a <c>NormalisedOriginY</c> of 1.f would cause the series to animate from its highest point.
				If a value is set for <see cref="P:ShinobiCharts.SChartAnimation.AbsoluteOriginY" />, this property will be ignored.
			</remarks>
		</member>
		
		
	<member name="T:ShinobiCharts.SChartAnimationCurveProtocol">
      <summary>The SChartAnimationCurve protocol allows any object to act as a curve evaluator for series' animations, as defined in SChartAnimation.
			</summary>
			<remarks>
				<para>
					Given a time point between the start and end of an animation, a curve evaluator returns a value which represents the progress
					of the series between its beginning and end positions.
					For more information on curve evaluation, see the ValueAtTime method defined in the protocol.
				</para><para>
					Objects conforming to this protocol need also to conform to the NSCopying protocol.
				</para><para>
					We have defined concrete implementations of this protocol to support common animation use cases which you might have.
					The concrete animation curve classes are:
					<list type="bullet">
						<item>
							<term>
								SChartLinearAnimationCurve - a linear animation.
							</term>
						</item>
						<item>
							<term>
								SChartEaseInAnimationCurve - animation which starts off gently, then accelerates in the second half of the animation.
							</term>
						</item>
						<item>
							<term>
								SChartEaseOutAnimationCurve - animation which starts off at a steady speed, then decelerates in the second half of the animation, creating a slow exit phase.
							</term>
						</item>
						<item>
							<term>
								SChartEaseInOutAnimationCurve - animation which starts off gently, accelerates through the middle part of the animation, then decelerates at the end to finish gently.
							</term>
						</item>
						<item>
							<term>
								SChartBounceAnimationCurve - animation where the series goes past its final value, then bounces back to it at the end.
							</term>
						</item>
						<item>
							<term>
								SChartDelayBounceAnimationCurve - similar to the bounce animation curve, but the bounce occurs over the second half of the animation.  For the first half of the animation, the curve returns 0.f.
							</term>
						</item>
						<item>
							<term>
								SChartDelayBounceWithMinimumAnimationCurve - similar to the delayed bounce animation curve.  The difference is that it returns 0.1f for the first half of the animation, rather than 0.f.
							</term>
						</item>
						<item>
							<term>
								SChartBounceDelayAnimationCurve - similar to the bounce animation curve, but the bounce occurs over the first half of the animation.  For the second half, the curve returns 1.f.
							</term>
						</item>
						<item>
							<term>
								SChartFlatAnimationCurve - basically no animation.  Returns 1.f for all time values.
							</term>
						</item>
					</list>
				</para>
			</remarks>
	</member>	
	
    <member name="M:ShinobiCharts.SChartAnimationCurveProtocol.#ctor">
      <summary>Default constructor.
      </summary>
		<remarks></remarks>
    </member>
        
	<member name="M:ShinobiCharts.SChartAnimationCurveProtocol.#ctor(MonoTouch.Foundation.NSCoder)">
      <summary>A constructor that initializes the object from the data stored in the unarchiver object.
      </summary>
	  <remarks>This constructor is provided to allow the class to be initialized from an unarchiver (for example, during NIB deserialization).</remarks>
	  <param name="coder">The unarchiver object</param>
    </member>
        
    <member name="M:ShinobiCharts.SChartAnimationCurveProtocol.#ctor(MonoTouch.Foundation.NSObjectFlag)">
      <summary>Constructor to call on derived classes to skip initialization and merely allocate the object.
      </summary>
	  <remarks>You should not invoke this method directly.</remarks>
	  <param name="t">Unused sentinel value</param>
    </member>
		
	<member name="M:ShinobiCharts.SChartAnimationCurveProtocol.#ctor(System.IntPtr)">
      <summary>A constructor used when creating managed representations of unmanaged objects.
      </summary>
	  <remarks>You should not invoke this method directly.</remarks>
	  <param name="handle">Handle of the unmanaged object</param>
    </member>
        
	<member name="P:ShinobiCharts.SChartAnimationCurveProtocol.ClassHandle">
        <summary>The handle for this class.
        </summary>
	  <remarks>Not normally used by application code</remarks>
    </member>
        
	<member name="M:ShinobiCharts.SChartAnimationCurveProtocol.Dispose(System.Boolean)">
      <summary> Releases unmanaged resources.
      </summary>
	  <remarks></remarks>
	  <param name="disposing">True if called by Dispose, false if called from a finalizer</param>
    </member>

	<member name="M:ShinobiCharts.SChartAnimationCurveProtocol.ValueAtTime(System.Single)">
        <summary>Should return an appropriate value for the animation curve at the given time.</summary>
			<remarks>
				The value returned represents the progress of the series between its beginning and end positions, where 0.f is the start
				state and 1.f is, nominally, the end state.
				It is valid to return a value 'v' where either v is less than 0 or v is greater than 1 and it not necessary to return 1 at time 1.
			</remarks>
			<param name="time">Time is provided as a float between 0.f and 1.f, where 0.f is the beginning of the animation and 1.f is the end of the animation. (time = elapsed time / duration)</param>
    </member>
        
	<member name="M:ShinobiCharts.SChartAnimationCurveProtocol.Copy">
        <summary>DEPRECATED - Creates a copy of the curve</summary>
    </member>
        
		
	<member name="T:ShinobiCharts.SChartAnimationCurveEvaluator">
      <summary>Evaluators for custom animation curves
      </summary>
	  <remarks>
			<para>The animation curve describes how the moves from one state to another, e.g linearly, with a bounce, etc.</para>
			<para>The evaluators provide a normalised value for a range of curves. 
				They take a position between 0.0 .. 1.0, and return a corresponding value on the curve between 0.0 .. 1.0. 
				You should therefore expect to have to scale your data, both input and output.</para>
			</remarks>
    </member>
		
    <member name="M:ShinobiCharts.SChartAnimationCurveEvaluator.#ctor(MonoTouch.Foundation.NSCoder)">
      <summary>A constructor that initializes the object from the data stored in the unarchiver object.
      </summary>
	  <remarks>This constructor is provided to allow the class to be initialized from an unarchiver (for example, during NIB deserialization).</remarks>
	  <param name="coder">The unarchiver object</param>
    </member>
		
    <member name="M:ShinobiCharts.SChartAnimationCurveEvaluator.#ctor(System.IntPtr)">
      <summary>A constructor used when creating managed representations of unmanaged objects.
      </summary>
	  <remarks>You should not invoke this method directly.</remarks>
	  <param name="handle">Handle of the unmanaged object</param>
    </member>
		
    <member name="M:ShinobiCharts.SChartAnimationCurveEvaluator.#ctor(MonoTouch.Foundation.NSObjectFlag)">
      <summary>Constructor to call on derived classes to skip initialization and merely allocate the object.
      </summary>
	  <remarks>You should not invoke this method directly.</remarks>
	  <param name="t">Unused sentinel value</param>
    </member>
		
	<member name="P:ShinobiCharts.SChartAnimationCurveEvaluator.ClassHandle">
      <summary>The handle for this class.
      </summary>
	  <remarks>Not normally used by application code</remarks>
    </member>
        
    <member name="M:ShinobiCharts.SChartAnimationCurveEvaluator.Evaluate(ShinobiCharts.SChartAnimationCurve,System.Single)">
      <summary>Performs the curve evaluation calculation
      </summary>
	  <remarks></remarks>
	  <param name="curve">The type of curve to be evaluated</param>
	  <param name="position">The position at which the curve is to be evaluated. This should be a value between 0 and 1, inclusive</param>
	  <returns>The value of the curve at the given position</returns>
    </member>

		
		<member name="T:ShinobiCharts.SChartAnnotation">
			<summary>
				A UIView that can be displayed on a chart - maintaining aspect ratio at all times and position in accordance with the panning of the data range.
			</summary>
			<remarks>
				<para>
					There are several predefined annotations for convenience - these can be created using the methods below and are bands, lines and text.
				</para>
				<para>
					An <c>SChartAnnotation</c> is fixed to a single point on the chart which means that it will pan but will remain a fixed size regardless of zoom level.
					If you would like to annotate an area that will scale as the data range is zoomed use <see cref="T:ShinobiCharts.SChartAnnotationZooming" />,
					which is anchored between two limits on either axis.
				</para>
				<para>
					An annotation can be attached to one of the x axes, and one of the y-axes in the chart.
					This is done using the <see cref="P:ShinobiCharts.SChartAnnotation.XAxis" /> and <see cref="P:ShinobiCharts.SChartAnnotation.YAxis" />
					properties on the annotation.
					If an annotation is attached to an axis, the position of the annotation on the chart will correspond to its value on that axis.
					The position of the annotation on the x axis will correspond to <see cref="P:ShinobiCharts.SChartAnnotation.XValue" /> and its position
					on the y axis will correspond to <see cref="P:ShinobiCharts.SChartAnnotation.YValue" />.
				</para>
			</remarks>
		</member>

	<member name="M:ShinobiCharts.SChartAnnotation.#ctor">
      <summary>Default constructor
      </summary>
	  <remarks></remarks>
    </member>
		
	<member name="M:ShinobiCharts.SChartAnnotation.#ctor(MonoTouch.Foundation.NSCoder)">
      <summary>A constructor that initializes the object from the data stored in the unarchiver object.
      </summary>
	  <remarks>This constructor is provided to allow the class to be initialized from an unarchiver (for example, during NIB deserialization).</remarks>
	  <param name="coder">The unarchiver object</param>
    </member>
		
	<member name="M:ShinobiCharts.SChartAnnotation.#ctor(MonoTouch.Foundation.NSObjectFlag)">
      <summary>Constructor to call on derived classes to skip initialization and merely allocate the object.
      </summary>
	  <remarks>You should not invoke this method directly.</remarks>
	  <param name="t">Unused sentinel value</param>
    </member>
		
	<member name="M:ShinobiCharts.SChartAnnotation.#ctor(System.IntPtr)">
      <summary>A constructor used when creating managed representations of unmanaged objects.
      </summary>
	  <remarks>You should not invoke this method directly.</remarks>
	  <param name="handle">Handle of the unmanaged object</param>
    </member>
		
	<member name="M:ShinobiCharts.SChartAnnotation.#ctor(System.Drawing.RectangleF)">
      <summary>Instantiates a SChartAnnotation with the specified frame rectangle.
      </summary>
	  <remarks></remarks>
	  <param name="frame">The frame rectangle</param>
    </member>
		
	<member name="P:ShinobiCharts.SChartAnnotation.ClassHandle">
        <summary> The handle for this class.
        </summary>
	  <remarks>Not normally used by application code</remarks>
    </member>		
        
    <member name="P:ShinobiCharts.SChartAnnotation.XAxis">
      <summary> The x axis that the annotation is attached to. 
      </summary>
		<remarks> A null value will cause the view to be displayed at the midpoint of the width of the chart plot area. 
		</remarks>
    </member>
        
    <member name="P:ShinobiCharts.SChartAnnotation.YAxis">
      <summary> The y axis that the annotation is attached to. 
      </summary>
		<remarks>A null value will cause the view to be displayed at the midpoint of the height of the chart plot area. 
		</remarks>
    </member>
        
    <member name="P:ShinobiCharts.SChartAnnotation.XValue">
      <summary> The value on the given <see cref="P:ShinobiCharts.SChartAnnotation.XAxis" /> that the annotation is going to be anchored to. 
      </summary>
		<remarks> A null value will cause the view to be displayed at the midpoint of the Width of the chart plot area. 
		</remarks>
    </member>
        
    <member name="P:ShinobiCharts.SChartAnnotation.YValue">
      <summary> The value on the given <see cref="P:ShinobiCharts.SChartAnnotation.YAxis" /> that the annotation is going to be anchored to. 
      </summary>
		<remarks> A null value will cause the view to be displayed at the midpoint of the height of the chart plot area. 
		</remarks>
    </member>
        
    <member name="P:ShinobiCharts.SChartAnnotation.Label">
      <summary>If this is a text annotation, this property is an accessor for the text label. Otherwise it returns null. 
      </summary>
		<remarks> 
		</remarks>
    </member>
        
    <member name="P:ShinobiCharts.SChartAnnotation.Position">
      <summary> Determines if the annotation should be drawn in front of or underneath your chart data.
      </summary>
		<remarks>This controls which visual layer the annotation is drawn in. 
				In most cases, we will want the annotation to be drawn in front of the chart data,
				so this defaults to <see cref="F:ShinobiCharts.SChartAnnotationPosition.AboveData" />, showing the annotation on top off the data.
		</remarks>
    </member>
        
    <member name="M:ShinobiCharts.SChartAnnotation.GetAnnotation(System.String,MonoTouch.UIKit.UIFont,ShinobiCharts.SChartAxis,ShinobiCharts.SChartAxis,MonoTouch.Foundation.NSObject,MonoTouch.Foundation.NSObject,MonoTouch.UIKit.UIColor,MonoTouch.UIKit.UIColor)">
      <summary> Creates an annotation Based on a UILabel with the given string at the given x and y axis Positions 
      </summary>
		<remarks></remarks>
	  <param name="text">The text to be displayed</param>
	  <param name="font">The font that the text is displayed in</param>
	  <param name="xAxis">The X axis that the annotation position is defined in</param>
	  <param name="yAxis">The Y axis that the annotation position is defined in</param>
	  <param name="xValue">The X position of the annotation, in terms of the axis values</param>
	  <param name="yValue">The Y position of the annotation, in terms of the axis values</param>
	  <param name="textColor">The color of the annotation text</param>
	  <param name="backgroundColor">The color of the annotation background</param>
	  <returns>A new annotation</returns>
    </member>
        
    <member name="M:ShinobiCharts.SChartAnnotation.GetVerticalLine(MonoTouch.Foundation.NSObject,ShinobiCharts.SChartAxis,ShinobiCharts.SChartAxis,System.Single,MonoTouch.UIKit.UIColor)">
      <summary> Creates a vertical line at the given x Position that Spans the whole height of the y axis. 
      </summary>
		<remarks></remarks>
	  <param name="xValue">The position of the line on the X axis</param>
	  <param name="xAxis">The X axis that the annotation position is defined in</param>
	  <param name="yAxis">The Y axis that the annotation spans</param>
	  <param name="width">The width of the line</param>
	  <param name="color">The color of the band</param>
	  <returns></returns>
    </member>
        
    <member name="M:ShinobiCharts.SChartAnnotation.GetHorizontalLine(MonoTouch.Foundation.NSObject,ShinobiCharts.SChartAxis,ShinobiCharts.SChartAxis,System.Single,MonoTouch.UIKit.UIColor)">
      <summary> Creates a horizontal line at the given y position that spans the whole width of the x axis. 
      </summary>
		<remarks></remarks>
	  <param name="yValue">The position of the line on the Y axis</param>
	  <param name="xAxis">The X axis that the annotation spans</param>
	  <param name="yAxis">The Y axis that the annotation position is defined in</param>
	  <param name="width">The width of the line</param>
	  <param name="color">The color of the band</param>
	  <returns></returns>
    </member>
       
    <member name="M:ShinobiCharts.SChartAnnotation.GetVerticalBand(MonoTouch.Foundation.NSObject,MonoTouch.Foundation.NSObject,ShinobiCharts.SChartAxis,ShinobiCharts.SChartAxis,MonoTouch.UIKit.UIColor)">
      <summary>Creates a vertical band that spans the given range on the x axis and spans the whole height of the y axis. 
      </summary>
		<remarks></remarks>
	  <param name="minX">The lower bound of the band range</param>
	  <param name="maxX">The upper bound of the band range</param>
	  <param name="xAxis">The X axis that the annotation range is defined in</param>
	  <param name="yAxis">The Y axis that the annotation spans</param>
	  <param name="color">The color of the band</param>
	  <returns></returns>
    </member>
        
    <member name="M:ShinobiCharts.SChartAnnotation.GetHorizontalBand(MonoTouch.Foundation.NSObject,MonoTouch.Foundation.NSObject,ShinobiCharts.SChartAxis,ShinobiCharts.SChartAxis,MonoTouch.UIKit.UIColor)">
      <summary>Creates a horizontal band that spans the given range on the y axis and spans the whole width of the x axis. 
      </summary>
		<remarks></remarks>
	  <param name="minY">The lower bound of the band range</param>
	  <param name="maxY">The upper bound of the band range</param>
	  <param name="xAxis">The X axis that the annotation spans</param>
	  <param name="yAxis">The Y axis that the annotation range is defined in</param>
	  <param name="color">The color of the band</param>
	  <returns></returns>
    </member>
        
    <member name="M:ShinobiCharts.SChartAnnotation.UpdateView(ShinobiCharts.SChartCanvas)">
      <summary>Updates the annotation on the chart.
      </summary>
		<remarks>Override this method to provide custom updating of the annotation while it is being positioned on the chart.
		</remarks>
	  <param name="canvas">The <see cref="T:ShinobiCharts.SChartCanvas"/>, generally obtained from the chart object <see cref="P:ShinobiCharts.ShinobiChart.Canvas"/></param>
    </member>

    <member name="M:ShinobiCharts.SChartAnnotation.Dispose(System.Boolean)">
      <summary>Releases unmanaged resources.
      </summary>
	  <remarks></remarks>
	  <param name="disposing">True if called by Dispose, false if called from a finalizer</param>
    </member>
		
      
		<member name="T:ShinobiCharts.SChartAnnotationZooming">
			<summary>An SChartAnnotationZooming object is pinned between two points on each axis in the chart and will scale according to the current range of the axis.
			</summary>
			<remarks>
				<para>
					It is pinned between XValue and XValueMax on the x axis, and YValue and YValueMax on the y axis.
				</para>
				<para>
					This kind of annotation is useful for highlighting areas of data, etc.
					As we zoom in on a range of data, the zooming annotation will also zoom so that it covers the same range of data on the chart axes.
					Due to this, it will not maintain its aspect ratio as the chart is zoomed.
				</para>
			</remarks>
		</member>
		
	<member name="M:ShinobiCharts.SChartAnnotationZooming.#ctor">
      <summary>Default constructor
      </summary>
	  <remarks></remarks>
    </member>
		
	<member name="M:ShinobiCharts.SChartAnnotationZooming.#ctor(MonoTouch.Foundation.NSCoder)">
      <summary>A constructor that initializes the object from the data stored in the unarchiver object.
      </summary>
	  <remarks>This constructor is provided to allow the class to be initialized from an unarchiver (for example, during NIB deserialization).</remarks>
	  <param name="coder">The unarchiver object</param>
    </member>
		
	<member name="M:ShinobiCharts.SChartAnnotationZooming.#ctor(MonoTouch.Foundation.NSObjectFlag)">
      <summary>Constructor to call on derived classes to skip initialization and merely allocate the object.
      </summary>
	  <remarks>You should not invoke this method directly.</remarks>
	  <param name="t">Unused sentinel value</param>
    </member>
		
	<member name="M:ShinobiCharts.SChartAnnotationZooming.#ctor(System.IntPtr)">
      <summary>A constructor used when creating managed representations of unmanaged objects.
      </summary>
	  <remarks>You should not invoke this method directly.</remarks>
	  <param name="handle">Handle of the unmanaged object</param>
    </member>
		
	<member name="M:ShinobiCharts.SChartAnnotationZooming.#ctor(System.Drawing.RectangleF)">
      <summary>Instantiates a SChartAnnotation with the specified frame rectangle.
      </summary>
	  <remarks></remarks>
	  <param name="frame">The frame rectangle</param>
    </member>
		
	<member name="P:ShinobiCharts.SChartAnnotationZooming.ClassHandle">
        <summary>The handle for this class.</summary>
	  <remarks>Not normally used by application code</remarks>
    </member>	
        
    <member name="P:ShinobiCharts.SChartAnnotationZooming.XValueMax">
      <summary>The upper limit of the annotation on the x axis.
      </summary>
		<remarks>A null value will cause the view to be displayed with its original Width.
		</remarks>
    </member>
        
    <member name="P:ShinobiCharts.SChartAnnotationZooming.YValueMax">
      <summary>The upper limit of the annotation on the y axis.
      </summary>
		<remarks>A null value will cause the view to be displayed with its original height. 
		</remarks>
    </member>
        
    <member name="P:ShinobiCharts.SChartAnnotationZooming.StretchToBoundsOnX">
      <summary> Causes the annotation to be stretched to cover the whole width of the chart plot area. 
      </summary>
		<remarks>Defaults to <c>false</c>.</remarks>
    </member>
        
    <member name="P:ShinobiCharts.SChartAnnotationZooming.StretchToBoundsOnY">
      <summary> Causes the annotation to be stretched to cover the whole height of the chart plot area 
      </summary>
		<remarks>Defaults to <c>false</c>.</remarks>
    </member>
        
    <member name="M:ShinobiCharts.SChartAnnotationZooming.UpdateView(ShinobiCharts.SChartCanvas)">
      <summary>Positions the annotation on the chart plot area and zooms according to the axis ranges.
      </summary>
		<remarks>Override this method to provide custom updating of the annotation while it is being positioned on the chart.
		</remarks>
	  <param name="canvas">The <see cref="T:ShinobiCharts.SChartCanvas"/>, generally obtained from the chart object <see cref="P:ShinobiCharts.ShinobiChart.Canvas"/></param>
    </member>

    <member name="M:ShinobiCharts.SChartAnnotationZooming.Dispose(System.Boolean)">
      <summary>Releases unmanaged resources.
      </summary>
	  <remarks></remarks>
	  <param name="disposing">True if called by Dispose, false if called from a finalizer</param>
    </member>

		
	<member name="T:ShinobiCharts.SChartBounceAnimationCurve">
      <summary>This curve evaluator describes a curve where the value starts at 0, climbs past 1 and passes it, then returns to 1, creating a 'bounce' effect.</summary>
	  <remarks>See the <see cref="T:ShinobiCharts.SChartAnimationCurveProtocol" /> protocol for more information on curve evaluation.</remarks>
	</member>
	
    <member name="M:ShinobiCharts.SChartBounceAnimationCurve.#ctor">
      <summary>Default constructor.
      </summary>
		<remarks></remarks>
    </member>
        
	<member name="M:ShinobiCharts.SChartBounceAnimationCurve.#ctor(MonoTouch.Foundation.NSCoder)">
      <summary>A constructor that initializes the object from the data stored in the unarchiver object.
      </summary>
	  <remarks>This constructor is provided to allow the class to be initialized from an unarchiver (for example, during NIB deserialization).</remarks>
	  <param name="coder">The unarchiver object</param>
    </member>
        
    <member name="M:ShinobiCharts.SChartBounceAnimationCurve.#ctor(MonoTouch.Foundation.NSObjectFlag)">
      <summary>Constructor to call on derived classes to skip initialization and merely allocate the object.
      </summary>
	  <remarks>You should not invoke this method directly.</remarks>
	  <param name="t">Unused sentinel value</param>
    </member>
		
	<member name="M:ShinobiCharts.SChartBounceAnimationCurve.#ctor(System.IntPtr)">
      <summary>A constructor used when creating managed representations of unmanaged objects.
      </summary>
	  <remarks>You should not invoke this method directly.</remarks>
	  <param name="handle">Handle of the unmanaged object</param>
    </member>
        
	<member name="P:ShinobiCharts.SChartBounceAnimationCurve.ClassHandle">
        <summary>The handle for this class.
        </summary>
	  <remarks>Not normally used by application code</remarks>
    </member>
        
	<member name="M:ShinobiCharts.SChartBounceAnimationCurve.Dispose(System.Boolean)">
      <summary> Releases unmanaged resources.
      </summary>
	  <remarks></remarks>
	  <param name="disposing">True if called by Dispose, false if called from a finalizer</param>
    </member>

	<member name="M:ShinobiCharts.SChartBounceAnimationCurve.ValueAtTime(System.Single)">
        <summary>Should return an appropriate value for the animation curve at the given time.</summary>
	    <remarks>'Time' will be provided as a float between 0.f and 1.f, where 0.f is the beginning of the animation and 1.f is the end of the animation. (time = elapsed time / duration)
 The value returned represents the progress of the series between its beginning and end positions, where 0.f is the start state and 1.f is, nominally, the end state.
 It is valid to return a value 'v' where either v is less than 0 or v is greater than 1 and it not necessary to return 1 at time 1.</remarks>
    </member>
        
	<member name="M:ShinobiCharts.SChartBounceAnimationCurve.Copy">
        <summary>Creates a copy of the curve</summary>
    </member>
        
		
	<member name="T:ShinobiCharts.SChartBounceDelayAnimationCurve">
      <summary>This curve evaluator describes a curve similar to that described by SChartBounceAnimation but where the 'bounce' occurs over a shorter proportion of the duration (50%).</summary>
	  <remarks>
				For the remainder of the duration, the curve is constant at 1.
				This is the 'delay' where there is no change.
				See the <see cref="T:ShinobiCharts.SChartAnimationCurveProtocol" /> protocol for more information on curve evaluation.
			</remarks>
	</member>	
	
    <member name="M:ShinobiCharts.SChartBounceDelayAnimationCurve.#ctor">
      <summary>Default constructor.
      </summary>
		<remarks></remarks>
    </member>
        
	<member name="M:ShinobiCharts.SChartBounceDelayAnimationCurve.#ctor(MonoTouch.Foundation.NSCoder)">
      <summary>A constructor that initializes the object from the data stored in the unarchiver object.
      </summary>
	  <remarks>This constructor is provided to allow the class to be initialized from an unarchiver (for example, during NIB deserialization).</remarks>
	  <param name="coder">The unarchiver object</param>
    </member>
        
    <member name="M:ShinobiCharts.SChartBounceDelayAnimationCurve.#ctor(MonoTouch.Foundation.NSObjectFlag)">
      <summary>Constructor to call on derived classes to skip initialization and merely allocate the object.
      </summary>
	  <remarks>You should not invoke this method directly.</remarks>
	  <param name="t">Unused sentinel value</param>
    </member>
		
	<member name="M:ShinobiCharts.SChartBounceDelayAnimationCurve.#ctor(System.IntPtr)">
      <summary>A constructor used when creating managed representations of unmanaged objects.
      </summary>
	  <remarks>You should not invoke this method directly.</remarks>
	  <param name="handle">Handle of the unmanaged object</param>
    </member>
        
	<member name="P:ShinobiCharts.SChartBounceDelayAnimationCurve.ClassHandle">
        <summary>The handle for this class.
        </summary>
	  <remarks>Not normally used by application code</remarks>
    </member>
        
	<member name="M:ShinobiCharts.SChartBounceDelayAnimationCurve.Dispose(System.Boolean)">
      <summary> Releases unmanaged resources.
      </summary>
	  <remarks></remarks>
	  <param name="disposing">True if called by Dispose, false if called from a finalizer</param>
    </member>

	<member name="M:ShinobiCharts.SChartBounceDelayAnimationCurve.ValueAtTime(System.Single)">
        <summary>Should return an appropriate value for the animation curve at the given time.</summary>
	    <remarks>'Time' will be provided as a float between 0.f and 1.f, where 0.f is the beginning of the animation and 1.f is the end of the animation. (time = elapsed time / duration)
 The value returned represents the progress of the series between its beginning and end positions, where 0.f is the start state and 1.f is, nominally, the end state.
 It is valid to return a value 'v' where either v is less than 0 or v is greater than 1 and it not necessary to return 1 at time 1.</remarks>
    </member>
        
	<member name="M:ShinobiCharts.SChartBounceDelayAnimationCurve.Copy">
        <summary>Creates a copy of the curve</summary>
    </member>

      
    <member name="T:ShinobiCharts.SChartAxis">
      <summary>Abstract base class for a horizontal or vertical axis providing a visual scale for chart data</summary>
	  <remarks>
				<para>The SChartAxis is responsible for managing the coordinate space of the chart. 
				It is the link between the set of real data in a series and the laying down of that series on a chart in a desired manner. 
				Each series on the chart is linked to an axis and this SChartAxis is responsible for managing all of the series linked to it.</para>
				<para>
					For cartesian series, it is expected that you will provide a subclass of SChartAxis each for the XAxis and YAxis of the chart.
					If not set, both axes will default to instances of <see cref="T:ShinobiCharts.SChartNumberAxis" />.
				</para>
			<para>The axis range can be set to a desired range or left to calculate its own minimum and maximum. 
					When auto-calculating the range, it will consider all data series associated with it.
					You can set the desired range by passing in an <see cref="T:ShinobiCharts.SChartRange"/> object when constructing the axis, or by setting the <see cref="P:ShinobiCharts.SChartAxis.DefaultRange"/> property.
					</para>
			<para>
 				The axis is also the home of the tick marks and their labels. These can be auto-calculated or set to specific values.</para>
	  </remarks>
	  <altmember cref="T:ShinobiCharts.SChartNumberAxis" />
	  <altmember cref="T:ShinobiCharts.SChartDateTimeAxis" />
	  <altmember cref="T:ShinobiCharts.SChartDiscontinuousNumberAxis" />
	  <altmember cref="T:ShinobiCharts.SChartDiscontinuousDateTimeAxis" />
	  <altmember cref="T:ShinobiCharts.SChartCategoryAxis" />
	  <altmember cref="T:ShinobiCharts.SChartLogarithmicAxis" />
	  <altmember cref="T:ShinobiCharts.SChartAxisStyle" />
    </member>
        
    <member name="M:ShinobiCharts.SChartAxis.#ctor">
      <summary>Create and return an axis for a given chart area.
      </summary>
		<remarks></remarks>
    </member>
		
	<member name="M:ShinobiCharts.SChartAxis.#ctor(MonoTouch.Foundation.NSCoder)">
      <summary>A constructor that initializes the object from the data stored in the unarchiver object.
      </summary>
	  <remarks>This constructor is provided to allow the class to be initialized from an unarchiver (for example, during NIB deserialization).</remarks>
	  <param name="coder">The unarchiver object</param>
    </member>
        
    <member name="M:ShinobiCharts.SChartAxis.#ctor(MonoTouch.Foundation.NSObjectFlag)">
      <summary>Constructor to call on derived classes to skip initialization and merely allocate the object.
      </summary>
	  <remarks>You should not invoke this method directly.</remarks>
	  <param name="t">Unused sentinel value</param>
    </member>
		
	<member name="M:ShinobiCharts.SChartAxis.#ctor(System.IntPtr)">
      <summary>A constructor used when creating managed representations of unmanaged objects.
      </summary>
	  <remarks>You should not invoke this method directly.</remarks>
	  <param name="handle">Handle of the unmanaged object</param>
    </member>

	<member name="P:ShinobiCharts.SChartAxis.ClassHandle">
        <summary>The handle for this class.</summary>
	  <remarks>Not normally used by application code</remarks>
    </member>

	<member name="M:ShinobiCharts.SChartAxis.#ctor(ShinobiCharts.SChartRange)">
		<summary>Create the axis with the given range.</summary>
		<remarks></remarks>
	</member>

    <member name="P:ShinobiCharts.SChartAxis.Chart">
      <summary> A reference to the parent chart
      </summary>
	  <remarks> The axis retains a handle on the chart using it so that it can access user-set drawing parameters. 
	  </remarks>	
    </member>
        
		<member name="P:ShinobiCharts.SChartAxis.AxisPosition">
			<summary> Defines whether the axis will be Positioned at the normal or reverse location.
			</summary>
			<remarks>
				For xAxes, the 'normal' position is below the plot area, with the 'reverse' location above.
				For yAxes, the 'normal' position is to the left of the plot area and the 'reverse' position is to the right.
				Often, it is a good idea when adding a secondary axis, using <see cref="M:ShinobiCharts.ShinobiChart.AddXAxis(ShinobiCharts.SChartAxis)" />
				or <see cref="M:ShinobiCharts.ShinobiChart.AddYAxis(ShinobiCharts.SChartAxis)" />, to position one axis in each position.
			</remarks>
		</member>
        
		<member name="P:ShinobiCharts.SChartAxis.AxisPositionValue">
			<summary>
				The value at which an axis intersects with the opposite axis.
			</summary>
			<remarks>
				For example, if this is set to 0 on a y axis, it will intersect with the x axis at the point which corresponds to a value of 0 in data terms.
				If there is more than one axis of the other orientation on the chart, the primary axis will be used.
			</remarks>
		</member>
        
		<member name="P:ShinobiCharts.SChartAxis.AxisLabelsAreFixed">
			<summary> Defines whether axis labels fixed in place.
			</summary>
			<remarks>
			If this is set to <c>true</c>, labels will stay fixed at the bottom/left or top/right of the chart depending on the axisPosition parameter.
			</remarks>
		</member>
        
		<member name="P:ShinobiCharts.SChartAxis.Style">
			<summary>The SChartAxisStyle object that manages the appearance of the axis.
			</summary>
			<remarks>
				Setting these values will override any values set by the Theme.
				Calling ApplyTheme on the chart, though, will reapply the theme style.
			</remarks>
		</member>
        
    <member name="P:ShinobiCharts.SChartAxis.Width">
      <summary> Specifies a fixed Width for the axis area that won't change.
      </summary>
		<remarks>This is useful to fix the axis in Position to align multiple charts. However, it may restrict the options for labelling the chart.
		</remarks>
    </member>
        
    <member name="P:ShinobiCharts.SChartAxis.Title">
      <summary>The text to display in the axis title.
      </summary>
		<remarks></remarks>
    </member>
        
    <member name="P:ShinobiCharts.SChartAxis.TitleLabel">
      <summary>The title for the axis.
      </summary>
		<remarks></remarks>
    </member>
        
    <member name="P:ShinobiCharts.SChartAxis.AxisRange">
      <summary>The current displayed  range of the axis.
      </summary>
		<remarks> This property is the actual range currently displayed on the visible area of the chart - which may not be the range that was explicitly set. 
				  The axis may make small adjustments to the range to make sure that whole bars are displayed etc. This is a readonly property - explicit requests 
				  to change the axis range should be made through the method
				<see cref="M:ShinobiCharts.SChartAxis.SetRange(MonoTouch.Foundation.NSObject,MonoTouch.Foundation.NSObject)"/>.
		</remarks>
    </member>
        
		<member name="P:ShinobiCharts.SChartAxis.DataRange">
			<summary> A readonly property indicating the total data range across all series represented by this axis.
			</summary>
			<remarks>
				These are absolute minimum and absolute maximum values from the data series represented by this axis.
				This range does not necessarily represent exactly the range of what is drawn on the axis, depending on how the data is visualised -
				for this see <see cref="P:ShinobiCharts.SChartAxis.VisibleRange" />. 
			</remarks>
		</member>
        
    <member name="P:ShinobiCharts.SChartAxis.VisibleRange">
      <summary> A range within which all the visible (non-hidden) series on this axis will be displayed.</summary>
		<remarks>Setting the default range to this range should frame your data nicely.
 Note that this will take baselines, bar/column widths etc into consideration and so is not necessarily the same as DataRange.</remarks>
    </member>
        
    <member name="P:ShinobiCharts.SChartAxis.DefaultRange">
      <summary> This is the range that will be displayed after the chart initially loads - and if the Zoom is reset.
      </summary>
		<remarks>By default it is set to be the <see cref="P:ShinobiCharts.SChartAxis.DataRange"/>, but can be set to custom values.
	    </remarks>
    </member>
        
    <member name="P:ShinobiCharts.SChartAxis.RangePaddingLow">
      <summary> In data terms, the amount by which the lower limit of the axis range will be lowered past the range of the data.
      </summary>
		<remarks>By default, this is set to 0.
		</remarks>
    </member>

        
    <member name="P:ShinobiCharts.SChartAxis.RangePaddingHigh">
      <summary> In data terms, the amount by which the upper limit of the axis range will be raised past the range of the data.
      </summary>
		<remarks> By default, this is set to 0.
		</remarks>
    </member>
       
    <member name="P:ShinobiCharts.SChartAxis.AllowPanningOutOfDefaultRange">
      <summary> Whether or not the user is permitted to pan outside of the user-set default range.
      </summary>
		<remarks> 	With a user-set default range this can be used to either limit panning and Zooming to a subset of the data 
					or to allow panning or Zooming outside of the datarange but whilst still setting limits. If the default range 
					is not set, it defaults to <see cref="P:ShinobiCharts.SChartAxis.DataRange"/> and <see cref="P:ShinobiCharts.SChartAxis.AllowPanningOutOfMaxRange"/> should be used instead. 
		</remarks>
    </member>
        
    <member name="P:ShinobiCharts.SChartAxis.AllowPanningOutOfMaxRange">
      <summary> Whether or not the user is permitted to pan outside of the union of the data range and the default range 
      </summary>
		<remarks> If this is enabled but <see cref="P:ShinobiCharts.SChartAxis.AllowPanningOutOfDefaultRange"/> is disabled, panning will still be restricted to the data range
		</remarks>
    </member>
        
    <member name="P:ShinobiCharts.SChartAxis.AnimationEdgeBouncing">
      <summary>Whether or not the axis allows the range to temporarily go past the limit specified before bouncing back in.
      </summary>
		<remarks> If this is enabled, the range will bounce back into the given limit. If there is no range limit, this option does nothing.
		</remarks>
    </member>
        
    <member name="P:ShinobiCharts.SChartAxis.AnimationEnabled">
      <summary>Whether or not the axis animates when zooming programmatically, or via double-tap on box gesture.
      </summary>
		<remarks> If this is enabled, the axis will Zoom smoothly from starting to target Zoom levels. 
		</remarks>
    </member>
        
		<member name="P:ShinobiCharts.SChartAxis.AxisFrame">
			<summary> The frame bounding the area where the axis is drawn.
			</summary>
			<remarks>
				This area in terms of the chart frame within which the axis line, tickmarks and ticklabels are drawn.
				It can have a fixed width if the Width property is set, otherwise it wil be dynamic and affected by the tickmarks and their labels.
			</remarks>
		</member>
        
    <member name="P:ShinobiCharts.SChartAxis.AxisOrientation">
      <summary> The Orientation of the axis. 
      </summary>
		<remarks>Axis objects are universal and may be used as an x axis (horizontal) or as a y axis (vertical). This property is determined when the axis is assigned to the chart. 
		</remarks>
    </member>
        
    <member name="P:ShinobiCharts.SChartAxis.MajorTickFrequency">
      <summary>An appropriate object representing the major tick mark frequency
      </summary>
		<remarks> If this value is set, the chart will not make any auto-calculations 
				  for major tick marks and only display a major tick mark at this frequency, 
				  regardless of zoom level. The definition of appropriate value is dependent 
				  upon the axis type - ie: <see cref="T:ShinobiCharts.SChartNumberAxis"/>, <see cref="T:ShinobiCharts.SChartDateAxis"/>. The first major 
				  tick mark will be at the absolute minimum data value across all series for 
				  this axis - with subsequent major tick marks incrementing by the frequency.
			      To change this initial value see <see cref="P:ShinobiCharts.SChartAxis.AnchorPoint"/>. By default an appropriate 
				  major tick mark value will be selected by the chart and will adapt as the 
				  user zooms the chart. 
		</remarks>
    </member>
        
    <member name="P:ShinobiCharts.SChartAxis.MinorTickFrequency">
      <summary> An appropriate object representing the minor tick mark frequency
      </summary>
		<remarks> If this value is set, the chart will not make any auto-calculations 
				  for minor tick marks and only display a minor tick mark at this frequency, 
				  regardless of zoom level. The definition of appropriate value is dependent 
				  upon the axis type - ie: <see cref="T:ShinobiCharts.SChartNumberAxis"/>, <see cref="T:ShinobiCharts.SChartDateAxis"/>. The first minor 
				  tick mark will be at the absolute minimum data value across all series for 
				  this axis - with subsequent minor tick marks incrementing by the frequency.
			      To change this initial value see <see cref="P:ShinobiCharts.SChartAxis.AnchorPoint"/>. By default an appropriate 
				  minor tick mark value will be selected by the chart and will adapt as the 
				  user zooms the chart.
				In order for the chart to adhere to a non-nil value you have assigned to this property you must also set a <c>MajorTickFrequency</c>.
		</remarks>
    </member>
        
		<member name="P:ShinobiCharts.SChartAxis.AnchorPoint">
			<summary> The start point for the calculation of tick marks.
			</summary>
			<remarks>
				For example, if your AxisRange is 1 to 9, your AnchorPoint is 0 and the CurrentMajorTickFrequency is 2,
				you will get tickmarks and labels at 2, 4, 6 and 8, assuming that the labels' text and the clipping settings permit.
				Regardless of whether a tick mark frequency has been set or automatically calculated, it must start somewhere. 
				This value acts as the origin point for tickmarks on the axis.
				This defaults to the DataRange Minimum.
			</remarks>
		</member>
        
    <member name="P:ShinobiCharts.SChartAxis.LabelFormatString">
      <summary> A string to format each tick mark label - actual format is dependent on axis type.
      </summary>
		<remarks><para>DEPRECATED - use labelFormatter to specify formatting.</para>
				<para>If an axis is auto-calculating tick marks - it will select an appropriate label format (ie: Months, Days, Hours, etc). However, setting this value will override all tick mark labels to use this formatter.</para>
 				<para></para>
				<para>	- For a number axis, use the float formatter, ie: `"%1.2f mm"`.</para>
				<para>	- For a date axis, use the date formatter, ie: `"dd MMM"`.</para>
				<para>	- For a category axis, use the string formatter, ie: `"% District"`.</para>
		</remarks>
    </member>
        
    <member name="P:ShinobiCharts.SChartAxis.BarColSpacing">
      <summary>The smallest change in value between any adjacent bars or columns. 
      </summary>
		<remarks> Specifying this can improve the render time of the chart - it will not have to traverse all of the data to compare differences. 
		</remarks>
    </member>
        
		<member name="P:ShinobiCharts.SChartAxis.BarColMin">
			<summary>The minimum value of a bar or column across all of the bar/column series for this axis.
			</summary>
			<remarks>
				You can set this by using the appropriate
				<see cref="M:ShinobiCharts.SChartAxis.ConfigureBars(System.Double,MonoTouch.Foundation.NSNumber,MonoTouch.Foundation.NSNumber)" />
				method for the axis orientation.
			</remarks>
		</member>
        
		<member name="P:ShinobiCharts.SChartAxis.BarColMax">
			<summary>The maximum value of a bar or column across all of the bar/column series for this axis.
			</summary>
			<remarks>
				You can set this by using the appropriate
				<see cref="M:ShinobiCharts.SChartAxis.ConfigureBars(System.Double,MonoTouch.Foundation.NSNumber,MonoTouch.Foundation.NSNumber)" />
				method for the axis orientation.
			</remarks>
		</member>
        
		<member name="P:ShinobiCharts.SChartAxis.RecalculateBarColumnsRequired">
			<summary>DEPRECATED - this will be removed from the API soon.</summary>
			<remarks>
				During the next render process, forces the recalculation of the barcolumn series.
				During normal operation the panning and zooming will take place using transforms - with only periodic recalculations.
				Setting this to <c>true</c> will force the bars and columns to recalculate all coordinates.
			</remarks>
		</member>
        
		<member name="P:ShinobiCharts.SChartAxis.BarColumnsConfigured">
			<summary>DEPRECATED - this will be removed from the API soon.</summary>
			<remarks>
				A boolean indicating if the bar and column series are already configured.
				If this is <c>true</c> the chart will not traverse the data to work out spacing and ranges.
			</remarks>
		</member>
        
    <member name="P:ShinobiCharts.SChartAxis.EnableGestureZooming">
      <summary>Set to true to allow pinch gestures to Zoom the chart. 
      </summary>
		<remarks></remarks>
    </member>
        
    <member name="P:ShinobiCharts.SChartAxis.EnableGesturePanning">
      <summary> Panning 
      </summary>
		<remarks> Set to true to allow swipe gestures to pan the chart. 
		</remarks>
    </member>
        
    <member name="P:ShinobiCharts.SChartAxis.EnableMomentumZooming">
      <summary> Enables momentum zooming.
      </summary>
		<remarks>When momentum zooming is enabled, fast pinch gestures will cause the chart to continue
 to zoom during a brief 'slowing down' period rather than stopping immediately.
		</remarks>
    </member>
        
    <member name="P:ShinobiCharts.SChartAxis.IsMomentumZooming">
      <summary> Will always be true when the axis is decelerating from a pinch zoom gesture. 
      </summary>
		<remarks></remarks>
    </member>
        
    <member name="P:ShinobiCharts.SChartAxis.ZoomMomentumDelay">
      <summary>The time steps of each deceleration after a pinch zoom gesture.
      </summary>
		<remarks> If <see cref="P:ShinobiCharts.SChartAxis.EnableMomentumZooming"/> is set to true, the velocity of the zoom pinch gesture will decay over a number of increments.
			      These increments are a fixed time period specified here. During this fixed period the velocity will decay by a factor <see cref="P:ShinobiCharts.SChartAxis.ZoomMomentumFactor"/>
		</remarks>
    </member>
        
    <member name="P:ShinobiCharts.SChartAxis.ZoomMomentumFactor">
      <summary> The factor by which the velocity of the gesture will decay during one deceleration time period.
      </summary>
		<remarks> If <see cref="P:ShinobiCharts.SChartAxis.EnableMomentumZooming"/> is set to true, the velocity of the zoom pinch gesture will decay over a number of increments. 
				  These increments are a fixed time period specified in <see cref="P:ShinobiCharts.SChartAxis.ZoomMomentumDelay"/>. During this fixed period the velocity will decay by this factor. 
		</remarks>
    </member>
        
    <member name="P:ShinobiCharts.SChartAxis.EnableMomentumPanning">
      <summary> Enables momentum panning
      </summary>
		<remarks>When momentum panning is enabled, fast pan gestures will cause the chart to continue
 				 to pan during a brief 'slowing down' period rather than stopping immediately.
		</remarks>
    </member>
        
    <member name="P:ShinobiCharts.SChartAxis.IsMomentumPanning">
      <summary> Will always be true when the axis is decelerating from a pan swipe gesture 
      </summary>
		<remarks></remarks>
    </member>
        
    <member name="P:ShinobiCharts.SChartAxis.PanMomentumDelay">
      <summary> The time steps of each deceleration after a pan swipe gesture.
      </summary>
		<remarks> If <see cref="P:ShinobiCharts.SChartAxis.EnableMomentumPanning"/> is set to true, the velocity of the swipe gesture will decay over a number of increments. 
				  These increments are a fixed time period specified here. During this fixed period the velocity will decay by a factor <see cref="P:ShinobiCharts.SChartAxis.PanMomentumFactor"/>
		</remarks>
    </member>
        
    <member name="P:ShinobiCharts.SChartAxis.PanMomentumFactor">
      <summary> The factor by which the velocity of the gesture will decay during one deceleration time period.
      </summary>
		<remarks> If <see cref="P:ShinobiCharts.SChartAxis.EnableMomentumPanning"/> is set to true, the velocity of the swipe gesture will decay over a number of increments. 
				  These increments are a fixed time period specified in <see cref="P:ShinobiCharts.SChartAxis.PanMomentumDelay"/>. During this fixed period the velocity will decay by this factor. 
		</remarks>
    </member>
        
		<member name="P:ShinobiCharts.SChartAxis.SecondaryAxisOffset">
			<summary>The offset to the axis object from the edge of the canvas, in points.
			</summary>
			<remarks>
				For xAxes, this is from the bottom edge of the canvas frame for axes at the 'normal' AxisPosition and from the top for axes at the 'reverse' AxisPosition.
				For yAxes, this is from the left edge of the canvas frame for axes at the 'normal' AxisPosition and from the right for axes at the 'reverse' AxisPosition.
			</remarks>
		</member>
        
		<member name="P:ShinobiCharts.SChartAxis.TickLabelClippingModeHigh">
			<summary>This property allows you to alter the tick label clipping mode for the upper end of an axis.
			</summary>
			<remarks>
				<list type="bullet">
					<item>
						<term>
							<see cref="F:ShinobiCharts.SChartTickLabelClippingMode.TicksAndLabelsPersist" /> -
							Keep both the label and tick visible for as long as possible, allowing the label to overlap with adjacent axes.
						</term>
					</item>
					<item>
						<term>
							<see cref="F:ShinobiCharts.SChartTickLabelClippingMode.TicksPersist" /> -
							Keep the tick mark visible for as long as possible and clip the label as soon as it reaches the edge of its view.
						</term>
					</item>
					<item>
						<term>
							<see cref="F:ShinobiCharts.SChartTickLabelClippingMode.NeitherPersist" /> -
							Keep the tick mark visible as long as the tick label is visible -
							as soon as the tick label reaches its bounds, and is clipped, clip the tick mark too.
						</term>
					</item>
				</list>
			</remarks>
		</member>
        
    <member name="P:ShinobiCharts.SChartAxis.TickLabelClippingModeLow">
      <summary>This property allows you to alter the tick label clipping mode for the lower end of an axis.
      </summary>
	  <remarks>See <see cref="P:ShinobiCharts.SChartAxis.SecondaryAxisOffset" />.</remarks>
    </member>
    
    		<member name="P:ShinobiCharts.SChartAxis.DiscontinuousTickLabelClipping">
			<summary>
				This property comes into effect for discontinuous axes over a discontinuity.
			</summary>
			<remarks>
				<para>
					When there are labels either side of a discontinuity which overlap, either
					the higher or lower label will be removed, this property controls which.
				</para><para>
					<see cref="F:ShinobiCharts.SChartDiscontinuousTickLabelClipping.Low" /> removes the lower tick label while
					<see cref="F:ShinobiCharts.SChartDiscontinuousTickLabelClipping.High" /> removes the higher.
				</para><para>
					Defaults to <see cref="F:ShinobiCharts.SChartDiscontinuousTickLabelClipping.Low" />.
				</para>
			</remarks>
		</member>
		
		<member name="P:ShinobiCharts.SChartAxis.CalculateMajorTickFrequencyFromDiscontinuousRange">
			<summary>
				This property controls how the auto-tick-frequency calculations are done.
			</summary>
			<remarks>
				<para>
					Normally, the axis will use the full range of data to calculate how often to
					place a tick-mark, however if the range has discontinuities, this option allows
					the axis to exclude the discontinuities in its calculations of the range over
					which the tick marks are added.
				</para><para>
					For example - you have a year range, but are excluding 7 months using
					discontinuous periods. If this property is <c>false</c>, the tick labels will be added
					as if the range is one year. If this property is <c>true</c>, the tick labels will be
					added as if the range is 5 months (12 - 7).
				</para><para>
					If <c>true</c>, the axis will exclude discontinuities when calculating the range.
				</para><para>
					Defaults to <c>false</c>.
				</para>
			</remarks>
		</member>
		
		

        
    <member name="P:ShinobiCharts.SChartAxis.LabelSizeScalers">
      <summary>DEPRECATED - this will be removed from the API soon.
      </summary>
    </member>
        
    <member name="P:ShinobiCharts.SChartAxis.LabelFormatter">
      <summary>A label formatter for tick mark labels.
      </summary>
	  <remarks>Use this to set formatting options for tick labels on this axis - currencies, (negative) value styles etc.</remarks>
    </member>
        
		<member name="M:ShinobiCharts.SChartAxis.SetRange(MonoTouch.Foundation.NSObject,MonoTouch.Foundation.NSObject)">
			<summary>Attempts to set the current visible range <see cref="P:ShinobiCharts.SChartAxis.AxisRange"/> to a range with the given minimum and maximum values.
			</summary>
			<remarks>
				<para>
					Given any restrictions on setting the range, such as <see cref="P:ShinobiCharts.SChartAxis.AllowPanningOutOfMaxRange"/> etc, this method
					will attempt to set the current axis range.
				</para>
				<para>
					The permissable types of minimum and maximum will vary depending on the type of axis in use.
					The range of an SChartNumberAxis should be set using two objects of type <c>NSNumber</c> for Minimum and Maximum,
					whilst that of an SChartDateTimeAxis can be configured using either <c>NSNumber</c> or <c>NSDate</c> minima and maxima.
					In the case of SChartCategoryAxis, the first value has a nominal integer value of '0' and the nth value, 'n-1'.
					A few examples:
					<code>// Range from 20 to 140 on an SChartNumberAxis.
myNumberAxis.SetRange(new NSNumber(20), new NSNumber(140));

// Range from June 2013 to January 2014 (approx.) on an SChartDateTimeAxis.
myDateTimeAxis.SetRange(NSDate.FromTimeIntervalSince1970(86400.0*365*43.5), NSDate.FromTimeIntervalSince1970(86400.0*365*44));

// Range between the third and fifth elements on an SChartCategoryAxis.
myCategoryAxis.SetRange(new NSNumber(2), new NSNumber(6));</code>
				</para>
			</remarks>
			<param name="minimum">The minimum value to be displayed, in data terms.</param>
			<param name="maximum">The maximum value to be displayed, in data terms.</param>
			<returns>Whether or not the operation was successful.</returns>
		</member>
        
		<member name="M:ShinobiCharts.SChartAxis.SetRange(MonoTouch.Foundation.NSObject,MonoTouch.Foundation.NSObject,System.Boolean)">
			<summary> Attempts to set the current visible range <see cref="P:ShinobiCharts.SChartAxis.AxisRange"/> to a range with the given minimum and maximum values.
			</summary>
			<remarks>
				Given any restrictions on setting the range, such as <see cref="P:ShinobiCharts.SChartAxis.AllowPanningOutOfMaxRange"/> etc,
				this method will attempt to set the current axis range.
				This implementation allows you to explicitly set whether to animate the transition to the new range or not.
				See <see cref="M:ShinobiCharts.SChartAxis.SetRange(MonoTouch.Foundation.NSObject,MonoTouch.Foundation.NSObject)" />.
			</remarks>
			<param name="minimum">The minimum value to be displayed, in data terms.</param>
			<param name="maximum">The maximum value to be displayed, in data terms.</param>
			<param name="animation">Whether or not to animate the range change.</param>
			<returns>Whether or not the operation was successful.</returns>
		</member>
        
    <member name="M:ShinobiCharts.SChartAxis.SetRange(MonoTouch.Foundation.NSObject,MonoTouch.Foundation.NSObject,System.Boolean,System.Boolean)">
      <summary>DEPRECATED - this will be removed from the API soon.</summary>
    </member>
        
    <member name="M:ShinobiCharts.SChartAxis.IsBeyondAxisLimits">
      <summary>DEPRECATED - this will be removed from the API soon.</summary>
    </member>
        
    <member name="M:ShinobiCharts.SChartAxis.IsBeyondAxisLimitsOnBothSides">
      <summary>DEPRECATED - this will be removed from the API soon.</summary>
    </member>
        
    <member name="M:ShinobiCharts.SChartAxis.IsBeyondAxisMinLimit">
      <summary>DEPRECATED - this will be removed from the API soon.</summary>
    </member>
        
    <member name="M:ShinobiCharts.SChartAxis.RemoveViews">
      <summary>
      </summary>
	  <remarks></remarks>
	  <returns></returns>
    </member>
        
    <member name="M:ShinobiCharts.SChartAxis.AppropriateFormat(MonoTouch.Foundation.NSObject,System.Boolean)">
      <summary>DEPRECATED - this will be removed from the API soon.
      </summary>
	  <remarks></remarks>
	  <param name="numberObj"></param>
	  <param name="fallbackToLabelFormatter"></param>
	  <returns></returns>
    </member>
        
    <member name="M:ShinobiCharts.SChartAxis.AppropriateFormat(MonoTouch.Foundation.NSObject)">
      <summary>DEPRECATED - this will be removed from the API soon.
      </summary>
	  <remarks></remarks>
	  <param name="numberObj"></param>
	  <returns></returns>
    </member>
        
		<member name="M:ShinobiCharts.SChartAxis.AlterTickMark(ShinobiCharts.SChartTickMark)">
			<summary>Override this if you want to customize a tickmark before it is added to its axis (optional, and can also be done in <see cref= "M:ShinobiCharts.SChartDelegate.OnAddingTickMark"/>).
			</summary>
			<remarks>
				This method gives you each tickMark just before it is added to its axis. Use this to set colors, borders, or even move the tickmark's label elsewhere.
			</remarks>
		</member>
        
    <member name="M:ShinobiCharts.SChartAxis.RecheckAxisRange">
      <summary>DEPRECATED - this will be removed from the API soon.</summary>
    </member>
        
    <member name="M:ShinobiCharts.SChartAxis.GetNewRange(MonoTouch.Foundation.NSNumber,MonoTouch.Foundation.NSNumber)">
      <summary> Creates a new range object with the given maximum and minimum. 
 				The subclass of <see cref="T:ShinobiCharts.SChartRange"/> that is returned will correspond to the axis type. 
      </summary>
	  <remarks></remarks>
	  <param name="minimum">The range minimum</param>
	  <param name="maximum">The range maximum</param>
	  <returns></returns>
    </member>
        
    <member name="M:ShinobiCharts.SChartAxis.SetZoom(System.Double)">
      <summary>Sets the zoom of the axis, based around a fixed point.</summary>
	  <remarks>The zoom is from the midpoint of the axisRange. The zoom is not animated. The axisRange will not 'bounce' if it strays outside of the permissable range.</remarks>
	  <param name="z">The zoom level. 1.0 is the starting zoom level, 0.5 is 2x magnification, etc.</param>
    </member>
        
    <member name="M:ShinobiCharts.SChartAxis.SetZoom(System.Double,System.Boolean)">
      <summary> Sets the zoom of the axis, based around a fixed point.</summary>
	  <remarks>The zoom is from the midpoint of the axisRange. The axisRange will not 'bounce' if it strays outside of the permissable range.</remarks>
	  <param name="z">The zoom level. 1.0 is the starting zoom level, 0.5 is 2x magnification, etc.</param>
	  <param name="animation">Whether or not the zoom operation should be animated. If not animated, the zoom will be instant.</param>
	  <returns>Whether or not the zoom operation was successful.</returns>
    </member>
        
    <member name="M:ShinobiCharts.SChartAxis.SetZoom(System.Double,System.Double@)">
      <summary> Sets the zoom of the axis, based around a fixed point.</summary>
	  <remarks>The zoom is not animated. The axisRange will not 'bounce' if it strays outside of the permissable range.</remarks>
	  <param name="z">The zoom level. 1.0 is the starting zoom level, 0.5 is 2x magnification, etc.</param>
	  <param name="position">The position on the axis around which to zoom in/out.</param>
	  <returns>Whether or not the zoom operation was successful.</returns>
    </member>
        
    <member name="M:ShinobiCharts.SChartAxis.SetZoom(System.Double,System.Double@,System.Boolean)">
      <summary> Sets the zoom of the axis, based around a fixed point.</summary>
	  <remarks>The axisRange will not 'bounce' if it strays outside of the permissable range.</remarks>
	  <param name="z">The zoom level. 1.0 is the starting zoom level, 0.5 is 2x magnification, etc.</param>
	  <param name="position">The position on the axis around which to zoom in/out.</param>
	  <param name="animation">Whether or not the zoom operation should be animated. If not animated, the zoom will be instant.</param>
	  <returns>Whether or not the zoom operation was successful.</returns>
    </member>
        
    <member name="M:ShinobiCharts.SChartAxis.SetZoom(System.Double,System.Double@,System.Boolean,System.Boolean)">
      <summary>Sets the zoom of the axis, based around a fixed point.</summary>
	  <returns>Whether or not the zoom operation was successful.</returns>
	  <param name="z">The zoom level. 1.0 is the starting zoom level, 0.5 is 2x magnification, etc.</param>
	  <param name="position">The position on the axis around which to zoom in/out.</param>
	  <param name="animation">Whether or not the zoom operation should be animated. If not animated, the zoom will be instant.</param>
	  <param name="bounceLimits">Whether or not the axisRange should 'bounce' if it strays outside of the permissable range.</param>
	  <returns>Whether or not the zoom operation was successful.</returns>
    </member>
        
    <member name="M:ShinobiCharts.SChartAxis.ZoomToPoint(System.Double,System.Double)">
      <summary>Zoom to a set range, centred on a point.</summary>
	  <remarks>See <see cref="M:ShinobiCharts.SChartAxis.ZoomToPoint(System.Double,System.Double,System.Boolean,System.Boolean)" />.</remarks>
	  <param name="point">The point on the axis around which to zoom in/out.</param>
	  <param name="range">The magnitude of the range to zoom in to - this will be centred around the point specified.</param>
    </member>
        
    <member name="M:ShinobiCharts.SChartAxis.ZoomToPoint(System.Double,System.Double,System.Boolean,System.Boolean)">
      <summary>Zoom to a set range, centred on a point.</summary>
	  <remarks>This method is for zooming in to a point using a range in data terms rather than a zoom level.</remarks>
	  <param name="point">The point on the axis around which to zoom in/out.</param>
	  <param name="range">The magnitude of the range to zoom in to - this will be centred around the point specified.</param>
	  <param name="animate">Whether or not the zoom operation should be animated. If not animated, the zoom will be instant.</param>
	  <param name="bounce">Whether or not the axisRange should 'bounce' if it strays outside of the permissable range.</param>
    </member>
        
    <member name="M:ShinobiCharts.SChartAxis.ResetZoomLevel">
      <summary>Sets the axis back to its original zoom</summary>
	  <remarks>See <see cref="M:ShinobiCharts.SChartAxis.ResetZoomLevel(System.Boolean)" />.</remarks>
	  <returns>Whether or not the zoom operation was successful.</returns>
    </member>
        
    <member name="M:ShinobiCharts.SChartAxis.ResetZoomLevel(System.Boolean)">
      <summary>Sets the axis back to its original zoom.</summary>
	  <remarks></remarks>
	  <param name="animate">Whether or not the zoom operation should be animated. If not animated, this reset will be instant.</param>
	  <returns>Whether or not the zoom operation was successful.</returns>
    </member>
        
    <member name="M:ShinobiCharts.SChartAxis.SetZoomLevel(ShinobiCharts.SChartAxisZoomLevel)">
      <summary> Sets the zoom to a standard level.
      </summary>
	  <remarks>To set an explicit zoom use <see cref="M:ShinobiCharts.SChartAxis.SetZoom"/>.</remarks>
	  <param name="zoomLevel">A predefined <see cref="T:ShinobiCharts.SChartAxisZoomLevel"/> for the axis.</param>
    </member>
        
    <member name="M:ShinobiCharts.SChartAxis.Zoom">
      <summary>Returns the current zoom level, relative to the DefaultRange of the axis.
      </summary>
	  <remarks></remarks>
	  <returns>The current zoom level</returns>
    </member>
        
    <member name="M:ShinobiCharts.SChartAxis.PanByValue(System.Double)">
      <summary>Pan the axis range by an explicit amount. 
      </summary>
      <remarks></remarks>
	  <param name="value">the value, in data terms, by which the axis range should pan by.</param>
	  <returns>Whether or not the pan operation was successful.</returns>
    </member>
        
    <member name="M:ShinobiCharts.SChartAxis.PanByValue(System.Double,System.Boolean)">
      <summary>Pan the axis range by an explicit amount. 
      </summary>
      <remarks></remarks>
	  <param name="value">the value, in data terms, by which the axis range should pan by.</param>
	  <param name="animation">whether or not the pan operation should be animated. If not animated, the pan will be instant.</param>
	  <returns>Whether or not the pan operation was successful.</returns>
    </member>
        
    <member name="M:ShinobiCharts.SChartAxis.PanByValue(System.Double,System.Boolean,System.Boolean)">
      <summary>Pan the axis range by an explicit amount. 
      </summary>
      <remarks></remarks>
	  <param name="value">the value, in data terms, by which the axis range should pan by.</param>
	  <param name="animation">whether or not the pan operation should be animated. If not animated, the pan will be instant.</param>
	  <param name="panWithBouncing">whether or not the axisRange should 'bounce' if it strays outside of the permissable range.</param>
	  <returns>Whether or not the pan operation was successful.</returns>
    </member>
        
    <member name="M:ShinobiCharts.SChartAxis.PanByValue(System.Double,System.Boolean,System.Boolean,System.Boolean)">
      <summary>Pan the axis range by an explicit amount. 
      </summary>
      <remarks></remarks>
	  <param name="value">the value, in data terms, by which the axis range should pan by.</param>
	  <param name="animation">whether or not the pan operation should be animated. If not animated, the pan will be instant.</param>
	  <param name="panWithBouncing">whether or not the axisRange should 'bounce' if it strays outside of the permissable range.</param>
	  <param name="redraw">redraw the chart after the pan operation.</param>
	  <returns>Whether or not the pan operation was successful.</returns>
    </member>
        
    <member name="M:ShinobiCharts.SChartAxis.PanTo(ShinobiCharts.SChartAxisPanTo)">
      <summary>DEPRECATED - this will be removed from the API soon.
      </summary>
	  <remarks>Pan to a standard Position. To set an explicit zoom use <see cref="M:ShinobiCharts.SChartAxis.PanByValue"/>.</remarks>
	  <param name="where"></param>
	  <returns></returns>
    </member>
        
    <member name="M:ShinobiCharts.SChartAxis.PanTo(ShinobiCharts.SChartAxisPanTo,System.Boolean)">
      <summary>DEPRECATED - this will be removed from the API soon.
      </summary>
	  <remarks>Pan to a standard Position. To set an explicit zoom use <see cref="M:ShinobiCharts.SChartAxis.PanByValue"/>.</remarks>
	  <param name="where"></param>
	  <param name="animation"></param>
	  <returns></returns>
    </member>
        
    <member name="M:ShinobiCharts.SChartAxis.PanWithMomentum(System.Double)">
      <summary>DEPRECATED - this will be removed from the API soon.
      </summary>
	  <remarks></remarks>
	  <param name="panVelocityWrapper"></param>
	  <returns></returns>
    </member>
        
    <member name="M:ShinobiCharts.SChartAxis.PanWithMomentum">
      <summary>DEPRECATED - this will be removed from the API soon.
      </summary>
	  <remarks></remarks>
	  <returns></returns>
    </member>
        
    <member name="M:ShinobiCharts.SChartAxis.UpdateZoom">
      <summary>DEPRECATED - this will be removed from the API soon.
      </summary>
	  <remarks></remarks>
    </member>
        
    <member name="M:ShinobiCharts.SChartAxis.RefreshDataRange">
      <summary>DEPRECATED - this will be removed from the API soon.
      </summary>
	  <remarks></remarks>
    </member>
        
    <member name="M:ShinobiCharts.SChartAxis.UpdateMaxRange">
      <summary>DEPRECATED - this will be removed from the API soon.
      </summary>
	  <remarks></remarks>
    </member>
        
    <member name="M:ShinobiCharts.SChartAxis.ZoomWithMomentum">
      <summary>DEPRECATED - this will be removed from the API soon.
      </summary>
	  <remarks>Zooms the axis based on momentum</remarks>
	  <returns></returns>
    </member>
        
    <member name="M:ShinobiCharts.SChartAxis.ZoomWithMomentum(System.Double,System.Double)">
      <summary>Zooms the axis based on momentum, centred on a specified position.
      </summary>
	  <param name="velocity"></param>
	  <param name="position"></param>
	  <remarks></remarks>
	  <returns></returns>
    </member>
        
    <member name="M:ShinobiCharts.SChartAxis.IsXAxis">
      <summary>DEPRECATED - this will be removed from the API soon.
      </summary>
	  <remarks></remarks>
	  <returns></returns>
    </member>
        
    <member name="M:ShinobiCharts.SChartAxis.LongestLabel">
      <summary>DEPRECATED - this will be removed from the API soon.
      </summary>
	  <remarks></remarks>
	  <returns></returns>
    </member>
        
    <member name="M:ShinobiCharts.SChartAxis.SizeTickLabels">
      <summary>DEPRECATED - this will be removed from the API soon.
      </summary>
	  <remarks></remarks>
	  <returns></returns>
    </member>
        
    <member name="M:ShinobiCharts.SChartAxis.SpaceForLabels(System.Int32,System.Drawing.PointF)">
      <summary>
      </summary>
	  <remarks></remarks>
	  <param name="numLabels"></param>
	  <param name="scale"></param>
	  <returns></returns>
    </member>
        
    <member name="M:ShinobiCharts.SChartAxis.UpdateInternalTickFrequencies(System.Drawing.SizeF)">
      <summary>DEPRECATED - this will be removed from the API soon.
      </summary>
	  <remarks></remarks>
	  <param name="largestLabelSize"></param>
    </member>
        
    <member name="M:ShinobiCharts.SChartAxis.FirstMajorTick">
      <summary>DEPRECATED - this will be removed from the API soon.
      </summary>
	  <remarks></remarks>
	  <returns></returns>
    </member>
        
    <member name="M:ShinobiCharts.SChartAxis.FirstTickInsideChart(System.Double)">
      <summary>DEPRECATED - this will be removed from the API soon.
      </summary>
	  <remarks></remarks>
	  <param name="firstTickValue"></param>
	  <returns></returns>
    </member>
        
    <member name="M:ShinobiCharts.SChartAxis.FirstMinorTick">
      <summary>DEPRECATED - this will be removed from the API soon.
      </summary>
	  <remarks></remarks>
	  <returns></returns>
    </member>
        
    <member name="M:ShinobiCharts.SChartAxis.IsOverAlternate(System.Double)">
      <summary>DEPRECATED - this will be removed from the API soon.
      </summary>
	  <remarks></remarks>
	  <param name="tickMarkValue"></param>
	  <returns></returns>
    </member>
        
    <member name="M:ShinobiCharts.SChartAxis.IncrementTickMarkValue(System.Double,System.Boolean)">
      <summary>DEPRECATED - this will be removed from the API soon.
      </summary>
	  <remarks></remarks>
	  <param name="tickMarkValue">The original value</param>
	  <param name="major">Whether to increase by the major tick frequency (true) or the minor tick frequency (false)</param>
	  <returns>The incremented value</returns>
    </member>
        
    <member name="M:ShinobiCharts.SChartAxis.DecrementTickMarkValue(System.Double,System.Boolean)">
      <summary>DEPRECATED - this will be removed from the API soon.
      </summary>
	  <remarks></remarks>
	  <param name="tickMarkValue">The original value</param>
	  <param name="major">Whether to decrease by the major tick frequency (true) or the minor tick frequency (false)</param>
	  <returns>The decremented value</returns>
    </member>
        
    <member name="M:ShinobiCharts.SChartAxis.GenerateTickMarks(System.Boolean)">
      <summary>DEPRECATED - this will be removed from the API soon.
      </summary>
	  <remarks></remarks>
	  <param name="redrawLabels"></param>
    </member>
        
    <member name="M:ShinobiCharts.SChartAxis.GetPixelforTick(System.Double)">
      <summary>DEPRECATED - this will be removed from the API soon.
      </summary>
	  <remarks></remarks>
	  <param name="tickMarkValue"></param>
	  <returns></returns>
    </member>
        
    <member name="M:ShinobiCharts.SChartAxis.RotateLabel(MonoTouch.UIKit.UILabel)">
      <summary>DEPRECATED - this will be removed from the API soon.
      </summary>
	  <remarks></remarks>
	  <param name="tickLabel"></param>
    </member>
        
    <member name="M:ShinobiCharts.SChartAxis.CreateTickMark(System.Drawing.RectangleF,ShinobiCharts.SChartTickMark,System.Double,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
      <summary>DEPRECATED - this will be removed from the API soon.
      </summary>
	  <remarks></remarks>
	  <param name="frame"></param>
	  <param name="tm"></param>
	  <param name="value"></param>
	  <param name="major"></param>
	  <param name="createLabel"></param>
	  <param name="overAlternate"></param>
	  <param name="updateText"></param>
	  <returns></returns>
    </member>
        
    <member name="M:ShinobiCharts.SChartAxis.DataSeriesChanged">
      <summary>
      </summary>
	  <remarks></remarks>
    </member>
        
    <member name="M:ShinobiCharts.SChartAxis.IsLinkedToSeries(Shinobicharts.SChartSeries)">
      <summary>DEPRECATED - this will be removed from the API soon.
      </summary>
	  <remarks></remarks>
	  <param name="series">The series to check</param>
	  <returns></returns>
    </member>
        
    <member name="P:ShinobiCharts.SChartAxis.OwnedSeries">
      <summary>DEPRECATED - this will be removed from the API soon.
      </summary>
	  <remarks></remarks>
    </member>
		
		<member name="M:ShinobiCharts.SChartAxis.PixelValueForDataValue(MonoTouch.Foundation.NSObject)">
			<summary>Returns the pixel value, in the coordinate system of the plot area, of the given data value along this axis.</summary>
			<remarks>If a data value would fall outside of the plot area (is not currently within the range of the axis) then this method may return either a negative value,
 or a value larger than the respective height/width of the plot area in pixels.</remarks>
		</member>
		
		<member name="M:ShinobiCharts.SChartAxis.DataValueForPixelValue(System.Single)">
			<summary>Returns the data value of the given pixel value along this axis, in the coordinate system of the plot area.</summary>
			<remarks>If the pixel value given is negative, or is larger than the respective height/width of the plot area in pixels, than this method may return a data value 
 that is not currently in range of the axis.</remarks>
		</member>
		
		<member name="M:ShinobiCharts.SChartAxis.OffsetForDataValue(MonoTouch.Foundation.NSObject,ShinobiCharts.SChartSeries)">
			<summary>DEPRECATED - use <see cref="M:ShinobiCharts.SChartAxis.OffsetForSeries(ShinobiCharts.SChartCartesianSeries)" /> instead</summary>
			<remarks></remarks>
		</member>
		
		<member name="M:ShinobiCharts.SChartAxis.OffsetForSeries(ShinobiCharts.SChartCartesianSeries)">
			<summary>
				Returns the difference in data terms between where data in a series is drawn to it's value on this axis.
			</summary>
			<remarks>
				<para>
					This is useful for calculating where the centres of datapoints are, relative to their value.
					For example, where you have more than one column series along an x-axis they will stand next to each other
					so as not to overlap:
				</para><para>
					If columns in two series each have an xValue of '5', the column in the first series will be offset left
					from '5' and the column in the second series will be offset right from '5'.
					You can use this method to find out what that offset is for each series.
				</para>
			</remarks>
		</member>
        
    <member name="M:ShinobiCharts.SChartAxis.ScaleCoord(MonoTouch.Foundation.NSObject)">
      <summary>Scales a datapoint to openGL coordinates.
      </summary>
	  <remarks></remarks>
	  <param name="dataValue"></param>
	  <returns></returns>
    </member>
        
    <member name="M:ShinobiCharts.SChartAxis.MapCoord(MonoTouch.Foundation.NSObject)">
      <summary>Map a datapoint to openGL coordinates. 
      </summary>
	  <remarks></remarks>
	  <param name="dataValue"></param>
	  <returns></returns>
    </member>
        
    <member name="M:ShinobiCharts.SChartAxis.DataValue(System.Double)">
      <summary>Returns the real data represented by a GLCoord (1D).
      </summary>
	  <remarks></remarks>
	  <param name="coord"></param>
	  <returns>The real data represented by a GLCoord (1D).</returns>
    </member>

    <member name="M:ShinobiCharts.SChartAxis.MapCoordinates(ShinobiCharts.SChartInternalDataPoint,ShinobiCharts.SChartCartesianSeries)">
      <summary> Map a datapoint of a CartesianSeries to openGL coordinates. 
      </summary>
	  <remarks></remarks>
	  <param name="dp"></param>
	  <param name="series"></param>
    </member>
        
    <member name="M:ShinobiCharts.SChartAxis.MapCoordinates(ShinobiCharts.SChartInternalDataPoint,ShinobiCharts.SChartBarColumnSeries)">
      <summary> Map a datapoint of a BarColumnSeries to openGL coordinates. 
      </summary>
	  <remarks></remarks>
	  <param name="dp"></param>
	  <param name="series"></param>
    </member>
        
    <member name="M:ShinobiCharts.SChartAxis.RecalculateBarColumns(ShinobiCharts.SChartSeries[])">
      <summary>Recalculate bar column spacing, min and max values.
      </summary>
	  <remarks>DEPRECATED - this will be removed from the API soon.</remarks>
	  <param name="barColumnSeries"></param>
    </member>
        
    <member name="M:ShinobiCharts.SChartAxis.ConfigureColumns(System.Double,MonoTouch.Foundation.NSNumber,MonoTouch.Foundation.NSNumber)">
      <summary>Provide bounds and spacing data for column series within the chart to improve performance.
      </summary>
	  <remarks></remarks>
	  <param name="colSpacing">The minimum distance between any two columns along the axis, in data terms.</param>
	  <param name="minX">The smallest XValue of any column on the axis.</param>
	  <param name="maxX">The largest XValue of any column on the axis.</param>
    </member>
        
    <member name="M:ShinobiCharts.SChartAxis.ConfigureBars(System.Double,MonoTouch.Foundation.NSNumber,MonoTouch.Foundation.NSNumber)">
      <summary>Provide bounds and spacing data for bar series within the chart to improve performance.
      </summary>
	  <remarks></remarks>
	  <param name="barSpacing">The minimum distance between any two bars along the axis, in data terms.</param>
	  <param name="minY">The smallest YValue of any bar on the axis.</param>
	  <param name="maxY">The largest YValue of any bar on the axis.</param>
    </member>
        
    <member name="M:ShinobiCharts.SChartAxis.DrawTickMarks(System.Drawing.RectangleF,ShinobiCharts.SChartCanvasUnderlay,System.Boolean)">
      <summary>DEPRECATED - this will be removed from the API soon.
      </summary>
	  <remarks></remarks>
	  <param name="glFrame"></param>
	  <param name="drawer"></param>
	  <param name="redrawLabels"></param>
    </member>
        
    <member name="M:ShinobiCharts.SChartAxis.DrawAxis(System.Drawing.RectangleF,ShinobiCharts.SChartCanvasUnderlay)">
      <summary>
      </summary>
	  <remarks></remarks>
	  <param name="frame"></param>
	  <param name="drawer"></param>
    </member>
        
    <member name="M:ShinobiCharts.SChartAxis.SpaceRequiredToDraw(System.Boolean)">
      <summary>Returns the amount of space in points needed to draw the axis between the plot area and the edge of the chart frame.
      </summary>
	  <remarks>This includes the space required to draw tickmarks and ticklabels.
 Note that altering tick labels via the delegate may cause the return value of this method to be incorrect.</remarks>
	  <param name="shouldIncludeTitle">Whether or not to include the space required to draw the axis title, if enabled.</param>
	  <returns>The amount of space need by the axis for tick marks, labels etc.</returns>
    </member>
        
    <member name="M:ShinobiCharts.SChartAxis.ValueIsVisible(System.Double,ShinobiCharts.SChartSeries)">
      <summary>
      </summary>
	  <remarks></remarks>
	  <param name="value"></param>
	  <param name="series"></param>
	  <returns></returns>
    </member>
        
    <member name="M:ShinobiCharts.SChartAxis.EnsureValueIsVisible(System.Double,System.Boolean)">
      <summary>
      </summary>
	  <remarks></remarks>
	  <param name="value"></param>
	  <param name="redraw"></param>
    </member>
        
    <member name="M:ShinobiCharts.SChartAxis.EnsureValueIsVisible(System.Double)">
      <summary>
      </summary>
	  <remarks></remarks>
	  <param name="value"></param>
    </member>
        
    <member name="M:ShinobiCharts.SChartAxis.StringForValue(System.Double)">
      <summary>DEPRECATED - this will be removed from the API soon.</summary>
	  <remarks>Use <see cref="M:ShinobiCharts.SChartAxis.StringForId(MonoTouch.Foundation.NSObject)" /> instead.</remarks>
	  <param name="value"></param>
	  <returns></returns>
    </member>
        
    <member name="M:ShinobiCharts.SChartAxis.StringForId(MonoTouch.Foundation.NSObject)">
      <summary>Returns a string representation of the given object.</summary>
			<remarks>
				This will use the LabelFormatter where possible.
				This is used for creating ticklabel and crosshair text.
			</remarks>
	  <param name="obj"></param>
	  <returns></returns>
    </member>
        
    <member name="M:ShinobiCharts.SChartAxis.CancelGestures">
      <summary>
      </summary>
	  <remarks></remarks>
	  <returns></returns>
    </member>
        
    <member name="M:ShinobiCharts.SChartAxis.StopAnimations">
      <summary>
      </summary>
	  <remarks></remarks>
	  <returns></returns>
    </member>
        
    <member name="M:ShinobiCharts.SChartAxis.StopMomentumZooming">
      <summary>
      </summary>
	  <remarks></remarks>
	  <returns></returns>
    </member>
        
    <member name="M:ShinobiCharts.SChartAxis.StopMomentumPanning">
      <summary>
      </summary>
	  <remarks></remarks>
	  <returns></returns>
    </member>

    <member name="M:ShinobiCharts.SChartAxis.AppropriateRange(System.Double,System.Double)">
      <summary>Override this if you want to alter the way <see cref="T:ShinobiCharts.SChartRange"/> objects are created (Unusual).
      </summary>
	  <remarks>This method is called when updating the range of the axis from the data. 
			The default behaviour is to create a <see cref="T:ShinobiCharts.SChartRange"/> object with the given min and max values</remarks>
	  <param name="min">The minimum value</param>
	  <param name="max">The maximum value</param>
	  <returns>A new <see cref="T:ShinobiCharts.SChartRange"/> object with whatever min and max values you require</returns>
    </member>

    <member name="M:ShinobiCharts.SChartAxis.AutoGenerateTickMarks(System.Boolean)">
      <summary>Override this if you want to replace the whole tick mark autogeneration sub-system (Advanced).
      </summary>
	  <remarks>This method is called when tick marks are generated. The default implementation is a complex algorithm to generate tick marks automatically</remarks>
	  <param name="redrawLabels">Whether the labels should be redrawn</param>
    </member>

    <member name="P:ShinobiCharts.SChartAxis.CurrentMajorTickFrequency">
      <summary>The current major tick frequency in use by this axis.
      </summary>
	  <remarks>Important. <see cref="P:ShinobiCharts.SChartAxis.MajorTickFrequency"/> returns the frequency that you have manually set, whereas CurrentMajorTickFrequency returns the frequency currently in use - the two are not necessarily the same.</remarks>
    </member>

    <member name="P:ShinobiCharts.SChartAxis.CurrentMinorTickFrequency">
      <summary>The current minor tick frequency in use by this axis.
      </summary>
	  <remarks>Important. <see cref="P:ShinobiCharts.SChartAxis.MinorTickFrequency"/> returns the frequency that you have manually set, whereas CurrentMinorTickFrequency returns the frequency currently in use - the two are not necessarily the same.</remarks>
    </member>

    <member name="M:ShinobiCharts.SChartAxis.IndexOfFirstLabel(System.Int32)">
      <summary>
      </summary>
	  <remarks></remarks>
	  <param name="ticksPerLabel"></param>
	  <returns></returns>
    </member>

    <member name="M:ShinobiCharts.SChartAxis.IsLinkedToSeries(ShinobiCharts.SChartSeries)">
      <summary>
      </summary>
	  <remarks></remarks>
	  <param name="series"></param>
	  <returns></returns>
    </member>

    <member name="M:ShinobiCharts.SChartAxis.ManualGenerateTickMarks">
      <summary>
      </summary>
	  <remarks></remarks>
	  <returns></returns>
    </member>

    <member name="M:ShinobiCharts.SChartAxis.Dispose(System.Boolean)">
      <summary>Releases unmanaged resources.
      </summary>
	  <remarks></remarks>
	  <param name="disposing">True if called by Dispose, false if called from a finalizer</param>
    </member>
      
		
    <member name="T:ShinobiCharts.SChartTitle">
      <summary>A title object used by the chart and chart axes to display a UILabel with appropriate text.</summary>
			<remarks>
				<para>
					The look and feel of titles on the chart is managed by instances of one of the sub-classes of SChartTitleStyle.
					The look and feel of the chart title is managed by SChartMainTitleStyle.
					The look and feel of axis titles is managed by SChartAxisTitleStyle.
					SChartTitleStyle contains any common styling properties of all titles.
				</para><para>
					By default, the chart title is displayed below the chart, and the chart canvas makes room for the title.
					If you wish to update the position of the title, you can use the SChartTitleStyle.Position property.
					This allows you to specify the position of the title relative to the chart.
					SChartMainTitleStyle also offers you some properties to fine-tune the title appearance.
					These are:
					<list type="bullet">
						<item><term>SChartMainTitleStyle.TitleCentresOn: Allows you to specify whether the title centers on
						the full chart view, the plot area, or the canvas.</term></item>
						<item><term>SChartMainTitleStyle.OverlapChartTitle: Allows you to specify whether the title overlaps
						with the chart, or whether the chart canvas makes room for it.</term></item>
					</list>
				</para><para>
					By default, the axes titles are displayed in the center of each axis.
					If you wish to update the position of the title, you can use the SChartTitleStyle.Position property.
					SChartAxisTitleStyle also allows you to specify the orientation of the axis title, to be either horizontal or vertical.
				</para>
			</remarks>
    </member>
        
    <member name="M:ShinobiCharts.SChartTitle.#ctor">
      <summary>Default constructor.
      </summary>
		<remarks></remarks>
    </member>
        
	<member name="M:ShinobiCharts.SChartTitle.#ctor(System.Drawing.RectangleF)">
      <summary>  
 			Initialise the Legend with the specified frame rectangle.
      </summary>
    </member>
		
	<member name="M:ShinobiCharts.SChartTitle.#ctor(MonoTouch.Foundation.NSCoder)">
      <summary>A constructor that initializes the object from the data stored in the unarchiver object.
      </summary>
	  <remarks>This constructor is provided to allow the class to be initialized from an unarchiver (for example, during NIB deserialization).</remarks>
	  <param name="coder">The unarchiver object</param>
    </member>
        
    <member name="M:ShinobiCharts.SChartTitle.#ctor(MonoTouch.Foundation.NSObjectFlag)">
      <summary>Constructor to call on derived classes to skip initialization and merely allocate the object.
      </summary>
	  <remarks>You should not invoke this method directly.</remarks>
	  <param name="t">Unused sentinel value</param>
    </member>
		
	<member name="M:ShinobiCharts.SChartTitle.#ctor(System.IntPtr)">
      <summary>A constructor used when creating managed representations of unmanaged objects.
      </summary>
	  <remarks>You should not invoke this method directly.</remarks>
	  <param name="handle">Handle of the unmanaged object</param>
    </member>
        
	<member name="P:ShinobiCharts.SChartTitle.ClassHandle">
        <summary>The handle for this class.
        </summary>
	  <remarks>Not normally used by application code</remarks>
    </member>
        
    <member name="P:ShinobiCharts.SChartTitle.UserSetFrame">
      <summary>
      </summary>
	  <remarks></remarks>
    </member>

		
    <member name="T:ShinobiCharts.SChartLegend">
      <summary> An (optional) view on the chart, typically displaying explanatory information. 
      </summary>
	  <remarks>
				<para>
					Series data can be displayed in a legend on a ShinobiChart.
					The SChartLegend is a UIView-based object that represents the legend as a visual item on the chart.
					The legend may appear in a number of preset positions within the chart.
				</para><para>
					The placement of the legend inside or outside the plot area has different effects.
					See the <see cref="P:ShinobiCharts.SChartLegend.Placement" /> property for more information.
				</para><para>
					Irrespective of how the plot area behaves, we can anchor the legend to several preset positions in the chart area.
					See the <see cref="P:ShinobiCharts.SChartLegend.Position" /> property for more information.
				</para><para>
					To create a custom legend object, you can subclass SChartLegend and override its
					<see cref="M:ShinobiCharts.SChartLegend.Draw" /> method.
					You can then assign the new legend object to <see cref="P:ShinobiCharts.ShinobiChart.Legend" />.
				</para><para>
					Any instance of SChartSeries will adopt the SChartLegendItem protocol, which means that series can
					also customize how they appear in the legend.
					SChartLegendItem allows a series to specify the title or symbol which should represent it in the legend.
					For radial series, it allows the series to specify how each slice should be represented.
					See the protocol's API documentation for more information.
				</para>
	  </remarks>
    </member>

    <member name="P:ShinobiCharts.SChartLegend.Chart">
      <summary>A reference to the chart that the Legend belongs to.
      </summary>
		<remarks></remarks>
    </member>
        
    <member name="P:ShinobiCharts.SChartLegend.Title">
      <summary> The main function called by the chart when it requires a Legend to be drawn.
      </summary>
		<remarks>Override this function when creating a custom Legend object. Sets a title for the Legend.
		</remarks>
    </member>
        
    <member name="P:ShinobiCharts.SChartLegend.Position">
      <summary>Specifies the positioning of the legend on the chart.
      </summary>
		<remarks></remarks>
    </member>
        
    <member name="P:ShinobiCharts.SChartLegend.Placement">
      <summary>The position of the legend relative to the chart plot area.
      </summary>
		<remarks>
				If the legend is drawn outside of the plot area, the plot area will shrink to accommodate the legend
				without obscuring the chart plot.
				If the legend is drawn inside the plot area, the plot area will expand as though the legend is not there -
				with the legend displaying over it.
				
				If the legend is drawn on the plot area border, the plot area will shrink to accomodate half of the legend.
				In this case, the legend will half overlap with the chart, and half be drawn outside the plot area.
			</remarks>
    </member>
        
    <member name="P:ShinobiCharts.SChartLegend.SymbolWidth">
      <summary>The width that each symbol in the legend should have, in points.
      </summary>
		<remarks>If this is not set by the user, each symbol will automatically take up half of the width of the legend (with the chart series label/text taking up the other half).
		</remarks>
    </member>
        
    <member name="P:ShinobiCharts.SChartLegend.ShowSymbols">
      <summary>DEPRECATED - Use SChartLegendStyle.ShowSymbols instead.
      </summary>
		<remarks> Deprecated - set this property on the style object instead..
		</remarks>
    </member>
        
    <member name="P:ShinobiCharts.SChartLegend.MaxSeriesPerLine">
      <summary>The maximum number of series which are shown per row in horizontal legends.
      </summary>
		<remarks></remarks>
    </member>
        
    <member name="P:ShinobiCharts.SChartLegend.AutosizeLabels">
      <summary> If this is set to true, Legend labels will autosize to fit their text.
      </summary>
		<remarks>Note that the Legend frame will still be overridden if the frame is set manually,
 				 but this setting will override any value of <see cref="P:ShinobiCharts.SChartLegend.FixedWidthRatio"/> that has been set
				on the legend.
		</remarks>
    </member>
        
    <member name="P:ShinobiCharts.SChartLegend.Style">
      <summary>Manages the appearance of the legend.
      </summary>
		<remarks></remarks>
    </member>
        
    <member name="P:ShinobiCharts.SChartLegend.CornerRadius">
      <summary>Determines the radius of the legend corners.
      </summary>
		<remarks>This defaults to 0.  Setting this to null also equates to a radius of 0 - which results in square corners.
		</remarks>
    </member>
        
    <member name="P:ShinobiCharts.SChartLegend.Symbols">
      <summary>The symbols which are contained within the legend.
      </summary>
		<remarks></remarks>
    </member>
        
    <member name="P:ShinobiCharts.SChartLegend.Labels">
      <summary>The labels which are contained within the legend.
      </summary>
		<remarks></remarks>
    </member>
        
    <member name="P:ShinobiCharts.SChartLegend.FixedWidthRatio">
      <summary>Defines a fixed ratio of the width of the overall chart which the legend will take up.
      </summary>
		<remarks>
				If this value is not set, the width of the chart will be auto-calculated.  This defaults to null.
			</remarks>
    </member>

    <member name="M:ShinobiCharts.SChartLegend.#ctor">
      <summary>Default constructor.
      </summary>
		<remarks></remarks>
    </member>
        
    <member name="M:ShinobiCharts.SChartLegend.#ctor(ShinobiCharts.ShinobiChart)">
      <summary>  
 			Initializes the legend with a reference to the chart.
      </summary>
		<remarks></remarks>
			<param name="_chart">The chart which will contain the legend.</param>
			<returns>An initialized legend object, or null if the legend couldn't be created.</returns>
    </member>
		
	<member name="M:ShinobiCharts.SChartLegend.#ctor(System.Drawing.RectangleF)">
      <summary>  
 			Initialise the Legend with the specified frame rectangle.
      </summary>
    </member>
		
	<member name="M:ShinobiCharts.SChartLegend.#ctor(MonoTouch.Foundation.NSCoder)">
      <summary>A constructor that initializes the object from the data stored in the unarchiver object.
      </summary>
	  <remarks>This constructor is provided to allow the class to be initialized from an unarchiver (for example, during NIB deserialization).</remarks>
	  <param name="coder">The unarchiver object</param>
    </member>
        
    <member name="M:ShinobiCharts.SChartLegend.#ctor(MonoTouch.Foundation.NSObjectFlag)">
      <summary>Constructor to call on derived classes to skip initialization and merely allocate the object.
      </summary>
	  <remarks>You should not invoke this method directly.</remarks>
	  <param name="t">Unused sentinel value</param>
    </member>
		
	<member name="M:ShinobiCharts.SChartLegend.#ctor(System.IntPtr)">
      <summary>A constructor used when creating managed representations of unmanaged objects.
      </summary>
	  <remarks>You should not invoke this method directly.</remarks>
	  <param name="handle">Handle of the unmanaged object</param>
    </member>
        
	<member name="P:ShinobiCharts.SChartLegend.ClassHandle">
        <summary>The handle for this class.
        </summary>
	  <remarks>Not normally used by application code</remarks>
    </member>
        
	<member name="M:ShinobiCharts.SChartLegend.Dispose(System.Boolean)">
      <summary> Releases unmanaged resources.
      </summary>
	  <remarks></remarks>
	  <param name="disposing">True if called by Dispose, false if called from a finalizer</param>
    </member>

    <member name="M:ShinobiCharts.SChartLegend.Draw">
      <summary> The main function called by the chart to construct the Legend.
      </summary>
		<remarks> Override this function to create a custom Legend class. 
		</remarks>
    </member>
        
    <member name="M:ShinobiCharts.SChartLegend.Reload">
      <summary> Causes the Legend to redraw itself. Changes in series styling will not be updated within the Legend until this method has been called.
      </summary>
		<remarks></remarks>
    </member>

      
    <member name="T:ShinobiCharts.SChartCrosshair">
      <summary>A small circle target with lines extending to the axes, which follows the user's finger after a tap-and-hold gesture 
      </summary>
	  <remarks>
				<para>
					This is accompanied by a tooltip object - nominally a UIView.
					The default implementation for the tooltip is provided by <see cref="T:ShinobiCharts.SChartCrosshairTooltip" />.
					For data points with multiple values at a single point, another implementation,
					<see cref="T:ShinobiCharts.SChartCrosshairMultiValueTooltip" />, has also been provided.
				</para><para>
					The crosshair is enabled with a 'tap-and-hold gesture' and will lock to the nearest series to pan through the values.
					On a line series the values will be interpolated between data points, on all other series types the crosshair will
					jump from data point to data point.
					Note that line series interpolation can be switched off by setting InterpolatePoints to <c>false</c>.
				</para><para>
					In order for a crosshair to be displayed on a chart series, the series must have its
					SChartSeries.CrosshairEnabled property set to <c>true</c>.
					This defaults to <c>false</c>, so you will need to set this property on the series in your chart.
				</para>
	  </remarks>
    </member>

	<member name="M:ShinobiCharts.SChartCrosshair.#ctor(ShinobiCharts.ShinobiChart)">
      <summary>Initializes and returns a newly allocated crosshair object, which is associated with the specified chart.
      </summary>
	  <remarks></remarks>
	  <param name="parentChart"></param>
    </member>
		
	<member name="M:ShinobiCharts.SChartCrosshair.#ctor(System.Drawing.RectangleF)">
      <summary>Create the crosshair with a given rectangle frame.
      </summary>
	  <remarks></remarks>
	  <param name="frame"></param>
    </member>
		
	<member name="M:ShinobiCharts.SChartCrosshair.#ctor(MonoTouch.Foundation.NSCoder)">
      <summary>A constructor that initializes the object from the data stored in the unarchiver object.
      </summary>
	  <remarks>This constructor is provided to allow the class to be initialized from an unarchiver (for example, during NIB deserialization).</remarks>
	  <param name="coder">The unarchiver object</param>
    </member>		
        
    <member name="M:ShinobiCharts.SChartCrosshair.#ctor(System.Drawing.RectangleF,ShinobiCharts.ShinobiChart)">
	  <summary>DEPRECATED - Use SChartCrosshair(ShinobiCharts.ShinobiChart) instead. 
	  </summary>
	  <remarks></remarks>
	  <param name="frame"></param>
	  <param name="parentChart"></param>
    </member>
		
	<member name="M:ShinobiCharts.SChartCrosshair.#ctor(MonoTouch.Foundation.NSCoder)">
      <summary>A constructor that initializes the object from the data stored in the unarchiver object.
      </summary>
	  <remarks>This constructor is provided to allow the class to be initialized from an unarchiver (for example, during NIB deserialization).</remarks>
	  <param name="coder">The unarchiver object</param>
    </member>
        
    <member name="M:ShinobiCharts.SChartCrosshair.#ctor(MonoTouch.Foundation.NSObjectFlag)">
      <summary>Constructor to call on derived classes to skip initialization and merely allocate the object.
      </summary>
	  <remarks>You should not invoke this method directly.</remarks>
	  <param name="t">Unused sentinel value</param>
    </member>
		
	<member name="M:ShinobiCharts.SChartCrosshair.#ctor(System.IntPtr)">
      <summary>A constructor used when creating managed representations of unmanaged objects.
      </summary>
	  <remarks>You should not invoke this method directly.</remarks>
	  <param name="handle">Handle of the unmanaged object</param>
    </member>
		
	<member name="P:ShinobiCharts.SChartCrosshair.ClassHandle">
        <summary>The handle for this class.
        </summary>
	  <remarks>Not normally used by application code</remarks>
    </member>
        
	<member name="M:ShinobiCharts.SChartCrosshair.Dispose(System.Boolean)">
      <summary> Releases unmanaged resources.
      </summary>
	  <remarks></remarks>
	  <param name="disposing">True if called by Dispose, false if called from a finalizer</param>
    </member>

    <member name="P:ShinobiCharts.SChartCrosshair.Chart">
      <summary>The crosshair holds a reference to the chart which contains it.
      </summary>
		<remarks></remarks>
    </member>
        
    <member name="P:ShinobiCharts.SChartCrosshair.Style">
      <summary>The SChartCrosshairStyle object manages the look of the crosshair.
      </summary>
		<remarks>The default style for the crosshair is defined in the chart theme.
			If you wish to modify the look of the crosshair later on, you can set the properties on this object to achieve the desired look.</remarks>
    </member>
        
    <member name="P:ShinobiCharts.SChartCrosshair.Tooltip">
      <summary>The tooltip which presents the current data values to the user.
      </summary>
	  <remarks>By default, this will be an instance of SChartCrosshairTooltip.
				You can also override this class to present the crosshair data in a custom way.
	  </remarks>
    </member>
        
    <member name="P:ShinobiCharts.SChartCrosshair.EnableLines">
      <summary> When set to true the lines from the target point to the axis will be displayed. 
      </summary>
		<remarks></remarks>
    </member>
        
    <member name="P:ShinobiCharts.SChartCrosshair.EnableLinesSet">
      <summary>DEPRECATED - This should be taken off the API in future releases.  It is used internally, but should not be set from outside of the class.
      </summary>
	  <remarks></remarks>
    </member>
        
    <member name="P:ShinobiCharts.SChartCrosshair.TrackingSeries">
      <summary>Configures the crosshair to track a particular series on the chart.
      </summary>
	  <remarks>If this property isn't set, the crosshair will lock to the nearest series on the chart when it is drawn.</remarks>
    </member>
        
    <member name="P:ShinobiCharts.SChartCrosshair.TrackingPoint">
      <summary>Configures the crosshair to track a particular data point on the chart.
      </summary>
	  <remarks>If this property isn't set, the crosshair will lock to the nearest data point on the nearest series in the chart when it is drawn.</remarks>
    </member>
        
    <member name="P:ShinobiCharts.SChartCrosshair.AnimationOptions">
      <summary>DEPRECATED - This property will be taken off the API in future releases.
      </summary>
	  <remarks></remarks>
    </member>
        
    <member name="P:ShinobiCharts.SChartCrosshair.AnimationDuration">
      <summary>DEPRECATED - This property will be taken off the API in future releases.
      </summary>
	  <remarks></remarks>
    </member>
        
    <member name="P:ShinobiCharts.SChartCrosshair.AnimationDelay">
      <summary>DEPRECATED - This property will be taken off the API in future releases.
      </summary>
	  <remarks></remarks>
    </member>
        
    <member name="P:ShinobiCharts.SChartCrosshair.AnimationEnabled">
      <summary>DEPRECATED - This property will be taken off the API in future releases.
      </summary>
	  <remarks></remarks>
    </member>
        
    <member name="P:ShinobiCharts.SChartCrosshair.Mode">
      <summary>This describes whether the crosshair is in floating mode or not.
      </summary>
	  <remarks>
				When the crosshair is in floating mode, it will display on the closest data point, regardless of which series it is in.
				When the crosshair is in single series mode, it will lock to a single series, and display on the closest data point in that series only.
			</remarks>
    </member>
        
    <member name="P:ShinobiCharts.SChartCrosshair.InterpolatePoints">
      <summary> If set to true the Crosshair will move smoothly between points when tracking a line series.
      </summary>
		<remarks>Otherwise the crosshair will jump from point to point as it tracks.</remarks>
    </member>
        
    <member name="P:ShinobiCharts.SChartCrosshair.OutOfRangeBehavior">
      <summary>Defines the behavior of the crosshair when it goes out of range.
      </summary>
		<remarks>In this context, "out of range" refers to the case when a series goes off the screen -
				i.e. it is out of range on one axis, but not the other.
				The crosshair has different behaviors for when it goes out of range.
				It can hide, but continue to track the series until it comes back in range, or it can track the edge -
				the tooltip will move along the edge of the canvas until the series comes back into range.
				The final option is for the crosshair to remove itself entirely, leaving the chart open for panning or tracking
				a new series.
				The crosshair defaults to SChartCrosshairRangeBehavior.Hide.
		</remarks>
    </member>
        
    <member name="M:ShinobiCharts.SChartCrosshair.Show">
      <summary> Displays the Crosshair (with lines and Tooltip) on the chart.
      </summary>
		<remarks> This method is called by the chart when the Crosshair should be displayed. Override this method to control the display of the Crosshair in subclasses. 
		</remarks>
    </member>
        
    <member name="M:ShinobiCharts.SChartCrosshair.Hide">
      <summary> Hides the Crosshair (with lines and Tooltip) on the chart.
      </summary>
		<remarks> This method is called by the chart when the Crosshair should be dismissed. Override this method to control the display of the Crosshair in subclasses. 
		</remarks>
    </member>
        
    <member name="M:ShinobiCharts.SChartCrosshair.DrawLines">
      <summary> Performs the drawing of the lines and the target circle element of the Crosshair.
      </summary>
		<remarks> Override this function to provide custom lines or other drawn elements. 
		</remarks>
    </member>
        
    <member name="M:ShinobiCharts.SChartCrosshair.SetDefaultTooltip">
      <summary> Sets the current Tooltip element of the Crosshair to be and instance of the default Baseclass - <see cref="T:ShinobiCharts.SChartCrosshairTooltip"/>. 
      </summary>
	  <remarks></remarks>
    </member>
        
    <member name="M:ShinobiCharts.SChartCrosshair.MoveToPositionAndDisplayDataPoint(ShinobiCharts.SChartPoint,ShinobiCharts.SChartPoint,ShinobiCharts.SChartCartesianSeries,ShinobiCharts.SChartData)">
      <summary>This method is called when the crosshair changes position.
      </summary>
	  <param name="coords">The location on the chart where the crosshair should appear, in points.</param>
	  <param name="dataPoint">The crosshair tooltip will display the value of this data point.  This can either be an interpolated point, or the nearest actual point on the series, depending on the configuration of the crosshair.</param>
	  <param name="series">The series on the chart which the crosshair is locked to.</param>
	  <param name="dataseriesPoint">This parameter is used by SChartCrosshairMultiValueTooltip.  In this case, the tooltip will display the values contained in this point rather than the value of dataPoint.  For other types of tooltip, this parameter is ignored.</param>
    </member>

    <member name="M:ShinobiCharts.SChartCrosshair.OnMovedOutOfRange">
      <summary>This method is called when the crosshair moves out of the visible range of the chart.
      </summary>
	  <remarks>The behaviour of the crosshair at this point is defined by its Mode property.</remarks>
    </member>
        
    <member name="M:ShinobiCharts.SChartCrosshair.ShouldKeepTracking">
      <summary>Returns whether the crosshair should keep tracking.
      </summary>
	  <remarks>If this is the case, the crosshair should provide a series to track, using its TrackingSeries property.</remarks>
    </member>
        
    <member name="M:ShinobiCharts.SChartCrosshair.OnTrackingFailed">
      <summary>This method informs the crosshair that a gesture was performed which failed to select any series.
      </summary>
	  <remarks>The default behavior in this case is to remove the crosshair.</remarks>
    </member>
        
    <member name="M:ShinobiCharts.SChartCrosshair.OnChartGotPinchAndPan">
      <summary>This method informs the crosshair that there was a pinch/pan gesture on the chart.
      </summary>
	  <remarks>The default behavior in this case is to remove the crosshair.</remarks>
    </member>
        
    <member name="M:ShinobiCharts.SChartCrosshair.OnChartGotTapAt(System.Drawing.PointF)">
      <summary>This method informs the crosshair that there was a tap gesture on the chart at a point.
      </summary>
	  <remarks>The default behavior in this case is to remove the crosshair.</remarks>
	  <param name="tap">The point on the chart which was tapped.</param>
    </member>
        
    <member name="M:ShinobiCharts.SChartCrosshair.OnChartGotLongPressAt(System.Drawing.PointF)">
      <summary>This method informs the crosshair that there was a long press gesture on the chart at a point.
      </summary>
	  <remarks>
				The default behavior of the crosshair is to do nothing.
				If you wish to do something with the crosshair on receiving this event, you can subclass SChartCrosshair, and override this method.
			</remarks>
	  <param name="longPress">The point on the chart where the long press occurred.</param>
    </member>
        
    <member name="M:ShinobiCharts.SChartCrosshair.OnChartDidReload">
      <summary>Notifies the crosshair that its parent chart reloaded its data.
      </summary>
	  <remarks>The default behavior in this case is to remove the crosshair.</remarks>
    </member>
        
    <member name="M:ShinobiCharts.SChartCrosshair.MoveToFloatingPixelPosition(System.Drawing.PointF)">
      <summary>Moves the crosshair to the specified pixel coordinates.
      </summary>
	  <remarks></remarks>
	  <param name="floatingCoords">The pixel coordinates to which to move the crosshair.</param>
    </member>
        
    <member name="M:ShinobiCharts.SChartCrosshair.MoveToFloatingPosition(ShinobiCharts.SChartPoint,ShinobiCharts.SChartAxis,ShinobiCharts.SChartAxis)">
      <summary>Moves the crosshair to the coordinates on the chart corresponding to the specified data point relative to the specified axes.
      </summary>
	  <remarks></remarks>
	  <param name="point">The data point to which to move the crosshair.</param>
	  <param name="xAxis">The x axis with which the data point is associated.  The x value of the data point will be mapped to this axis.</param>
	  <param name="yAxis">The y axis with which the data point is associated.  The y value of the data point will be mapped to this axis.</param>
    </member>
        
    <member name="M:ShinobiCharts.SChartCrosshair.ShouldDrawCrosshairLinesForPoint(System.Drawing.PointF,System.Drawing.RectangleF)">
      <summary> A boolean controlling whether the crosshair should draw its tracking lines, at the pixel point, inside a frame.
      </summary>
	  <remarks>Returns <c>true</c> if the crosshair should draw its tracking lines to the specified point, given the specified frame.
			This defaults to a simple bounds check - whether the point is inside the frame.</remarks>
	  <param name="point"></param>
	  <param name="frame"></param>
    </member>
		
      
	<member name="T:ShinobiCharts.SChartDelayBounceAnimationCurve">
      <summary>This curve evaluator describes a curve similar to that described by SChartBounceAnimation but at the start the curve is constant at '0', this is the 'delay' where there is no change. The 'bounce' occurs over a shorter proportion of the duration (50%) at the end.</summary>
	  <remarks>See the SChartAnimationCurveProtocol protocol for more information on curve evaluation.</remarks>
	</member>	
	
    <member name="M:ShinobiCharts.SChartDelayBounceAnimationCurve.#ctor">
      <summary>Default constructor.
      </summary>
		<remarks></remarks>
    </member>
        
	<member name="M:ShinobiCharts.SChartDelayBounceAnimationCurve.#ctor(MonoTouch.Foundation.NSCoder)">
      <summary>A constructor that initializes the object from the data stored in the unarchiver object.
      </summary>
	  <remarks>This constructor is provided to allow the class to be initialized from an unarchiver (for example, during NIB deserialization).</remarks>
	  <param name="coder">The unarchiver object</param>
    </member>
        
    <member name="M:ShinobiCharts.SChartDelayBounceAnimationCurve.#ctor(MonoTouch.Foundation.NSObjectFlag)">
      <summary>Constructor to call on derived classes to skip initialization and merely allocate the object.
      </summary>
	  <remarks>You should not invoke this method directly.</remarks>
	  <param name="t">Unused sentinel value</param>
    </member>
		
	<member name="M:ShinobiCharts.SChartDelayBounceAnimationCurve.#ctor(System.IntPtr)">
      <summary>A constructor used when creating managed representations of unmanaged objects.
      </summary>
	  <remarks>You should not invoke this method directly.</remarks>
	  <param name="handle">Handle of the unmanaged object</param>
    </member>
        
	<member name="P:ShinobiCharts.SChartDelayBounceAnimationCurve.ClassHandle">
        <summary>The handle for this class.
        </summary>
	  <remarks>Not normally used by application code</remarks>
    </member>
        
	<member name="M:ShinobiCharts.SChartDelayBounceAnimationCurve.Dispose(System.Boolean)">
      <summary> Releases unmanaged resources.
      </summary>
	  <remarks></remarks>
	  <param name="disposing">True if called by Dispose, false if called from a finalizer</param>
    </member>

	<member name="M:ShinobiCharts.SChartDelayBounceAnimationCurve.ValueAtTime(System.Single)">
        <summary>Should return an appropriate value for the animation curve at the given time.</summary>
	    <remarks>'Time' will be provided as a float between 0.f and 1.f, where 0.f is the beginning of the animation and 1.f is the end of the animation. (time = elapsed time / duration)
 The value returned represents the progress of the series between its beginning and end positions, where 0.f is the start state and 1.f is, nominally, the end state.
 It is valid to return a value 'v' where either v is less than 0 or v is greater than 1 and it not necessary to return 1 at time 1.</remarks>
    </member>
        
	<member name="M:ShinobiCharts.SChartDelayBounceAnimationCurve.Copy">
        <summary>Creates a copy of the curve</summary>
    </member>
        
		
	<member name="T:ShinobiCharts.SChartDelayBounceWithMinimumAnimationCurve">
      <summary>This curve evaluator describes a curve similar to that described by SChartBounceAnimation but at the start the curve
			is constant at 0.1. This is the 'delay' where there is no change.
			The 'bounce' occurs over a shorter proportion of the duration (50%) at the end.</summary>
	  		<remarks>
				The important difference between this curve and a SChartDelayBounceAnimationCurve is that this curve never returns
				0 during the delay - it returns 0.1 which means that the series will be visible.
				See the SChartAnimationCurveProtocol protocol for more information on curve evaluation.
			</remarks>
	</member>	
	
    <member name="M:ShinobiCharts.SChartDelayBounceWithMinimumAnimationCurve.#ctor">
      <summary>Default constructor.
      </summary>
		<remarks></remarks>
    </member>
        
	<member name="M:ShinobiCharts.SChartDelayBounceWithMinimumAnimationCurve.#ctor(MonoTouch.Foundation.NSCoder)">
      <summary>A constructor that initializes the object from the data stored in the unarchiver object.
      </summary>
	  <remarks>This constructor is provided to allow the class to be initialized from an unarchiver (for example, during NIB deserialization).</remarks>
	  <param name="coder">The unarchiver object</param>
    </member>
        
    <member name="M:ShinobiCharts.SChartDelayBounceWithMinimumAnimationCurve.#ctor(MonoTouch.Foundation.NSObjectFlag)">
      <summary>Constructor to call on derived classes to skip initialization and merely allocate the object.
      </summary>
	  <remarks>You should not invoke this method directly.</remarks>
	  <param name="t">Unused sentinel value</param>
    </member>
		
	<member name="M:ShinobiCharts.SChartDelayBounceWithMinimumAnimationCurve.#ctor(System.IntPtr)">
      <summary>A constructor used when creating managed representations of unmanaged objects.
      </summary>
	  <remarks>You should not invoke this method directly.</remarks>
	  <param name="handle">Handle of the unmanaged object</param>
    </member>
        
	<member name="P:ShinobiCharts.SChartDelayBounceWithMinimumAnimationCurve.ClassHandle">
        <summary>The handle for this class.
        </summary>
	  <remarks>Not normally used by application code</remarks>
    </member>
        
	<member name="M:ShinobiCharts.SChartDelayBounceWithMinimumAnimationCurve.Dispose(System.Boolean)">
      <summary> Releases unmanaged resources.
      </summary>
	  <remarks></remarks>
	  <param name="disposing">True if called by Dispose, false if called from a finalizer</param>
    </member>

	<member name="M:ShinobiCharts.SChartDelayBounceWithMinimumAnimationCurve.ValueAtTime(System.Single)">
        <summary>Should return an appropriate value for the animation curve at the given time.</summary>
	    <remarks>'Time' will be provided as a float between 0.f and 1.f, where 0.f is the beginning of the animation and 1.f is the end of the animation. (time = elapsed time / duration)
 The value returned represents the progress of the series between its beginning and end positions, where 0.f is the start state and 1.f is, nominally, the end state.
 It is valid to return a value 'v' where either v is less than 0 or v is greater than 1 and it not necessary to return 1 at time 1.</remarks>
    </member>
        
	<member name="M:ShinobiCharts.SChartDelayBounceWithMinimumAnimationCurve.Copy">
        <summary>Creates a copy of the curve</summary>
    </member>
        
		
	<member name="T:ShinobiCharts.SChartEaseInAnimationCurve">
      <summary>This curve starts off slowly at 0.0, creating a gentle initial phase, then accelerates past 0.5 to reach 1.0.</summary>
	  <remarks>See the SChartAnimationCurveProtocol protocol for more information on curve evaluation.</remarks>
	</member>	
	
    <member name="M:ShinobiCharts.SChartEaseInAnimationCurve.#ctor">
      <summary>Default constructor.
      </summary>
		<remarks></remarks>
    </member>
        
	<member name="M:ShinobiCharts.SChartEaseInAnimationCurve.#ctor(MonoTouch.Foundation.NSCoder)">
      <summary>A constructor that initializes the object from the data stored in the unarchiver object.
      </summary>
	  <remarks>This constructor is provided to allow the class to be initialized from an unarchiver (for example, during NIB deserialization).</remarks>
	  <param name="coder">The unarchiver object</param>
    </member>
        
    <member name="M:ShinobiCharts.SChartEaseInAnimationCurve.#ctor(MonoTouch.Foundation.NSObjectFlag)">
      <summary>Constructor to call on derived classes to skip initialization and merely allocate the object.
      </summary>
	  <remarks>You should not invoke this method directly.</remarks>
	  <param name="t">Unused sentinel value</param>
    </member>
		
	<member name="M:ShinobiCharts.SChartEaseInAnimationCurve.#ctor(System.IntPtr)">
      <summary>A constructor used when creating managed representations of unmanaged objects.
      </summary>
	  <remarks>You should not invoke this method directly.</remarks>
	  <param name="handle">Handle of the unmanaged object</param>
    </member>
        
	<member name="P:ShinobiCharts.SChartEaseInAnimationCurve.ClassHandle">
        <summary>The handle for this class.
        </summary>
	  <remarks>Not normally used by application code</remarks>
    </member>
        
	<member name="M:ShinobiCharts.SChartEaseInAnimationCurve.Dispose(System.Boolean)">
      <summary> Releases unmanaged resources.
      </summary>
	  <remarks></remarks>
	  <param name="disposing">True if called by Dispose, false if called from a finalizer</param>
    </member>

	<member name="M:ShinobiCharts.SChartEaseInAnimationCurve.ValueAtTime(System.Single)">
        <summary>Should return an appropriate value for the animation curve at the given time.</summary>
	    <remarks>'Time' will be provided as a float between 0.f and 1.f, where 0.f is the beginning of the animation and 1.f is the end of the animation. (time = elapsed time / duration)
 The value returned represents the progress of the series between its beginning and end positions, where 0.f is the start state and 1.f is, nominally, the end state.
 It is valid to return a value 'v' where either v is less than 0 or v is greater than 1 and it not necessary to return 1 at time 1.</remarks>
    </member>
        
	<member name="M:ShinobiCharts.SChartEaseInAnimationCurve.Copy">
        <summary>Creates a copy of the curve</summary>
    </member>
        
		
	<member name="T:ShinobiCharts.SChartEaseInOutAnimationCurve">
      <summary>This curve starts off slowly at 0.0, creating a slow initial phase. It accelerates past 0.5, then decelerates to reach 1.0, creating a slow exit phase.</summary>
	  <remarks>See the SChartAnimationCurveProtocol protocol for more information on curve evaluation.</remarks>
	</member>	
	
    <member name="M:ShinobiCharts.SChartEaseInOutAnimationCurve.#ctor">
      <summary>Default constructor.
      </summary>
		<remarks></remarks>
    </member>
        
	<member name="M:ShinobiCharts.SChartEaseInOutAnimationCurve.#ctor(MonoTouch.Foundation.NSCoder)">
      <summary>A constructor that initializes the object from the data stored in the unarchiver object.
      </summary>
	  <remarks>This constructor is provided to allow the class to be initialized from an unarchiver (for example, during NIB deserialization).</remarks>
	  <param name="coder">The unarchiver object</param>
    </member>
        
    <member name="M:ShinobiCharts.SChartEaseInOutAnimationCurve.#ctor(MonoTouch.Foundation.NSObjectFlag)">
      <summary>Constructor to call on derived classes to skip initialization and merely allocate the object.
      </summary>
	  <remarks>You should not invoke this method directly.</remarks>
	  <param name="t">Unused sentinel value</param>
    </member>
		
	<member name="M:ShinobiCharts.SChartEaseInOutAnimationCurve.#ctor(System.IntPtr)">
      <summary>A constructor used when creating managed representations of unmanaged objects.
      </summary>
	  <remarks>You should not invoke this method directly.</remarks>
	  <param name="handle">Handle of the unmanaged object</param>
    </member>
        
	<member name="P:ShinobiCharts.SChartEaseInOutAnimationCurve.ClassHandle">
        <summary>The handle for this class.
        </summary>
	  <remarks>Not normally used by application code</remarks>
    </member>
        
	<member name="M:ShinobiCharts.SChartEaseInOutAnimationCurve.Dispose(System.Boolean)">
      <summary> Releases unmanaged resources.
      </summary>
	  <remarks></remarks>
	  <param name="disposing">True if called by Dispose, false if called from a finalizer</param>
    </member>

	<member name="M:ShinobiCharts.SChartEaseInOutAnimationCurve.ValueAtTime(System.Single)">
        <summary>Should return an appropriate value for the animation curve at the given time.</summary>
	    <remarks>'Time' will be provided as a float between 0.f and 1.f, where 0.f is the beginning of the animation and 1.f is the end of the animation. (time = elapsed time / duration)
 The value returned represents the progress of the series between its beginning and end positions, where 0.f is the start state and 1.f is, nominally, the end state.
 It is valid to return a value 'v' where either v is less than 0 or v is greater than 1 and it not necessary to return 1 at time 1.</remarks>
    </member>
        
	<member name="M:ShinobiCharts.SChartEaseInOutAnimationCurve.Copy">
        <summary>Creates a copy of the curve</summary>
    </member>
        
		
	<member name="T:ShinobiCharts.SChartEaseOutAnimationCurve">
      <summary>This curve starts off steadily at 0.0, passes 0.5 then decelerates to reach 1.0, creating a slow exit phase.</summary>
	  <remarks>See the SChartAnimationCurveProtocol protocol for more information on curve evaluation.</remarks>
	</member>	
	
    <member name="M:ShinobiCharts.SChartEaseOutAnimationCurve.#ctor">
      <summary>Default constructor.
      </summary>
		<remarks></remarks>
    </member>
        
	<member name="M:ShinobiCharts.SChartEaseOutAnimationCurve.#ctor(MonoTouch.Foundation.NSCoder)">
      <summary>A constructor that initializes the object from the data stored in the unarchiver object.
      </summary>
	  <remarks>This constructor is provided to allow the class to be initialized from an unarchiver (for example, during NIB deserialization).</remarks>
	  <param name="coder">The unarchiver object</param>
    </member>
        
    <member name="M:ShinobiCharts.SChartEaseOutAnimationCurve.#ctor(MonoTouch.Foundation.NSObjectFlag)">
      <summary>Constructor to call on derived classes to skip initialization and merely allocate the object.
      </summary>
	  <remarks>You should not invoke this method directly.</remarks>
	  <param name="t">Unused sentinel value</param>
    </member>
		
	<member name="M:ShinobiCharts.SChartEaseOutAnimationCurve.#ctor(System.IntPtr)">
      <summary>A constructor used when creating managed representations of unmanaged objects.
      </summary>
	  <remarks>You should not invoke this method directly.</remarks>
	  <param name="handle">Handle of the unmanaged object</param>
    </member>
        
	<member name="P:ShinobiCharts.SChartEaseOutAnimationCurve.ClassHandle">
        <summary>The handle for this class.
        </summary>
	  <remarks>Not normally used by application code</remarks>
    </member>
        
	<member name="M:ShinobiCharts.SChartEaseOutAnimationCurve.Dispose(System.Boolean)">
      <summary> Releases unmanaged resources.
      </summary>
	  <remarks></remarks>
	  <param name="disposing">True if called by Dispose, false if called from a finalizer</param>
    </member>

	<member name="M:ShinobiCharts.SChartEaseOutAnimationCurve.ValueAtTime(System.Single)">
        <summary>Should return an appropriate value for the animation curve at the given time.</summary>
	    <remarks>'Time' will be provided as a float between 0.f and 1.f, where 0.f is the beginning of the animation and 1.f is the end of the animation. (time = elapsed time / duration)
 The value returned represents the progress of the series between its beginning and end positions, where 0.f is the start state and 1.f is, nominally, the end state.
 It is valid to return a value 'v' where either v is less than 0 or v is greater than 1 and it not necessary to return 1 at time 1.</remarks>
    </member>
        
	<member name="M:ShinobiCharts.SChartEaseOutAnimationCurve.Copy">
        <summary>Creates a copy of the curve</summary>
    </member>
        
		
	<member name="T:ShinobiCharts.SChartFlatAnimationCurve">
      <summary>This flat curve evaluator returns 1.f ('finished') for all values of t.</summary>
	  <remarks>See the SChartAnimationCurveProtocol protocol for more information on curve evaluation.</remarks>
	</member>	
	
    <member name="M:ShinobiCharts.SChartFlatAnimationCurve.#ctor">
      <summary>Default constructor.
      </summary>
		<remarks></remarks>
    </member>
        
	<member name="M:ShinobiCharts.SChartFlatAnimationCurve.#ctor(MonoTouch.Foundation.NSCoder)">
      <summary>A constructor that initializes the object from the data stored in the unarchiver object.
      </summary>
	  <remarks>This constructor is provided to allow the class to be initialized from an unarchiver (for example, during NIB deserialization).</remarks>
	  <param name="coder">The unarchiver object</param>
    </member>
        
    <member name="M:ShinobiCharts.SChartFlatAnimationCurve.#ctor(MonoTouch.Foundation.NSObjectFlag)">
      <summary>Constructor to call on derived classes to skip initialization and merely allocate the object.
      </summary>
	  <remarks>You should not invoke this method directly.</remarks>
	  <param name="t">Unused sentinel value</param>
    </member>
		
	<member name="M:ShinobiCharts.SChartFlatAnimationCurve.#ctor(System.IntPtr)">
      <summary>A constructor used when creating managed representations of unmanaged objects.
      </summary>
	  <remarks>You should not invoke this method directly.</remarks>
	  <param name="handle">Handle of the unmanaged object</param>
    </member>
        
	<member name="P:ShinobiCharts.SChartFlatAnimationCurve.ClassHandle">
        <summary>The handle for this class.
        </summary>
	  <remarks>Not normally used by application code</remarks>
    </member>
        
	<member name="M:ShinobiCharts.SChartFlatAnimationCurve.Dispose(System.Boolean)">
      <summary> Releases unmanaged resources.
      </summary>
	  <remarks></remarks>
	  <param name="disposing">True if called by Dispose, false if called from a finalizer</param>
    </member>

	<member name="M:ShinobiCharts.SChartFlatAnimationCurve.ValueAtTime(System.Single)">
        <summary>Should return an appropriate value for the animation curve at the given time.</summary>
	    <remarks>'Time' will be provided as a float between 0.f and 1.f, where 0.f is the beginning of the animation and 1.f is the end of the animation. (time = elapsed time / duration)
 The value returned represents the progress of the series between its beginning and end positions, where 0.f is the start state and 1.f is, nominally, the end state.
 It is valid to return a value 'v' where either v is less than 0 or v is greater than 1 and it not necessary to return 1 at time 1.</remarks>
    </member>
        
	<member name="M:ShinobiCharts.SChartFlatAnimationCurve.Copy">
        <summary>Creates a copy of the curve</summary>
    </member>
        
		
	<member name="T:ShinobiCharts.SChartLinearAnimationCurve">
      <summary>This curve progresses at a constant speed from 0.0 to 1.0.</summary>
	  <remarks>See the SChartAnimationCurveProtocol protocol for more information on curve evaluation.</remarks>
	</member>	
	
    <member name="M:ShinobiCharts.SChartLinearAnimationCurve.#ctor">
      <summary>Default constructor.
      </summary>
		<remarks></remarks>
    </member>
        
	<member name="M:ShinobiCharts.SChartLinearAnimationCurve.#ctor(MonoTouch.Foundation.NSCoder)">
      <summary>A constructor that initializes the object from the data stored in the unarchiver object.
      </summary>
	  <remarks>This constructor is provided to allow the class to be initialized from an unarchiver (for example, during NIB deserialization).</remarks>
	  <param name="coder">The unarchiver object</param>
    </member>
        
    <member name="M:ShinobiCharts.SChartLinearAnimationCurve.#ctor(MonoTouch.Foundation.NSObjectFlag)">
      <summary>Constructor to call on derived classes to skip initialization and merely allocate the object.
      </summary>
	  <remarks>You should not invoke this method directly.</remarks>
	  <param name="t">Unused sentinel value</param>
    </member>
		
	<member name="M:ShinobiCharts.SChartLinearAnimationCurve.#ctor(System.IntPtr)">
      <summary>A constructor used when creating managed representations of unmanaged objects.
      </summary>
	  <remarks>You should not invoke this method directly.</remarks>
	  <param name="handle">Handle of the unmanaged object</param>
    </member>
        
	<member name="P:ShinobiCharts.SChartLinearAnimationCurve.ClassHandle">
        <summary>The handle for this class.
        </summary>
	  <remarks>Not normally used by application code</remarks>
    </member>
        
	<member name="M:ShinobiCharts.SChartLinearAnimationCurve.Dispose(System.Boolean)">
      <summary> Releases unmanaged resources.
      </summary>
	  <remarks></remarks>
	  <param name="disposing">True if called by Dispose, false if called from a finalizer</param>
    </member>

	<member name="M:ShinobiCharts.SChartLinearAnimationCurve.ValueAtTime(System.Single)">
        <summary>Should return an appropriate value for the animation curve at the given time.</summary>
	    <remarks>'Time' will be provided as a float between 0.f and 1.f, where 0.f is the beginning of the animation and 1.f is the end of the animation. (time = elapsed time / duration)
 The value returned represents the progress of the series between its beginning and end positions, where 0.f is the start state and 1.f is, nominally, the end state.
 It is valid to return a value 'v' where either v is less than 0 or v is greater than 1 and it not necessary to return 1 at time 1.</remarks>
    </member>
        
	<member name="M:ShinobiCharts.SChartLinearAnimationCurve.Copy">
        <summary>Creates a copy of the curve</summary>
    </member>
        
		
    <member name="T:ShinobiCharts.SChartLogger">
      <summary> A class to format output and control the level of reporting by the chart and its objects</summary>
		<remarks>Setting the log level to SChartLogLevelError will output all messages below this level ie: SChartLogLevelDebug and SChartLogLevelWarning.
</remarks>
    </member>
        
    <member name="P:ShinobiCharts.SChartLogger.LogLevel">
      <summary> All messages at or below `LogLevel` will be sent to the console.  
      </summary>
		<remarks></remarks>
    </member>

	<member name="M:ShinobiCharts.SChartLogger.#ctor">
      <summary>
				Default constructor.
      </summary>
		<remarks></remarks>
    </member>		
        
    <member name="M:ShinobiCharts.SChartLogger.#ctor(ShinobiCharts.SChartLogLevel)">
      <summary>
			Initialize the log object with an output level.
 			All messages at or below `OutputLevel` will be sent to the console. 
      </summary>
		<remarks></remarks>
    </member>
		
	<member name="M:ShinobiCharts.SChartLogger.#ctor(MonoTouch.Foundation.NSCoder)">
      <summary>A constructor that initializes the object from the data stored in the unarchiver object.
      </summary>
	  <remarks>This constructor is provided to allow the class to be initialized from an unarchiver (for example, during NIB deserialization).</remarks>
	  <param name="coder">The unarchiver object</param>
    </member>

        
    <member name="M:ShinobiCharts.SChartLogger.#ctor(MonoTouch.Foundation.NSObjectFlag)">
      <summary>Constructor to call on derived classes to skip initialization and merely allocate the object.
      </summary>
	  <remarks>You should not invoke this method directly.</remarks>
	  <param name="t">Unused sentinel value</param>
    </member>
		
	<member name="M:ShinobiCharts.SChartLogger.#ctor(System.IntPtr)">
      <summary>A constructor used when creating managed representations of unmanaged objects.
      </summary>
	  <remarks>You should not invoke this method directly.</remarks>
	  <param name="handle">Handle of the unmanaged object</param>
    </member>
        
	<member name="P:ShinobiCharts.SChartLogger.ClassHandle">
        <summary>The handle for this class.
        </summary>
	  <remarks>Not normally used by application code</remarks>
    </member>
        
    <member name="M:ShinobiCharts.SChartLogger.Log(ShinobiCharts.SChartLogLevel,System.String,System.String,System.UInt32,System.String)">
      <summary> Log a message at a particular level.
      </summary>
	  <remarks> The `Message` will be output during execution whenever the `LogLevel` passed to this method is at or below the class `LogLevel`.</remarks>
	  <param name="file"></param>	
	  <param name="function"></param>	
	  <param name="line"></param>	
	  <param name="message"></param>	
    </member>
		
      
		<member name="T:ShinobiCharts.SChartTheme">
			<summary>
				The SChartTheme class is responsible for storing styling information for the chart's visual components,
				such as its titles, axes, tickmarks, and series.
			</summary>
			<remarks>
				<para>
					Each theme contains a number of style objects that affect the look of certain aspects of the chart such
					as its axis, its title or its crosshair. These style objects are exposed as properties on the theme.
					There are also a number of style objects for each series type - for most series, six different styles
					are provided per theme. Radial and financial (ohlc, candlestick) series only have a one style per theme.
					These are accessed via a method on the theme, for example line series styles are returned by:
<code>
SChartLineSeriesStyle thirdSelectedLineSeriesStyle = theme.GetLineSeriesStyle(2, true);
SChartColumnSeriesStyle secondUnselectedColumnSeriesStyle = theme.GetColumnSeriesStyle(2, false);
</code>
					Note that if there are more series on the chart than there are series styles provided by the theme,
					the chart will loop through the style objects it has, using the first style object again once it has
					cycled through its available styles.
				</para><para>
					A theme is applied to a chart via the
					<see cref="M:ShinobiCharts.ShinobiChart.ApplyTheme(ShinobiCharts.SChartTheme)" /> method. For example:
<code>
chart.ApplyTheme(theme);
</code>
					The <c>ApplyTheme</c> method is called on the chart upon the initialisation of the chart, applying
					either the theme you provided to the chart via
					<see cref="C:ShinobiCharts.ShinobiChart(System.Drawing.RectangleF,ShinobiCharts.SChartTheme)" />
					(or <see cref="C:ShinobiCharts.ShinobiChart(System.Drawing.RectangleF,ShinobiCharts.SChartTheme,ShinobiCharts.SChartAxisType,ShinobiCharts.SChartAxisType)" />)
					or the default theme. Applying a theme to a chart will overwrite any changes to any of the style objects
					on the chart or its series previously - you should make any further customisations after applying the theme.
				</para><para>
					ShinobiCharts comes with several pre-created subclasses of SChartTheme:
					<list type="bullet">
						<item><term>iOS Seven Theme: Solid colors without gradients, crisp and clear text (default iOS 7+)</term></item>
						<item><term>Light Theme: Brighter colors based on a white background (default pre-iOS 7)</term></item>
						<item><term>Dark Theme: Softer colors on a black background</term></item>
					</list>
				</para><para>
					A chart running on a version of iOS older than iOS 7 will use the light theme by default, whereas
					a chart running on iOS 7 or later will default to using our SChartiOS7Theme.
					All themes are, however, available to all versions of iOS - just use them as normal. For example,
					you could use SChartiOS7Theme on iOS 5.
				</para><para>
					There are two recommended ways to provide your own custom theme:
					<list type="bullet">
						<item>
							<term>
								You can use one of the provided SChartTheme classes and customise the style objects provided
								on it.
							</term>
						</item>
						<item>
							<term>
								You can subclass one of the SChartTheme classes, customise the style objects provided, and
								override the <c>Get{Line, Band, Bar, Column, Donut, Ohlc}SeriesStyle</c> method to return your
								own series styles.
							</term>
						</item>
					</list>
				</para>
			</remarks>
		</member>

    <member name="M:ShinobiCharts.SChartTheme.#ctor">
      <summary> 
          Initializes and returns a newly allocated theme object with default settings.
	  </summary>
		<remarks></remarks>
			<returns>An initialized theme object or null if the object couldn't be created.</returns>
    </member>
				
	<member name="M:ShinobiCharts.SChartTheme.#ctor(MonoTouch.Foundation.NSCoder)">
     <summary>A constructor that initializes the object from the data stored in the unarchiver object.
      </summary>
	  <remarks>This constructor is provided to allow the class to be initialized from an unarchiver (for example, during NIB deserialization).</remarks>
	  <param name="coder">The unarchiver object</param>
    </member>

        
    <member name="M:ShinobiCharts.SChartTheme.#ctor(MonoTouch.Foundation.NSObjectFlag)">
      <summary>Constructor to call on derived classes to skip initialization and merely allocate the object.
      </summary>
	  <remarks>You should not invoke this method directly.</remarks>
	  <param name="t">Unused sentinel value</param>
    </member>
		
	<member name="M:ShinobiCharts.SChartTheme.#ctor(System.IntPtr)">
      <summary>A constructor used when creating managed representations of unmanaged objects.
      </summary>
	  <remarks>You should not invoke this method directly.</remarks>
	  <param name="handle">Handle of the unmanaged object</param>
    </member>

	<member name="P:ShinobiCharts.SChartTheme.ClassHandle">
        <summary>
        The handle for this class.
        </summary>
	  <remarks>Not normally used by application code</remarks>
    </member>	

	<member name="M:ShinobiCharts.SChartTheme.Dispose(System.Boolean)">
      <summary> Releases unmanaged resources.
      </summary>
	  <remarks></remarks>
	  <param name="disposing">True if called by Dispose, false if called from a finalizer</param>
    </member>

    <member name="P:ShinobiCharts.SChartTheme.ChartStyle">
			<summary>
				Style options relating to the overall chart. 
			</summary>
			<remarks>
				This includes properties such as:
				<list type="bullet">
					<item><term>The background color of the chart.</term></item>
					<item><term>The border of the chart.</term></item>
				</list>
				If you wish to update the style of the chart, the best way is to edit the properties of this object.
				For example, to change the background color of the chart view, you could use the following code:
				<code>chart.Theme.ChartStyle.BackgroundColor = UIColor.Red;
chart.ApplyTheme();</code>
				The ShinobiChart.ApplyTheme method tells the chart to redraw itself using the new settings in the theme.
			</remarks>
    </member>
        
    <member name="P:ShinobiCharts.SChartTheme.ChartTitleStyle">
      <summary>Style options relating to the chart title.
      </summary>
			<remarks>
				This includes properties such as:
				<list type="bullet">
					<item><term>The color, font and alignment of the title.</term></item>
					<item><term>Whether the title overlaps with the chart.</term></item>
				</list>
				If you wish to update the style of the chart title, the best way is to edit the properties of this object.
				For example, to change the text color of the chart title, you could use the following code:
				<code>chart.Theme.ChartTitleStyle.TextColor = UIColor.Blue;
chart.ApplyTheme();</code>
				The ShinobiChart.ApplyTheme method tells the chart to redraw itself using the new settings in the theme.
			</remarks>
    </member>
        
    <member name="P:ShinobiCharts.SChartTheme.LegendStyle">
      <summary>Style options relating to the chart legend.
      </summary>
			<remarks>
				This includes properties such as:
				<list type="bullet">
					<item><term>The color and font of text in the legend.</term></item>
					<item><term>The alignment of symbols in the legend.</term></item>
					<item><term>The color of the legend border.</term></item>
					<item><term>The corner radius of the legend.</term></item>
					<item><term>The background color of the legend.</term></item>
					<item><term>The padding around the legend.</term></item>
				</list>
				If you wish to update the style of the chart legend, the best way is to edit the properties of this object.
				For example, to change the text color in the legend, you could use the following code:
				<code>chart.Theme.LegendStyle.FontColor = UIColor.Blue;
chart.ApplyTheme();</code>
				The ShinobiChart.ApplyTheme method tells the chart to redraw itself using the new settings in the theme.
			</remarks>
    </member>
        
    <member name="P:ShinobiCharts.SChartTheme.XAxisStyle">
      <summary>Style options relating to the x axis.
      </summary>
			<remarks>
				This includes properties such as:
				<list type="bullet">
					<item><term>The color and font of the axis title.</term></item>
					<item><term>The position of the axis title.</term></item>
					<item><term>The width and color of the axis.</term></item>
					<item><term>The width and color of tick marks on the axis.</term></item>
					<item><term>Whether tick marks are shown.</term></item>
					<item><term>The color of grid lines on the chart for the x axis.</term></item>
					<item><term>Whether grid lines are shown.</term></item>
				</list>
				If you wish to update the style of the x axis, the best way is to edit the properties of this object.
				For example, to change the width of the axis, you could use the following code:
				<code>chart.Theme.XAxisStyle.LineColor = UIColorRed;
chart.ApplyTheme();</code>
				The ShinobiChart.ApplyTheme method tells the chart to redraw itself using the new settings in the theme.
			</remarks>
    </member>
        
    <member name="P:ShinobiCharts.SChartTheme.YAxisStyle">
      <summary>Style options relating to the y axis.
      </summary>
			<remarks>
				This includes properties such as:
				<list type="bullet">
					<item><term>The color and font of the axis title.</term></item>
					<item><term>The position of the axis title.</term></item>
					<item><term>The width and color of the axis.</term></item>
					<item><term>The width and color of tick marks on the axis.</term></item>
					<item><term>Whether tick marks are shown.</term></item>
					<item><term>The color of grid lines on the chart for the y axis.</term></item>
					<item><term>Whether grid lines are shown.</term></item>
				</list>
				If you wish to update the style of the y axis, the best way is to edit the properties of this object.
				For example, to change the width of the axis, you could use the following code:
				<code>chart.Theme.YAxisStyle.LineColor = UIColor.Red;
chart.ApplyTheme();</code>
				The ShinobiChart.ApplyTheme method tells the chart to redraw itself using the new settings in the theme.
			</remarks>
    </member>
        
    <member name="P:ShinobiCharts.SChartTheme.CrosshairStyle">
      <summary>Style options relating to the chart crosshair.
      </summary>
			<remarks>
				This includes properties such as:
				<list type="bullet">
					<item><term>The color and width of crosshair lines.</term></item>
					<item><term>The color and font of the crosshair tooltip.</term></item>
					<item><term>The width and color of the crosshair tooltip border.</term></item>
				</list>
				If you wish to update the style of the crosshair, the best way is to edit the properties of this object.
				For example, to change the width of the crosshair lines, you could use the following code:
				<code>chart.Theme.CrosshairStyle.LineWidth = new NSNumber(5);
chart.ApplyTheme();</code>
				The ShinobiChart.ApplyTheme method tells the chart to redraw itself using the new settings in the theme.
			</remarks>
    </member>
        
    <member name="P:ShinobiCharts.SChartTheme.BoxGestureStyle">
      <summary>Style options relating to the box gesture.
      </summary>
			<remarks>
				This includes properties such as:
				<list type="bullet">
					<item><term>The color of the box which is displayed.</term></item>
					<item><term>The color of tracking lines.</term></item>
					<item><term>The width of the lines on the box.</term></item>
					<item><term>The width of the tracking lines.</term></item>
				</list>
				If you wish to update the style of box gestures, the best way is to edit the properties of this object.
				For example, to change the width of the lines drawn around the box, you could use the following code:
				<code>chart.Theme.BoxGestureStyle.BoxLineWidth = 5.0f;</code>
			</remarks>
    </member>
        
    <member name="P:ShinobiCharts.SChartTheme.BlackColor">
      <summary>Black palette color.
      </summary>
			<remarks>
				This is used for:
				<list type="bullet">
					<item><term>The color of the box displayed during box gestures.</term></item>
					<item><term>The text color on the chart title and the axis titles.</term></item>
					<item><term>The color of the legend text and border.</term></item>
					<item><term>The color of axis tick marks and labels.</term></item>
					<item><term>The outline drawn for candlestick chart series.</term></item>
				</list>
				The theme color properties are included to allow you to access the colors used within the theme, and use them elsewhere in your app.
			</remarks>
    </member>
        
    <member name="P:ShinobiCharts.SChartTheme.BlackColorLowAlpha">
      <summary>Black palette color with reduced alpha.
      </summary>
			<remarks>
				This is used for tracking lines on box gestures, and for the major grid lines on the chart.
				The theme color properties are included to allow you to access the colors used within the theme, and use them elsewhere in your app.
			</remarks>
    </member>
        
    <member name="P:ShinobiCharts.SChartTheme.RedColorDark">
      <summary>Red palette color.
      </summary>
			<remarks>
				This is used for:
				<list type="bullet">
					<item><term>Area fill underneath the first line series on the chart.</term></item>
					<item><term>The color of the first bar/column series on the chart.</term></item>
					<item><term>The color of falling data points in the first candlestick series on the chart.</term></item>
				</list>
				The theme color properties are included to allow you to access the colors used within the theme, and use them elsewhere in your app.
			</remarks>
    </member>
        
    <member name="P:ShinobiCharts.SChartTheme.RedColorLight">
      <summary>Red palette color with increased brightness.
      </summary>
			<remarks>
				This is used for:
				<list type="bullet">
					<item><term>The line color of the first line series on the chart.</term></item>
					<item><term>The color of the lower limiting line of the first band series on the chart.</term></item>
					<item><term>The color of the first bar/column series on the chart.</term></item>
					<item><term>The color of points in the first scatter series on the chart.</term></item>
					<item><term>The color of falling data points in the first OHLC series on the chart.</term></item>
				</list>
				The theme color properties are included to allow you to access the colors used within the theme, and use them elsewhere in your app.
			</remarks>
    </member>
        
    <member name="P:ShinobiCharts.SChartTheme.RedColorBrightLight">
      <summary>Red palette color with increased brightness.
      </summary>
			<remarks>
				This is used for:
				<list type="bullet">
					<item><term>The color of falling data points in the first OHLC series on the chart.</term></item>
					<item><term>The color of falling data points in the first candlestick series on the chart.</term></item>
				</list>
				The theme color properties are included to allow you to access the colors used within the theme, and use them elsewhere in your app.
			</remarks>
    </member>
        
    <member name="P:ShinobiCharts.SChartTheme.GreenColorDark">
      <summary>Green palette color.
      </summary>
			<remarks>
				This is used for:
				<list type="bullet">
					<item><term>The area fill color underneath the second line series on the chart.</term></item>
					<item><term>The color of the second bar/column series on the chart.</term></item>
					<item><term>The color of rising data points in the first OHLC series on the chart.</term></item>
				</list>
				The theme color properties are included to allow you to access the colors used within the theme, and use them elsewhere in your app.
			</remarks>
    </member>
        
    <member name="P:ShinobiCharts.SChartTheme.GreenColorLight">
      <summary>Green palette color with increased brightness.
      </summary>
			<remarks>
				This is used for:
				<list type="bullet">
					<item><term>The line color of the second line series on the chart.</term></item>
					<item><term>The color of the upper limiting line in the first band series on the chart.</term></item>
					<item><term>The color of points in the first band series on the chart.</term></item>
					<item><term>The color of the second bar/column series on the chart.</term></item>
					<item><term>The color of points in the second scatter series on the chart.</term></item>
					<item><term>The color of rising data points in the first OHLC series on the chart.</term></item>
					<item><term>The color of rising data points in the first candlestick series on the chart.</term></item>
				</list>
				The theme color properties are included to allow you to access the colors used within the theme, and use them elsewhere in your app.
			</remarks>
    </member>
        
    <member name="P:ShinobiCharts.SChartTheme.GreenColorBrightLight">
      <summary>Green palette color with increased brightness.
      </summary>
			<remarks>
				This is used for the color of rising data points in the first candlestick series on the chart.
				The theme color properties are included to allow you to access the colors used within the theme, and use them elsewhere in your app.
			</remarks>
    </member>
        
    <member name="P:ShinobiCharts.SChartTheme.BlueColorDark">
      <summary>Blue palette color.
      </summary>
			<remarks>
				This is used for:
				<list type="bullet">
					<item><term>The area fill color underneath the third line series on the chart.</term></item>
					<item><term>The color of the third bar/column series on the chart.</term></item>
				</list>
				The theme color properties are included to allow you to access the colors used within the theme, and use them elsewhere in your app.
			</remarks>
    </member>
        
    <member name="P:ShinobiCharts.SChartTheme.BlueColorLight">
      <summary>Blue palette color with increased brightness.
      </summary>
			<remarks>
				This is used for:
				<list type="bullet">
					<item><term>The color of the third line series on the chart.</term></item>
					<item><term>The color of the lower limiting line in the second band series on the chart.</term></item>
					<item><term>The color of the third bar/column series on the chart.</term></item>
					<item><term>The color of points in the third scatter series on the chart.</term></item>
				</list>
				The theme color properties are included to allow you to access the colors used within the theme, and use them elsewhere in your app.
			</remarks>
    </member>
        
    <member name="P:ShinobiCharts.SChartTheme.OrangeColorDark">
      <summary>Orange palette color.
      </summary>
			<remarks>
				This is used for:
				<list type="bullet">
					<item><term>The area fill color underneath the fourth line series on the chart.</term></item>
					<item><term>The color of the fourth bar/column series on the chart.</term></item>
				</list>
				The theme color properties are included to allow you to access the colors used within the theme, and use them elsewhere in your app.
			</remarks>
    </member>
        
    <member name="P:ShinobiCharts.SChartTheme.OrangeColorLight">
      <summary>Orange palette color with increased brightness.
      </summary>
			<remarks>
				This is used for:
				<list type="bullet">
					<item><term>The color of the fourth line series on the chart.</term></item>
					<item><term>The color of the upper limiting line in the second band series on the chart.</term></item>
					<item><term>The color of points in the second band series on the chart.</term></item>
					<item><term>The color of the fourth bar/column series on the chart.</term></item>
					<item><term>The color of the fourth scatter series on the chart.</term></item>
				</list>
				The theme color properties are included to allow you to access the colors used within the theme, and use them elsewhere in your app.
			</remarks>
    </member>
        
    <member name="P:ShinobiCharts.SChartTheme.PurpleColorDark">
      <summary>Purple palette color.
      </summary>
			<remarks>
				This is used for:
				<list type="bullet">
					<item><term>The area fill color below the fifth line series on the chart.</term></item>
					<item><term>The color of the fifth bar/column series on the chart.</term></item>
				</list>
				The theme color properties are included to allow you to access the colors used within the theme, and use them elsewhere in your app.
			</remarks>
    </member>
        
    <member name="P:ShinobiCharts.SChartTheme.PurpleColorLight">
      <summary>Purple palette color with increased brightness.
      </summary>
			<remarks>
				This is used for:
				<list type="bullet">
					<item><term>The color of the fifth line series on the chart.</term></item>
					<item><term>The color of the lower limiting line on the third band series on the chart.</term></item>
					<item><term>The color of the fifth bar/column series on the chart.</term></item>
					<item><term>The color of the fifth scatter series on the chart.</term></item>
				</list>
				The theme color properties are included to allow you to access the colors used within the theme, and use them elsewhere in your app.
			</remarks>
    </member>
        
    <member name="P:ShinobiCharts.SChartTheme.YellowColorDark">
      <summary>Yellow palette color.
      </summary>
			<remarks>
				This is used for:
				<list type="bullet">
					<item><term>The area fill color below the sixth line series on the chart.</term></item>
					<item><term>The color of the sixth bar/column series on the chart.</term></item>
				</list>
				The theme color properties are included to allow you to access the colors used within the theme, and use them elsewhere in your app.
			</remarks>
    </member>

    <member name="P:ShinobiCharts.SChartTheme.YellowColorLight">
      <summary>Yellow palette color with increased brightness.
      </summary>
			<remarks>
				This is used for:
				<list type="bullet">
					<item><term>The color of the sixth line series on the chart.</term></item>
					<item><term>The color of the upper limiting line on the third band series on the chart.</term></item>
					<item><term>The color of points in the third band series on the chart.</term></item>
					<item><term>The color of the sixth bar/column series on the chart.</term></item>
					<item><term>The color of the sixth scatter series on the chart.</term></item>
				</list>
				The theme color properties are included to allow you to access the colors used within the theme, and use them elsewhere in your app.
			</remarks>
    </member>
        
		<member name="P:ShinobiCharts.SChartTheme.LineWidth">
			<summary>Use this setting to apply a consistent line width across all line series.
			</summary>
			<remarks>
				After setting this value call ShinobiChart.ApplyTheme on your chart.
				This value will be used by default.
				If you have explicitly set the line width on a line series, that value will take precedence over the default.
			</remarks>
		</member>
		
		<member name="P:ShinobiCharts.SChartTheme.ColumnLineWidth">
			<summary>Use this setting to apply a consistent line Width across all column series
			</summary>
			<remarks>
				After setting this value call ShinobiChart.ApplyTheme on your chart.
				This value will be used by default.
				If you have explicitly set the column line width on a line series, that value will take precedence over the default.
			</remarks>
		</member>
		
		<member name="P:ShinobiCharts.SChartTheme.BarLineWidth">
			<summary>Use this setting to apply a consistent line Width across all bar series
			</summary>
			<remarks>
				After setting this value call ShinobiChart.ApplyTheme on your chart.
				This value will be used by default.
				If you have explicitly set the bar width on a line series, that value will take precedence over the default.
			</remarks>
		</member>
		
		<member name="P:ShinobiCharts.SChartTheme.DonutCrustThickness">
			<summary>Use this setting to apply a consistent crust thickness across all donut series
			</summary>
			<remarks>
				After setting this value call ShinobiChart.ApplyTheme on your chart.
				This value will be used by default.
				If you have explicitly set the donut crust thickness on a line series, that value will take precedence over the default.
			</remarks>
		</member>
		
		<member name="P:ShinobiCharts.SChartTheme.PieCrustThickness">
			<summary>Use this setting to apply a consistent crust thickness across all pie series
			</summary>
			<remarks>
				After setting this value call ShinobiChart.ApplyTheme on your chart.
				This value will be used by default.
				If you have explicitly set the pie crust thickness on a line series, that value will take precedence over the default.
			</remarks>
		</member>
        
    <member name="P:ShinobiCharts.SChartTheme.RegularFontName">
      <summary>The name of the regular font to use within the theme.</summary>
			<remarks>
				The regular font is used for:
				<list type="bullet">
					<item><term>The chart title.</term></item>
					<item><term>The axis titles.</term></item>
					<item><term>Text in the legend.</term></item>
					<item><term>Text in the crosshair tooltip.</term></item>
					<item><term>Labels in the first donut series on the chart.</term></item>
				</list>
			</remarks>
    </member>
        
    <member name="P:ShinobiCharts.SChartTheme.BoldFontName">
      <summary>The name of the bold font to use within the theme.</summary>
	<remarks></remarks>
    </member>
        
    <member name="P:ShinobiCharts.SChartTheme.LightFontName">
      <summary>The name of the light font to use within the theme.</summary>
	<remarks>The light font is used for labels on major axis ticks.</remarks>
    </member>
        
    <member name="M:ShinobiCharts.SChartTheme.SetStyles">
      <summary>
      </summary>
		<remarks></remarks>
    </member>
        
    <member name="M:ShinobiCharts.SChartTheme.AddLineSeriesStyle(ShinobiCharts.SChartLineSeriesStyle,System.Boolean)">
      <summary>Adds a series style to the array of line series styles contained within the theme.
      </summary>
		<remarks>
				The theme contains two sets of series styles - one for series in their normal state, and one for when they are selected.
				When you add a series style to the theme, you can specify when it should be used on a series using the selected parameter.
		</remarks>
	  <param name="newStyle">The series style to add to the theme.</param>
	  <param name="selected">If this is set to true, the style will be used for series when they are selected.</param>
    </member>
        
    <member name="M:ShinobiCharts.SChartTheme.AddBandSeriesStyle(ShinobiCharts.SChartBandSeriesStyle,System.Boolean)">
      <summary>Stores the series style in the array of band series styles.
      </summary>
		<remarks>
				The theme contains two sets of series styles - one for series in their normal state, and one for when they are selected.
				When you add a series style to the theme, you can specify when it should be used on a series using the selected parameter.
		</remarks>
	  <param name="newStyle">The series style to add to the theme.</param>
	  <param name="selected">If this is set to true, the style will be used for series when they are selected.</param>
    </member>
        
    <member name="M:ShinobiCharts.SChartTheme.AddColumnSeriesStyle(ShinobiCharts.SChartColumnSeriesStyle,System.Boolean)">
      <summary>Stores the series style in the array of column series styles.
      </summary>
		<remarks>
				The theme contains two sets of series styles - one for series in their normal state, and one for when they are selected.
				When you add a series style to the theme, you can specify when it should be used on a series using the selected parameter.
		</remarks>
	  <param name="newStyle">The series style to add to the theme.</param>
	  <param name="selected">If this is set to true, the style will be used for series when they are selected.</param>
    </member>
        
    <member name="M:ShinobiCharts.SChartTheme.AddBarSeriesStyle(ShinobiCharts.SChartBarSeriesStyle,System.Boolean)">
      <summary>Stores the series style in the array of bar series styles.
      </summary>
		<remarks>
				The theme contains two sets of series styles - one for series in their normal state, and one for when they are selected.
				When you add a series style to the theme, you can specify when it should be used on a series using the selected parameter.
		</remarks>
	  <param name="newStyle">The series style to add to the theme.</param>
	  <param name="selected">If this is set to true, the style will be used for series when they are selected.</param>
    </member>
        
    <member name="M:ShinobiCharts.SChartTheme.AddDonutSeriesStyle(ShinobiCharts.SChartDonutSeriesStyle,System.Boolean)">
      <summary>Encodes the donut series style object and stores in the array of donut series styles.
      </summary>
			<remarks>
				The theme contains two sets of series styles - one for series in their normal state, and one for when they are selected.
				When you add a series style to the theme, you can specify when it should be used on a series using the selected parameter.
			</remarks>
			<param name="newStyle">The series style to add to the theme.</param>
			<param name="selected">If this is set to true, the style will be used for series when they are selected.</param>
    </member>

    <member name="M:ShinobiCharts.SChartTheme.AddScatterSeriesStyle(ShinobiCharts.SChartScatterSeriesStyle,System.Boolean)">
      <summary>Stores the series style in the array of scatter series styles.
      </summary>
		<remarks>
				The theme contains two sets of series styles - one for series in their normal state, and one for when they are selected.
				When you add a series style to the theme, you can specify when it should be used on a series using the selected parameter.
		</remarks>
	  <param name="newStyle">The series style to add to the theme.</param>
	  <param name="selected">If this is set to true, the style will be used for series when they are selected.</param>
    </member>
        
    <member name="M:ShinobiCharts.SChartTheme.AddOHLCSeriesStyle(ShinobiCharts.SChartOHLCSeriesStyle,System.Boolean)">
      <summary>Stores the series style in the array of ohlc series styles.
      </summary>
		<remarks>
				The theme contains two sets of series styles - one for series in their normal state, and one for when they are selected.
				When you add a series style to the theme, you can specify when it should be used on a series using the selected parameter.
		</remarks>
	  <param name="newStyle">The series style to add to the theme.</param>
	  <param name="selected">If this is set to true, the style will be used for series when they are selected.</param>
    </member>
        
    <member name="M:ShinobiCharts.SChartTheme.AddCandlestickSeriesStyle(ShinobiCharts.SChartCandlestickSeriesStyle,System.Boolean)">
      <summary>Stores the series style in the array of candlestick series styles.
      </summary>
		<remarks>
				The theme contains two sets of series styles - one for series in their normal state, and one for when they are selected.
				When you add a series style to the theme, you can specify when it should be used on a series using the selected parameter.
		</remarks>
	  <param name="newStyle">The series style to add to the theme.</param>
	  <param name="selected">If this is set to true, the style will be used for series when they are selected.</param>
    </member>
        
		<member name="M:ShinobiCharts.SChartTheme.GetLineSeriesStyle(System.Int32,System.Boolean)">
			<summary>Returns the line series style for the specified series on the chart.
			</summary>
			<remarks></remarks>
			<param name="seriesIndex">The index of the series on the chart.</param>
			<param name="selected">If set to true, this method returns the selected style for the series. If not, this method returns the normal style for the series.</param>
			<returns>The style to use for the given series.</returns>
		</member>
        
		<member name="M:ShinobiCharts.SChartTheme.GetBandSeriesStyle(System.Int32,System.Boolean)">
			<summary>Returns the band series style for the specified series on the chart.
			</summary>
			<remarks></remarks>
			<param name="seriesIndex">The index of the series on the chart.</param>
			<param name="selected">If set to true, this method returns the selected style for the series. If not, this method returns the normal style for the series.</param>
			<returns>The style to use for the given series.</returns>
		</member>
        
    <member name="M:ShinobiCharts.SChartTheme.GetColumnSeriesStyle(System.Int32,System.Boolean)">
      <summary>Returns the column series style for the specified series on the chart. 
      </summary>
			<remarks></remarks>
			<param name="seriesIndex">The index of the series on the chart.</param>
			<param name="selected">If set to true, this method returns the selected style for the series. If not, this method returns the normal style for the series.</param>
			<returns>The style to use for the given series.</returns>
    </member>
        
    <member name="M:ShinobiCharts.SChartTheme.GetBarSeriesStyle(System.Int32,System.Boolean)">
      <summary>Returns the bar series style for the specified series on the chart. 
      </summary>
			<remarks></remarks>
			<param name="seriesIndex">The index of the series on the chart.</param>
			<param name="selected">If set to true, this method returns the selected style for the series. If not, this method returns the normal style for the series.</param>
			<returns>The style to use for the given series.</returns>
    </member>
       
    <member name="M:ShinobiCharts.SChartTheme.GetDonutSeriesStyle(System.Int32,System.Boolean)">
      <summary>Returns the donut series style for the specified series on the chart. 
      </summary>
			<remarks></remarks>
			<param name="seriesIndex">The index of the series on the chart.</param>
			<param name="selected">If set to true, this method returns the selected style for the series. If not, this method returns the normal style for the series.</param>
			<returns>The style to use for the given series.</returns>
    </member>
       
    <member name="M:ShinobiCharts.SChartTheme.GetScatterSeriesStyle(System.Int32,System.Boolean)">
      <summary>Returns the scatter series style for the specified series on the chart.
      </summary>
			<remarks></remarks>
			<param name="seriesIndex">The index of the series on the chart.</param>
			<param name="selected">If set to true, this method returns the selected style for the series. If not, this method returns the normal style for the series.</param>
			<returns>The style to use for the given series.</returns>
    </member>

    <member name="M:ShinobiCharts.SChartTheme.GetOHLCSeriesStyle(System.Int32,System.Boolean)">
      <summary>Returns the OHLC series style for the specified series on the chart. 
      </summary>
			<remarks></remarks>
			<param name="seriesIndex">The index of the series on the chart.</param>
			<param name="selected">If set to true, this method returns the selected style for the series. If not, this method returns the normal style for the series.</param>
			<returns>The style to use for the given series.</returns>
   </member>

		<member name="M:ShinobiCharts.SChartTheme.GetCandlestickSeriesStyle(System.Int32,System.Boolean)">
			<summary>Returns the candlestick series style for the specified series on the chart.
			</summary>
			<remarks></remarks>
			<param name="seriesIndex">The index of the series on the chart.</param>
			<param name="selected">If set to true, this method returns the selected style for the series. If not, this method returns the normal style for the series.</param>
			<returns>The style to use for the given series.</returns>
		</member>

		<member name="M:ShinobiCharts.SChartTheme.GetBubbleSeriesStyle(System.Int32,System.Boolean)">
			<summary>Returns the bubble series style for the specified series on the chart.</summary>
			<remarks></remarks>
			<param name="seriesIndex">The index of the series on the chart.</param>
			<param name="selected">If set to true, this method returns the selected style for the series. If not, this method returns the normal style for the series.</param>
			<returns>The style to use for the given series.</returns>
		</member>

    <member name="M:ShinobiCharts.SChartTheme.ConfigureLineSeriesStyle(ShinobiCharts.SChartLineSeriesStyle)">
      <summary>DEPRECATED - We will move this off the public API in a future commit.</summary>
	  <remarks></remarks>
	  <param name="style"></param>
    </member>

    <member name="M:ShinobiCharts.SChartTheme.ConfigureBarSeriesStyle(ShinobiCharts.SChartBarSeriesStyle)">
      <summary>DEPRECATED - We will move this off the public API in a future commit.</summary>
	  <remarks></remarks>
	  <param name="style"></param>
    </member>

    <member name="M:ShinobiCharts.SChartTheme.ConfigureColumnSeriesStyle(ShinobiCharts.SChartColumnSeriesStyle)">
      <summary>DEPRECATED - We will move this off the public API in a future commit.</summary>
	  <remarks></remarks>
	  <param name="style"></param>
    </member>

    <member name="M:ShinobiCharts.SChartTheme.ConfigureScatterSeriesStyle(ShinobiCharts.SChartScatterSeriesStyle)">
      <summary>DEPRECATED - We will move this off the public API in a future commit.</summary>
	  <remarks></remarks>
	  <param name="style"></param>
    </member>

      
		<member name="T:ShinobiCharts.SChartSeries">
			<summary>Manages the display of a data series on a ShinobiChart.
			</summary>
			<remarks>
				<para>
					It contains a set of data points.
				</para><para>
					There are various things which you can do to configure the behavior and appearance of a chart series:
					<list type="bullet">
						<item>
							<term>
								A series can optionally use animations when it appears and disappears on the chart.
								You can set whether animation should be enabled, and if so, you can configure the animations
								which the series uses.
							</term>
						</item>
						<item>
							<term>
								You can configure whether the series is selectable, and if so, its behavior when it is selected.
							</term>
						</item>
						<item>
							<term>
								The series contains instances of SChartSeriesStyle, or one of its sub-classes, to manage its appearance.
								Tweaking these style objects allows you to change the look of the series on the chart.
							</term>
						</item>
						<item>
							<term>
								You can update the representation of the series in the chart legend, and whether the chart
								crosshair is enabled for the series.
							</term>
						</item>
					</list>
				</para><para>
					We have created sub-classes of SChartSeries for each of the concrete types of chart series which are available
					on a chart.  These are:
					<list type="bullet">
						<item>
							<term>
								<see cref="T:ShinobiCharts.SChartBarSeries" /> - represents a bar series.
							</term>
						</item>
						<item>
							<term>
								<see cref="T:ShinobiCharts.SChartColumnSeries" /> - represents a column series.
							</term>
						</item>
						<item>
							<term>
								<see cref="T:ShinobiCharts.SChartLineSeries" /> - represents a line series.
							</term>
						</item>
						<item>
							<term>
								<see cref="T:ShinobiCharts.SChartStepLineSeries" /> - represents a stepped line series.
							</term>
						</item>
						<item>
							<term>
								<see cref="T:ShinobiCharts.SChartBandSeries" /> - represents a band series.
								These are only available in the premium version of charts.
							</term>
						</item>
						<item>
							<term>
								<see cref="T:ShinobiCharts.SChartScatterSeries" /> - represents a scatter plots.
							</term>
						</item>
						<item>
							<term>
								<see cref="T:ShinobiCharts.SChartCandlestickSeries" /> - represents a candlestick series.
								These are only available in the premium version of charts.
							</term>
						</item>
						<item>
							<term>
								<see cref="T:ShinobiCharts.SChartOHLCSeries" /> - represents an Open-High-Low-Closed (OHLC) series.
								These are only available in the premium version of charts.
							</term>
						</item>
						<item>
							<term>
								<see cref="T:ShinobiCharts.SChartDonutSeries" /> - represents a donut series.
							</term>
						</item>
						<item>
							<term>
								<see cref="T:ShinobiCharts.SChartPieSeries" /> - represents a pie series.
							</term>
						</item>
					</list>
				</para><para>
					Series are always drawn in order with the lowest series index first.
					This means that higher numbered series sit on top and potentially obscure lower numbered series.
				</para>
			</remarks>
		</member>
		
    <member name="M:ShinobiCharts.SChartSeries.#ctor">
      <summary>Default constructor
      </summary>
	 <remarks></remarks>
    </member>
		
	<member name="M:ShinobiCharts.SChartSeries.#ctor(MonoTouch.Foundation.NSCoder)">
      <summary>A constructor that initializes the object from the data stored in the unarchiver object.
      </summary>
	  <remarks>This constructor is provided to allow the class to be initialized from an unarchiver (for example, during NIB deserialization).</remarks>
	  <param name="coder">The unarchiver object</param>
    </member>
        
    <member name="M:ShinobiCharts.SChartSeries.#ctor(MonoTouch.Foundation.NSObjectFlag)">
      <summary>Constructor to call on derived classes to skip initialization and merely allocate the object.
      </summary>
	  <remarks>You should not invoke this method directly.</remarks>
	  <param name="t">Unused sentinel value</param>
    </member>
		
	<member name="M:ShinobiCharts.SChartSeries.#ctor(System.IntPtr)">
      <summary>A constructor used when creating managed representations of unmanaged objects.
      </summary>
	  <remarks>You should not invoke this method directly.</remarks>
	  <param name="handle">Handle of the unmanaged object</param>
    </member>

	<member name="P:ShinobiCharts.SChartSeries.ClassHandle">
      <summary>The handle for this class.
      </summary>
	  <remarks>Not normally used by application code</remarks>
    </member>
        
	<member name="M:ShinobiCharts.SChartSeries.ConformsToProtocol(System.IntPtr)">
      <summary>Internal - checks whether this object conforms to a protocol.
      </summary>
	  <remarks>Not normally called from application code - used by the Shinobi framework.</remarks>
	  <param name="protocol">The protocol</param>
	  <returns>True if the object conforms to the protocol</returns>
    </member>
        
    <member name="P:ShinobiCharts.SChartSeries.DataSeries">
      <summary>SChartDataSeries gives you access to the set of data points in the series.
      </summary>
			<remarks>
				It contains the data values only, it is not concerned with the appearance of the series on the chart.
				The data series is provided to allow you to query the data values in the series, you should not try and
				use this to modify the series.
				If you wish to modify the data in the series, you should update the chart datasource, and then call
				<see cref="M:ShinobiCharts.ShinobiChart.ReloadData" />.
			</remarks>
    </member>
        
    <member name="P:ShinobiCharts.SChartSeries.Orientation">
      <summary>The orientation of the chart axis which is associated with the series.
      </summary>
	  <remarks>
				The orientation can be either horizontal or vertical.
				For example, the orientation for column series is SChartSeriesOrientation.Horizontal, and the orientation for
				bar series is SChartSeriesOrientation.Vertical.
			</remarks>
    </member>
        
    <member name="P:ShinobiCharts.SChartSeries.SelectionMode">
      <summary>Defines what should be selected when the user taps the chart.
      </summary>
			<remarks>
				This property defines how the series will respond when a tap gesture indicates a point on this series.
				There is an important effect of choosing SChartSelection.None - this option will remove this series from the
				algorithm that searches for the nearest point to the tap.
				Hence, a user may tap near to this series - but the algorithm will select a different series based upon its proximity.
				Currently selection is handled separately for radial chart series - SelectionMode, ToggleSelection, and
				TogglePointSelection are only applicable to cartesian series.
			</remarks>
    </member>
        
    <member name="P:ShinobiCharts.SChartSeries.ToggleSelection">
      <summary>Dictates whether the chart should allow other series to be selected simultaneously.
      </summary>
			<remarks>
				If this is set to false, the chart will de-select all other series before selecting the tapped series.
				Setting true will allow multiple series to be selected ("toggled") as they are tapped.
				Defaults to false.
			</remarks>
    </member>
        
    <member name="P:ShinobiCharts.SChartSeries.TogglePointSelection">
      <summary>Dictates whether the series should only allow only one selected point at a time.
      </summary>
		<remarks>
				If this is set to false, the series will de-select all other points in this series before selecting the tapped point.
				Setting true will allow multiple points to be selected ("toggled") as they are tapped.
				NOTE: This is per series and will allow multiple points to be selected across series regardless of value.
				To enable single point selection across all of the series for the chart, use the chart delegate.
				Defaults to false.
		</remarks>
    </member>
        
    <member name="P:ShinobiCharts.SChartSeries.Selected">
      <summary> Whether or not the series is Selected 
      </summary>
	  <remarks></remarks>
    </member>
        
    <member name="P:ShinobiCharts.SChartSeries.CrosshairEnabled">
      <summary>Display a tooltip with connecting lines after the user taps-and-holds.
      </summary>
		<remarks> For line series, the Tooltip will appear on the nearest series and interpolate values between data points. For column/bar series the Crosshair will snap to the nearest column. 
				  Once a Crosshair is visible - it is locked to that current series. It will ignore other series until it is dismissed and re-established on a different series. To dismiss the Crosshair 
				  the user must perform a single tap on the chart. 
		</remarks>
    </member>
        
    <member name="P:ShinobiCharts.SChartSeries.Style">
      <summary>Manages the appearance of the chart series on the chart.
      </summary>
		<remarks>The default settings of the style are inherited from the chart theme.
				You can tweak the appearance of the series by modifying the style.
	  </remarks>
    </member>
        
    <member name="P:ShinobiCharts.SChartSeries.SelectedStyle">
      <summary>Manages the appearance of the chart series when it is selected.
      </summary>
		<remarks>
				Style settings in this object will be applied when the series is marked as selected (or a point is selected).
				The default settings of the style are inherited from the chart theme.
				You can tweak the appearance of the series by modifying the style.
			</remarks>
    </member>
        
    <member name="P:ShinobiCharts.SChartSeries.Title">
      <summary> The title of the series to be displayed in the Legend. 
      </summary>
		<remarks></remarks>
    </member>
        
    <member name="P:ShinobiCharts.SChartSeries.ShowInLegend">
      <summary> Whether or not the series should be represented in the Legend. 
      </summary>
		<remarks></remarks>
    </member>

		<member name="P:ShinobiCharts.SChartSeries.LegendItem">
			<summary>
				The object responsible for providing the title and <c>SChartLegendSymbol</c> item for representing this
				symbol in the legend.
			</summary>
			<remarks>
				By default, this is set to the series itself.
			</remarks>
		</member>

    <member name="M:ShinobiCharts.SChartSeries.ShouldBeDrawn">
      <summary>DEPRECATED - Use <see cref="P:ShinobiCharts.SChartSeries.Hidden"/> instead.</summary>
	  <remarks></remarks>
    </member>
        
    <member name="P:ShinobiCharts.SChartSeries.XValueKeys">
      <summary>Used for data points which contain multiple values (e.g. OHLC data points).
      </summary>
	  <remarks>
				Returns the keys for the x values of the data point.
			</remarks>
    </member>
        
    <member name="P:ShinobiCharts.SChartSeries.YValueKeys">
      <summary>Used for data points which contain multiple values (e.g. OHLC data points).
      </summary>
	  <remarks>
				Returns the keys for the y values of the data point.
			</remarks>
    </member>
        
    <member name="P:ShinobiCharts.SChartSeries.Hidden">
      <summary>Dictates whether or not a series is hidden on the chart.</summary>
	  <remarks> If the Hidden property of a chart series is set to true, then the series will not be drawn on the chart.
 If this property is set to false, the series will be drawn as usual.  The default setting is false</remarks>
    </member>
        
    <member name="P:ShinobiCharts.SChartSeries.EntryAnimation">
      <summary>The animation which describes how the series will enter the chart.</summary>
	  <remarks>The chart series will enter when the chart is first drawn, or when its hidden property is set to false (having previously been true).
 See <see cref="T:ShinobiCharts.SChartAnimation"/> for more details.</remarks>
    </member>
        
    <member name="P:ShinobiCharts.SChartSeries.ExitAnimation">
      <summary>The animation which describes how the series will exit the chart.</summary>
	  <remarks>The chart series will exit the chart when its hidden property is set to true (having previously been false).
 See <see cref="T:ShinobiCharts.SChartAnimation"/> for more details.</remarks>
    </member>
        
    <member name="P:ShinobiCharts.SChartSeries.AnimationEnabled">
      <summary>Whether entry and exit animations are enabled for this series.</summary>
	  <remarks>
				If this is set to <c>true</c>, the series will animate in and out using its entryAnimation and exitAnimation
				animation properties.
				If this is set to <c>false</c>, the series will appear and disappear instantly, with no animation.
				The default is <c>false</c> - animation disabled.
			</remarks>
    </member>
        
    <member name="M:ShinobiCharts.SChartSeries.StringForSeries(ShinobiCharts.SChartDataPoint,ShinobiCharts.ShinobiChart)">
      <summary>
      </summary>
	  <param name="dataPoint"></param>
	  <param name="chart"></param>
	  <remarks></remarks>
    </member>
        
    <member name="M:ShinobiCharts.SChartSeries.ApplyStyles(ShinobiCharts.SChartTheme,System.UInt32,System.Boolean)">
      <summary>
      </summary>
	  <remarks></remarks>
	  <param name="theme"></param>
	  <param name="seriesIndex"></param>
	  <param name="preserveValues"></param>
    </member>
        
    <member name="M:ShinobiCharts.SChartSeries.ThemeStyleSelector">
      <summary>
      </summary>
	  <remarks></remarks>
	  <returns></returns>
    </member>

	<member name="M:ShinobiCharts.SChartSeries.Dispose(System.Boolean)">
      <summary> Releases unmanaged resources.
      </summary>
	  <remarks></remarks>
	  <param name="disposing">True if called by Dispose, false if called from a finalizer</param>
    </member>

		<member name="M:ShinobiCharts.SChartSeries.StringFor(System.String,ShinobiCharts.SChartData,ShinobiCharts.SChartAxis)">
			<summary>
				This method returns a string value that will represent the value of a given data point based on its key.
			</summary>
			<remarks>
				This relies on the data point responding to the appropriate optional method (<see cref="M:ShinobiCharts.SChartData.GetValue(System.String)" />,
				<see cref="M:ShinobiCharts.SChartData.GetXValue(System.String)" /> or <see cref="M:ShinobiCharts.SChartData.GetYValue(System.String)" />).
			</remarks>
			<param name="key">The key that corresponds to the value needing a string representation.</param>
			<param name="dataPoint">The data point that the value corresponds to.</param>
			<param name="axis">The axis that the value corresponds to, where null represents an axis independent value.</param>
			<returns>A string that will be used to represent a value for a data point.</returns>
		</member>
		
		<member name="M:ShinobiCharts.SChartSeries.StringFor(System.String,ShinobiCharts.SChartData)">
			<summary>
				This method returns a string value that will represent the key of a given datapoint.
			</summary>
			<remarks>
				<para>
					The multi value tooltip uses this method to decide what string to use in its labels for the key of a given datapoint.
				</para>
			</remarks>
			<param name="key">The key that needs a string representation.</param>
			<param name="dataPoint">The data point that the key corresponds to.</param>
			<returns>A string that will be used to represent the given key for a data point.</returns>
		</member>
		
		<member name="P:ShinobiCharts.SChartSeries.ValueKeys">
			<summary>
				Used for data points which contain values that are independent of axes (e.g. Bubble data points).
			</summary>
			<remarks>
				<para>
					Returns the keys for the axis independent values of the data point.
				</para>
			</remarks>
		</member>
		
		<member name="P:ShinobiCharts.SChartSeries.ComparatorForValueKeys">
			<summary>
				If the chart ever needs to know about the order in which the value-keys belonging to this series should be
				used then this method is called for an appropriate comparator.
			</summary>
			<remarks>
				<para>
					For example, an SChartCrosshairMultiValueTooltip needs to know the order in which to display its
					dictionary of key-value pairs.
				</para>
			</remarks>
		</member>
		
		<member name="M:ShinobiCharts.SChartSeries.CentreXOfDataPoint(System.Int32,ShinobiCharts.ShinobiChart)">
			<summary>
				Returns, in data terms, the x component of the point upon which the datapoint at the given index is centered.
			</summary>
		</member>
		
		<member name="M:ShinobiCharts.SChartSeries.CentreYOfDataPoint(System.Int32,ShinobiCharts.ShinobiChart)">
			<summary>
				Returns, in data terms, the y component of the point upon which the datapoint at the given index is centered.
			</summary>
		</member>
		
		<member name="M:ShinobiCharts.SChartSeries.WidthOfDataPoint(System.Int32,ShinobiCharts.ShinobiChart)">
			<summary>Returns the width, in data terms, of the datapoint at the given index.
			</summary>
		</member>
		
		<member name="M:ShinobiCharts.SChartSeries.HeightOfDataPoint(System.Int32,ShinobiCharts.ShinobiChart)">
			<summary>Returns the width, in data terms, of the datapoint at the given index.
			</summary>
		</member>

		<member name="M:ShinobiCharts.SChartSeries.ResetForReuse">
			<summary>Resets the chart series for reuse when the data in the chart is reloaded.</summary>
			<remarks>
				<para>
					By default, this clears the data points in the chart series, while leaving the styling, animation and any other series properties intact.
					If you subclass SChartSeries, you should add any custom implementation you require to the subclass.
				</para>
			</remarks>
		</member>


    <member name="T:ShinobiCharts.ShinobiChart">
      <summary>
			A ShinobiChart displays data arranged in either cartesian or radial series. 
      </summary>
		<remarks>
			<para>A ShinobiChart will display its cartesian series (line, column, bar, scatter) if a cartesian series is added to it first, or all its radial series (donuts, pies) if a radial series is added to it first. If a radial series is added to a 'cartesian chart' or vice versa, a warning will be issued and that series discarded.
			 </para>
			<para>Data is always represented in a series or a set of series. The SChartSeries determines the look and Style of the data contained in a SChartDataSeries. There is a one-to-one relationship between a chart series and the data series it represents. 
			 </para>
			<para>A chart must have a minimum of one x-axis and one y-axis to display cartesian series, however, these will be automatically generated if none are specified. 
			 </para>
			<para>A ShinobiChart must have an object that acts as the data source to display any data. The data source must be a subclass of <see cref="T:ShinobiCharts.SChartDataSource"/>. The data source provides the information needed by the chart to construct the series and represent the data.  Series are identified by an index integer by the data source. 
			 </para>
			<para>A ShinobiChart may have an object that acts as a delegate, to handle user interaction and various other functions. The Delegate must be a subclass of <see cref="T:ShinobiCharts.SChartDelegate"/>.  
			 </para>
			<para>The ShinobiChart is a subclass of UIView,  and as such it can be added to other parent views or set as the root view of a view controller. 
			 </para>
			<para>A ShinobiChart will only update to reflect any changes to data when the ReloadData method is called. 
					</para>
			</remarks>
    </member>
		
		<member name="M:ShinobiCharts.ShinobiChart.#ctor(System.Drawing.RectangleF)">
			<summary>
				Initialise a chart object with a specified frame.
			</summary>
			<remarks>
				As we haven't specified a theme, the default one is used.
				This is SChartLightTheme.
			</remarks>
			<param name="frame">The frame to give to the new chart.</param>
			<returns>
				An initialized chart object or <c>null</c> if the chart couldn't be created.
			</returns>
		</member>
        
		<member name="M:ShinobiCharts.ShinobiChart.#ctor(System.Drawing.RectangleF,ShinobiCharts.SChartTheme)">
			<summary>
				Initialise the chart object with the specified frame and the specified theme.
			</summary>
			<remarks></remarks>
			<param name="frame">The frame to give the new chart.</param>
			<param name="theme">The theme to use to style the new chart.</param>
			<returns>
				An initialized chart object or <c>null</c> if the chart couldn't be created.
			</returns>
		</member>
        
		<member name="M:ShinobiCharts.ShinobiChart.#ctor(System.Drawing.RectangleF,ShinobiCharts.SChartAxisType,ShinobiCharts.SChartAxisType)">
			<summary>
				Initialise the chart object with the specified frame and axes (XAxisType, YAxisType).
			</summary>
			<remarks>
				As we haven't specified a theme, the default one is used.
				This is SChartLightTheme.
				In this method, we specify the types of axes which we would like on our chart.
				The init method will create an axis of this type, and set it as the primary axis on the chart.
				The chart will contain one x axis and one y axis when it is created.
				We can then add more axes if required.
			</remarks>
			<param name="frame">The frame to give the new chart.</param>
			<param name="xAxisType">The type of the primary x axis on the chart.</param>
			<param name="yAxisType">The type of the primary y axis on the chart.</param>
			<returns>
				An initialized chart object or <c>null</c> if the chart couldn't be created.
			</returns>
		</member>
        
		<member name="M:ShinobiCharts.ShinobiChart.#ctor(System.Drawing.RectangleF,ShinobiCharts.SChartTheme,ShinobiCharts.SChartAxisType,ShinobiCharts.SChartAxisType)">
			<summary>
				Initialise the chart object with the specified frame, theme and axes.
			</summary>
			<remarks>
				In this method, we specify the types of axes which we would like on our chart.
				The init method will create an axis of this type, and set it as the primary axis on the chart.
				The chart will contain one x axis and one y axis when it is created.
				We can then add more axes if required.
			</remarks>
			<param name="frame">The frame to give the new chart.</param>
			<param name="theme">The theme to use to style the chart.</param>
			<param name="xAxisType">The type of the primary x axis on the chart.</param>
			<param name="yAxisType">The type of the primary y axis on the chart.</param>
			<returns>
				An initialized chart object or <c>null</c> if the chart couldn't be created.
			</returns>
		</member>
		
	<member name="M:ShinobiCharts.ShinobiChart.#ctor(MonoTouch.Foundation.NSCoder)">
      <summary>A constructor that initializes the object from the data stored in the unarchiver object.
      </summary>
	  <remarks>This constructor is provided to allow the class to be initialized from an unarchiver (for example, during NIB deserialization).</remarks>
	  <param name="coder">The unarchiver object</param>
    </member>
        
    <member name="M:ShinobiCharts.ShinobiChart.#ctor(MonoTouch.Foundation.NSObjectFlag)">
      <summary>Constructor to call on derived classes to skip initialization and merely allocate the object.
      </summary>
	  <remarks>You should not invoke this method directly.</remarks>
	  <param name="t">Unused sentinel value</param>
    </member>
		
	<member name="M:ShinobiCharts.ShinobiChart.#ctor(System.IntPtr)">
      <summary>A constructor used when creating managed representations of unmanaged objects.
      </summary>
	  <remarks>You should not invoke this method directly.</remarks>
	  <param name="handle">Handle of the unmanaged object</param>
    </member>
        
	<member name="P:ShinobiCharts.ShinobiChart.ClassHandle">
        <summary>
        The handle for this class.
        </summary>
	  <remarks>Not normally used by application code</remarks>
    </member>	
        
	<member name="M:ShinobiCharts.ShinobiChart.Dispose(System.Boolean)">
      <summary> Releases unmanaged resources.
      </summary>
	  <remarks></remarks>
	  <param name="disposing">True if called by Dispose, false if called from a finalizer</param>
    </member>

    <member name="P:ShinobiCharts.ShinobiChart.Logger">
      <summary>
      </summary>
		<remarks></remarks>
    </member>
        
		<member name="P:ShinobiCharts.ShinobiChart.Delegate">
			<summary>
				An object you may provide to accept notifications from the chart.
			</summary>
			<remarks>
				The SChartDelegate protocol provides the chart with a target to relay events to, such as when
				the user is zooming or other touch events.
				Objects that act as a delegate to the ShinobiChart can use these notifications to synchronise
				other charts or update objects with the current status of this chart.
			</remarks>
		</member>
        
		<member name="P:ShinobiCharts.ShinobiChart.DataSource">
			<summary>
				An object you must provide to supply the chart with data.
			</summary>
			<remarks>
				The data source provides the chart with the information it needs to construct the chart object.
				In general, styling and event response is handled by objects implementing the SChartDelegate protocol -
				the data source has minimal impact on the look and feel of the chart.
			</remarks>
		</member>
        
		<member name="P:ShinobiCharts.ShinobiChart.LicenseKey">
			<summary>
				The license key for this chart (Used for trial versions only).
			</summary>
			<remarks>
				In trial versions of a chart, a valid license key must be set before the chart will render.
				When you download a trial version of ShinobiCharts, you will also receive an email containing the license key.
			</remarks>
		</member>
		
		<member name="P:ShinobiCharts.ShinobiChart.XAxis">
			<summary>
				The primary x-axis for this chart. 
			</summary>
			<remarks>
				The chart contains an array of x axes, as different series on the chart could use different axes.
				The primary axis is the main one used by the chart.
				If you haven't explicitly specified which axis is the primary one, this will be automatically generated by the chart.
			</remarks>
		</member>
		
		<member name="P:ShinobiCharts.ShinobiChart.YAxis">
			<summary> The primary y-axis for this chart. 
			</summary>
			<remarks>
				The chart contains an array of y axes, as different series on the chart could use different axes.
				The primary axis is the main one used by the chart.
				If you haven't explicitly specified which axis is the primary one, this will be automatically generated by the chart.
			</remarks>
		</member>
		
		<member name="P:ShinobiCharts.ShinobiChart.AutoCalculateAxisRanges">
			<summary>
				Specifies whether the chart auto-calculates its axis ranges when it reloads its data.
			</summary>
			<remarks>
				This defaults to <c>true</c>.
			</remarks>
		</member>

		<member name="P:ShinobiCharts.ShinobiChart.ChartSeries">
			<summary>
				DEPRECATED - Use Series instead.
			</summary>
			<remarks></remarks>
		</member>
		
		<member name="P:ShinobiCharts.ShinobiChart.Series">
			<summary>
				A readonly array of the SChartSeries objects displayed on the chart.
			</summary>
			<remarks>
				<para>
					Series are provided to the chart by its data source.
					Once it has pulled them in from the data source and rendered them, you can query the series on the chart via this property.
				</para><para>
					Modifying the data points in any of these series will have no effect on the data rendered in the chart.
					To update it, update the chart data source, and then call ReloadData on the chart.
				</para><para>
					If you are reloading the data in your chart asynchronously, you will want to be notified when new data has loaded,
					as this will affect the series on the chart.
					To do this, you should implement the SChartDelegate protocol, and use the
					<see cref="M:ShinobiCharts.SChartDelegate.OnWillStartLoadingData(ShinobiCharts.ShinobiChart)" /> and the
					<see cref="M:ShinobiCharts.SChartDelegate.OnDidFinishLoadingData(ShinobiCharts.ShinobiChart)" /> methods.
				</para>
			</remarks>
		</member>
		
		<member name="P:ShinobiCharts.ShinobiChart.Title">
			<summary>
				Sets the text value of the chart title and displays in the standard position.
			</summary>
			<remarks>
				See also <see cref= "P:ShinobiCharts.ShinobiChart.TitleLabel"/> for the property representing the actual SChartTitle object.
			</remarks>
		</member>
        
		<member name="P:ShinobiCharts.ShinobiChart.TitleLabel">
			<summary>
				The title for the chart.
			</summary>
			<remarks>
				This object is created and automatically handled through the <see cref="P:ShinobiCharts.ShinobiChart.Title"/> property. 
				However, modifying this object will give greater control over the Title attributes.
			</remarks>
		</member>
        
    <member name="P:ShinobiCharts.ShinobiChart.OverlapChartTitle">
      <summary> A Boolean to indicate if the chart title label should reserve space at the top of the chart or overlap the Canvas.
      </summary>
	<remarks>
			Setting this attribute to true will allow the UILabel to appear over the chart plot area. 
			Setting it to false will push the <see cref="T:ShinobiChart.SChartCanvas"/> area down and reserve space obove the chart plots for the title. 
	</remarks>	
    </member>
        
    <member name="P:ShinobiCharts.ShinobiChart.DefaultTitleWidth">
      <summary>
      </summary>
		<remarks></remarks>
    </member>
        
    <member name="P:ShinobiCharts.ShinobiChart.TitleWidthModifier">
      <summary>
      </summary>
		<remarks></remarks>
    </member>
        
    <member name="P:ShinobiCharts.ShinobiChart.Legend">
      <summary> 
				The object that represents the chart's Legend.
      </summary>
		<remarks></remarks>
    </member>

		<member name="P:ShinobiCharts.ShinobiChart.OverlapChartTitle">
			<summary>
				A bool to indicate if the chart title label should reserve space at the top of the chart or overlap the canvas.
			</summary>
			<remarks>
				Setting this attribute to <c>true</c> will allow the UILabel to appear over the chart plot area. Setting
				it to <c>false</c> will push the canvas area down and reserve space obove the chart plots for the title.
				<c>CalculateTargetBounds</c> controls the space reserved for chart objects outside of the canvas area.
			</remarks>
		</member>
		
		<member name="P:ShinobiCharts.ShinobiChart.TitleCentresOn">
			<summary>
				Whether the chart centers on the full chart view, the plot area, or the canvas.
			</summary>
			<remarks></remarks>
		</member>
		
		<member name="P:ShinobiCharts.ShinobiChart.TitlePosition">
			<summary>
				Where the title will appear relative to the chart
			</summary>
			<remarks></remarks>
		</member>

		<member name="P:ShinobiCharts.ShinobiChart.Theme">
			<summary>
				DEPRECATED - Use <see cref="M:ShinobiCharts.ShinobiChart.ApplyTheme(ShinobiCharts.SChartTheme)" /> instead.
			</summary>
			<remarks>
				The general styling configuration for the whole chart.
			</remarks>
		</member>
		
		<member name="M:ShinobiCharts.ShinobiChart.ApplyTheme(ShinobiCharts.SChartTheme)">
			<summary>
				Applies a theme to the chart.
			</summary>
			<remarks>
				<para>
					A ShinobiChart will take all of its UI configuration - colors, line thicknesses, etc - from the
					SChartTheme object. The chart can be initially created with a theme - see
					<see cref="C:ShinobiCharts.ShinobiChart(System.Drawing.RectangleF,ShinobiCharts.SChartTheme)" />.
					If a theme is not explicitly set on a chart, an instance of SChartLightTheme will be applied by default
					on charts running on versions of iOS prior to iOS 7, otherwise an instance of SChartiOS7Theme will be
					applied.
				</para><para>
					This method applies the styling properties of the given theme to the chart, overwriting any changes which
					you have made to sub-objects on the chart.
					After this, changes made to individual objects will have precendence - for example setting the series color
					in the data source. To reset the styling configuration on a chart to a theme, alloc a new theme and call
					<see cref="M:ShinobiCharts.ShinobiChart.ApplyTheme(ShinobiCharts.SChartTheme)" /> - this will clear all
					styling configuration from the chart and set it to the theme defaults.
					<code>yourChart.ApplyTheme(new SChartiOS7Theme());</code>
				</para>
			</remarks>
		</member>
        
    <member name="P:ShinobiCharts.ShinobiChart.CanvasAreaBackgroundColor">
      <summary> The background Color of the Canvas area where the axis and plots are drawn.
      </summary>
	<remarks>
			This area does not include any titles and Legends etc. 
				To set the background Color of the whole chart area use SetBackgroundColor. Default value is clear.
	</remarks>
    </member>
        
		<member name="P:ShinobiCharts.ShinobiChart.PlotAreaBackgroundColor">
			<summary>
				The background Color of the plot area where the series are drawn.
			</summary>
			<remarks>
				To set the background Color of the whole chart area use BackgroundColor -
				also see <see cref="P:ShinobiCharts.ShinobiChart.CanvasAreaBackgroundColor"/>. 
				Default value is clear.
			</remarks>
		</member>
        
    <member name="P:ShinobiCharts.ShinobiChart.PlotAreaBorderColor">
      <summary> The Color of the border around the plot area where the series are drawn.
      </summary>
    <remarks>
 			To set the border Color of the whole chart area use <see cref="P:ShinobiCharts.ShinobiChart.BorderColor"/>. Default value is clear.
	</remarks>
	</member>
        
    <member name="P:ShinobiCharts.ShinobiChart.PlotAreaBorderThickness">
      <summary> The thickness of the border around the plot area where the series are drawn.
      </summary>
	<remarks>
 			To set the border thickness of the whole chart area use <see cref="P:ShinobiCharts.ShinobiChart.BorderThickness"/>. Default value is `1.0f`.
	</remarks>
    </member>
        
    <member name="P:ShinobiCharts.ShinobiChart.BorderColor">
      <summary> The color of the border around the chart view.
      </summary>
		<remarks> Default value is `ClearColor`.
		</remarks>
    </member>
        
    <member name="P:ShinobiCharts.ShinobiChart.BorderThickness">
      <summary> The thickness of the border chart view.
      </summary>
		<remarks> Default value is `1.0f`.
		</remarks>
    </member>
        
    <member name="P:ShinobiCharts.ShinobiChart.Crosshair">
      <summary> The object displayed after a tap-and-hold gesture on the chart
      </summary>
	<remarks>
		 The Crosshair will draw a target cirle with axis markers and also display a Tooltip. 
				To customize, subclass SChartCrosshair and set it to this parameter or subclass ajust the Tooltip. 
	</remarks>		
    </member>
        
		<member name="P:ShinobiCharts.ShinobiChart.GesturePanType">
			<summary>
				Set the method for zooming the chart.
			</summary>
			<remarks>
				<para>
					Defaults to PanPinch.
				</para>
				<para>
					The chart may be configured to use either pinch zoom gestures or the touch gestures can generate a box on the chart. 
					For box style zooming, the chart will animate the zoom level to display the area marked by the box. 
					To disable the pan gesture, set this property to None.
				</para>
			</remarks>
		</member>
       
		<member name="P:ShinobiCharts.ShinobiChart.GesturePinchAspectLock">
			<summary>
				When set to true all of the axis will zoom the same amount.
			</summary>
			<remarks>
				The chart will maintain its aspect ratio regardless of the type or orientation of gesture.
			</remarks>
		</member>
        
		<member name="P:ShinobiCharts.ShinobiChart.GesturePanCancelsCrosshair">
			<summary>
				When set to true the Crosshair will be dismissed if a pan gesture occurs.
			</summary>
			<remarks>
				DEPRECATED - use a crosshair subclass to achieve this instead.
			</remarks>
		</member>
		
		<member name="P:ShinobiCharts.ShinobiChart.GestureDoubleTapEnabled">
			<summary>
				Controls if double tap behaviour is enabled on the chart.
			</summary>
			<remarks>
				<para>
					When set to true the double-tap gesture is enabled, and its behaviour obeys the
					<see cref="P:ShinobiCharts.ShinobiChart.GestureDoubleTapResetsZoom"/> property.
					Otherwise, if set to false the chart's double tap gesture recognizer will be disabled.
				</para> 
				<para>
					Defaults to true.
				</para>
			</remarks>
		</member>
        
		<member name="P:ShinobiCharts.ShinobiChart.GestureDoubleTapResetsZoom">
			<summary>
				Controls if the chart will zoom out when double tapped.
			</summary>
			<remarks>
				<para>
					When set to true the double-tap gesture will reset the zoom level to default.
					Otherwise, if set to false the chart will zoom in  a set amount.
				</para>
				<para>
					Defaults to false.
				</para>
			</remarks>
		</member>
        
		<member name="P:ShinobiCharts.ShinobiChart.AnimateBoxGesture">
			<summary>
				When set to true the Zoom resulting from a box gesture will animate to the new Zoom level. 
			</summary>
			<remarks>
				This defaults to <c>true</c>.
			</remarks>
		</member>
        
		<member name="P:ShinobiCharts.ShinobiChart.AnimateZoomGesture">
			<summary>
				When set to true the Zoom resulting from a pinch gesture will animate to the new Zoom level. 
			</summary>
			<remarks>
				This defaults to <c>true</c>.
			</remarks>
		</member>
        
		<member name="P:ShinobiCharts.ShinobiChart.RadialTapEnabled">
			<summary>
				When set to true the radial chart's single tap gesture is enabled.
			</summary>
			<remarks>
				Otherwise, if set to false the radial chart's tap gesture recognizer will be disabled.
				Defaults to true.
			</remarks>
		</member>
		
		<member name="P:ShinobiCharts.ShinobiChart.RadialRotationEnabled">
			<summary>
				When set to true the radial chart's rotation gesture is enabled.
			</summary>
			<remarks>
				<para>
					Otherwise, if set to false the radial chart's rotation gesture recognizer will be disabled.
					Defaults to true.
				</para>
				<para>
					In order for radial series to respond to rotation gestures, they must also have their GesturePanningEnabled
					property set to <c>true</c>.
					See <see cref="T:ShinobiCharts.SChartDonutSeries" /> for documentation on this property.
				</para>
			</remarks>
		</member>
        
		<member name="P:ShinobiCharts.ShinobiChart.Canvas">
			<summary>
				A reference to the canvas object of the chart.
			</summary>
			<remarks>
				The chart canvas is responsible for drawing all of the axes and series on a chart.
			</remarks>
		</member>
        
    <member name="M:ShinobiCharts.ShinobiChart.AllChartSeries">
      <summary> Every series associated with this chart through the data source. 
      </summary>
		<remarks></remarks>
    </member>
        
    <member name="P:ShinobiCharts.ShinobiChart.ChartFrame">
      <summary> The frame that contains the whole chart object 
      </summary>
		<remarks></remarks>
    </member>
        
		<member name="P:ShinobiCharts.ShinobiChart.GLFrame">
			<summary>
				The area rendered by the openGL functions - Deprecated
			</summary>
			<remarks>
				Use <see cref="P:ShinobiCharts.ShinobiChart.PlotAreaFrame" /> instead.
			</remarks>
		</member>
		
		<member name="P:ShinobiCharts.ShinobiChart.PlotAreaFrame">
			<summary>
				The frame of the plot area in the coordinate system of the chart view.
			</summary>
			<remarks>
				This is the area in which your data is visualised in series.
				This area does not usually contain the chart title, legend, axes or axis titles, or any tickmarks or
				ticklabels unless they are explicitly positioned inside the plot area.
			</remarks>
		</member>
        
    <member name="P:ShinobiCharts.ShinobiChart.ChartBackgroundColor">
      <summary> Background Color of the chart view 
      </summary>
		<remarks></remarks>
    </member>
        
    <member name="P:ShinobiCharts.ShinobiChart.PlotBackgroundColor">
      <summary> Background colour of the plot area - ie: the area inside the axis. 
      </summary>
		<remarks></remarks>
    </member>
        
		<member name="M:ShinobiCharts.ShinobiChart.PositionLegend">
			<summary>
				Tells the chart to reposition its legend.
			</summary>
			<remarks>
				The chart legend is an instance of SChartLegend.
				The chart uses the value of its position property to position the legend on its canvas.
			</remarks>
		</member>
        
		<member name="M:ShinobiCharts.ShinobiChart.RedrawChart">
			<summary>
				Tells the chart to redraw itself.
			</summary>
			<remarks>
				The chart is redrawn during the next draw cycle.
			</remarks>
		</member>
        
		<member name="M:ShinobiCharts.ShinobiChart.SetNeedsLayoutIfHaveAxesAndData">
			<summary>
				Tells the chart to redraw itself, as long as it has basic componenents.
			</summary>
			<remarks>
				If the chart is radial, it doesn't need to have any axes set in order to redraw.
			</remarks>
		</member>
        
    <member name="M:ShinobiCharts.ShinobiChart.XAxis">
      <summary> 
				The primary X axis object for this chart 
      </summary>
		<remarks></remarks>
    </member>
        
    <member name="M:ShinobiCharts.ShinobiChart.YAxis">
      <summary> 
				The primary Y axis object for this chart 
      </summary>
		<remarks></remarks>
    </member>
        
    <member name="M:ShinobiCharts.ShinobiChart.Delegate">
      <summary> 
				The object assigned as the chart Delegate 
      </summary>
		<remarks></remarks>
    </member>
        
	    <member name="P:ShinobiCharts.ShinobiChart.WeakDelegate">
	      <summary> The object that acts as the delegate of the receiving ShinobiChart object.</summary>
		  <remarks>The delegate may be of any type, but should implement the whatever methods you require from those defined in SChartDelegate. 
		  They should also be attributed with the Monotouch.Foundation.Export attribute, using the Objective C selector names listed in  the detailed API documentation for each method. The delegate is not retained.</remarks>
	    </member>
	        
		<member name="M:ShinobiCharts.ShinobiChart.StringFor(System.Double,System.Double)">
			<summary>
				Returns a string that represents the specified x and y values.
			</summary>
			<remarks>
				A primary use case for this method is to generate text for the crosshair.
			</remarks>
			<param name="x">The specified x value.</param>
			<param name="y">The specified y value.</param>
		</member>
        
    <member name="P:ShinobiCharts.ShinobiChart.Chart">
      <summary> A reference to the chart object 
      </summary>
		<remarks></remarks>
    </member>

		<member name="M:ShinobiCharts.ShinobiChart.GetCanvas">
			<summary>
				A reference to the canvas object of the chart.
			</summary>
			<remarks>
				The chart canvas is responsible for drawing all of the axes and series on a chart.
			</remarks>
		</member>
        
		<member name="M:ShinobiCharts.ShinobiChart.AxisPanningChanged">
			<summary>
				Refreshes whether panning is enabled on the chart canvas.
			</summary>
			<remarks>
				It is called whenever the enableGesturePanning property is changed on any of the axes associated with the chart.
				See <see cref="T:ShinobiCharts.SChartAxis" /> and <see cref="T:ShinobiCharts.SChartCanvas" />.
			</remarks>
		</member>
        
		<member name="M:ShinobiCharts.ShinobiChart.AddXAxis(ShinobiCharts.SChartAxis)">
			<summary>
				Adds an X-Axis for the chart.
			</summary>
			<remarks></remarks>
			<param name="newXAxis">The new x axis which will be added to the chart.</param>
		</member>
        
		<member name="M:ShinobiCharts.ShinobiChart.AddYAxis(ShinobiCharts.SChartAxis)">
			<summary>
				Adds a Y-Axis for the chart.
			</summary>
			<remarks></remarks>
			<param name="newYAxis">The new y axis which will be added to the chart.</param>
		</member>
        
		<member name="M:ShinobiCharts.ShinobiChart.RemoveXAxis(ShinobiCharts.SChartAxis)">
			<summary>
				Removes an X-Axis from the chart.
			</summary>
			<remarks>
				If this is the only x axis on the chart, it won't be removed.
			</remarks>
			<param name="xAxis">The axis which will be removed from the chart.</param>
		</member>
		
		<member name="M:ShinobiCharts.ShinobiChart.RemoveYAxis(ShinobiCharts.SChartAxis)">
			<summary>
				Removes a Y-Axis from the chart.
			</summary>
			<remarks>
				If this is the only y axis on the chart, it won't be removed.
			</remarks>
			<param name="yAxis">The axis which will be removed from the chart.</param>
		</member>
        
		<member name="M:ShinobiCharts.ShinobiChart.ReplaceXAxis(ShinobiCharts.SChartAxis,ShinobiCharts.SChartAxis)">
			<summary>
				Replaces a X-Axis on the chart.
			</summary>
			<remarks></remarks>
			<param name="oldXAxis">The axis which will be replaced.</param>
			<param name="newXAxis">The axis which will replace it.</param>
		</member>
		
		<member name="M:ShinobiCharts.ShinobiChart.ReplaceYAxis(ShinobiCharts.SChartAxis,ShinobiCharts.SChartAxis)">
			<summary>
				Replaces a Y-Axis on the chart.
			</summary>
			<remarks></remarks>
			<param name="oldXAxis">The axis which will be replaced.</param>
			<param name="newXAxis">The axis which will replace it.</param>
		</member>
        
		<member name="P:ShinobiCharts.ShinobiChart.AllAxes">
			<summary>
				All axes associated with this chart.
			</summary>
			<remarks>
				A chart can contain multiple x and y axes, if the series on the chart use different axes.
			</remarks>
			<returns>
				An array containing all the axes associated with this chart.
				The x axes will be first in the array, followed by the y axes.
			</returns>
		</member>
        
		<member name="P:ShinobiCharts.ShinobiChart.PrimaryAxes">
			<summary>
				All Primary axes associated with this chart 
			</summary>
			<remarks>
				A chart can contain multiple x and y axes, if the series on the chart use different axes.
				A chart will always have one primary x axis, and one primary y axis, unless it is radial.
			</remarks>
			<returns>
				An array containing the primary axes associated with the chart.
				The array will contain the primary x axis, followed by the primary y axis.
			</returns>
		</member>
		
		<member name="P:ShinobiCharts.ShinobiChart.SecondaryAxes">
			<summary>
				All Secondary axes associated with this chart 
			</summary>
			<remarks>
				A chart can contain multiple x and y axes, if the series on the chart use different axes.
				A chart will always have one primary x axis, and one primary y axis, unless it is radial.
				All the other axes on the chart are regarded as secondary.
			</remarks>
			<returns>
				An array containing the secondary axes associated with the chart.
				The array will contain the secondary x axes, followed by the secondary y axes.
			</returns>
		</member>
        
		<member name="P:ShinobiCharts.ShinobiChart.AllXAxes">
			<summary>
				All X axes associated with this chart.
			</summary>
			<remarks>
				A chart can contain multiple x axes, if the series on the chart use different axes.
				A chart will always have one primary x axis, unless it is radial.
			</remarks>
			<returns>
				An array containing all the x axes associated with the chart.
				The primary axis will be the first one in the array.
			</returns>
		</member>
		
		<member name="P:ShinobiCharts.ShinobiChart.AllYAxes">
			<summary>
				All Y axes associated with this chart.
			</summary>
			<remarks>
				A chart can contain multiple x axes, if the series on the chart use different axes.
				A chart will always have one primary x axis, unless it is radial.
			</remarks>
			<returns>
				An array containing all the x axes associated with the chart.
				The primary axis will be the first one in the array.
			</returns>
		</member>
        
		<member name="P:ShinobiCharts.ShinobiChart.SecondaryXAxes">
			<summary>
				All secondary X axes associated with this chart.
			</summary>
			<remarks>
				A chart can contain multiple x axes, if the series on the chart use different axes.
				A chart will always have one primary x axis, unless it is radial.
				All the other axes on the chart are regarded as secondary.
			</remarks>
			<returns>
				An array containing all the secondary x axes associated with the chart.
			</returns>
		</member>
		
		<member name="P:ShinobiCharts.ShinobiChart.SecondaryYAxes">
			<summary>
				All secondary Y axes associated with this chart.
			</summary>
			<remarks>
				A chart can contain multiple y axes, if the series on the chart use different axes.
				A chart will always have one primary y axis, unless it is radial.
				All the other axes on the chart are regarded as secondary.
			</remarks>
			<returns>
				An array containing all the secondary y axes associated with the chart.
			</returns>
		</member>
        
		<member name="P:ShinobiCharts.ShinobiChart.PrimaryXAxis">
			<summary>
				This chart's primary X Axis.
			</summary>
			<remarks>
				A chart can contain multiple x axes, if the series on the chart use different axes.
				A chart will always have one primary x axis, unless it is radial.
				See <see cref="P:ShinobiCharts.ShinobiChart.XAxis" />.
			</remarks>
		</member>
		
		<member name="P:ShinobiCharts.ShinobiChart.PrimaryYAxis">
			<summary>
				This chart's primary Y Axis.
			</summary>
			<remarks>
				A chart can contain multiple y axes, if the series on the chart use different axes.
				A chart will always have one primary y axis, unless it is radial.
				See <see cref="P:ShinobiCharts.ShinobiChart.YAxis" />.
			</remarks>
		</member>
		
		<member name="M:ShinobiCharts.ShinobiChart.ApplyTheme">
			<summary>
				DEPRECATED - Use <see cref="M:ShinobiCharts.ShinobiChart.ApplyTheme(ShinobiCharts.SChartTheme)" /> instead.
			</summary>
			<remarks>
				Apply the current chart theme to the chart.
			</remarks>
		</member>
        
		<member name="M:ShinobiCharts.ShinobiChart.ReloadData">
			<summary>
				Reloads the data points for the chart.
			</summary>
			<remarks>
				When the data provided by the data source changes, we use this method to tell the chart to reload.
				The data is reloaded during the next draw cycle.
				This method doesn't redraw the chart, for that you can call either <see cref="M:ShinobiCharts.ShinobiChart.RedrawChart" />
				or <see cref="M:ShinobiCharts.ShinobiChart.RedrawChartAndGL(System.Boolean)" /> after the data has been reloaded.
			</remarks>
		</member>
		
		<member name="P:ShinobiCharts.ShinobiChart.LoadDataInBackground">
			<summary>
				Controls if the chart will load its data on a background thread, or the main UI thread
			</summary>
			<remarks>
				This defaults to <c>false</c>.
				If the chart is loading its data asynchronously, it will pop up an activity indicator while the data is loading.
				See LoadingIndicator for more information on this.
			</remarks>
		</member>
		
		<member name="P:ShinobiCharts.ShinobiChart.LoadingIndicator">
			<summary>
				This view will be displayed whilst an asynchronous data reload is in progress.
			</summary>
			<remarks>
				By default it is a UIActivityIndicatorView, but can be assigned any UIView based class – such as an SEssentialsActivityIndicator,
				UIImageView etc.
				To support animation of the view, it may also conform to the SChartActivityIndicator protocol and implement it's animation methods.
			</remarks>
		</member>
		
    <member name="M:ShinobiCharts.ShinobiChart.UpdateCanvasSize">
      <summary> Update the Canvas to allow for axes, titles, and Legend. 
      </summary>
		<remarks></remarks>
    </member>
        
		<member name="M:ShinobiCharts.ShinobiChart.RedrawChartAndGL(System.Boolean)">
			<summary>
				DEPRECATED - See <see cref="M:ShinobiCharts.ShinobiChart.RedrawChart(System.Boolean)" />
			</summary>
			<remarks></remarks>
		</member>
		
		<member name="M:ShinobiCharts.ShinobiChart.RedrawChart(System.Boolean)">
			<summary>
				Tells the chart to redraw itself
			</summary>
			<remarks>
				<para>
					The chart will redraw itself during the next draw cycle.
					This does not affect the data in the chart.
					If the data provided by the data source has changed, then you should call ReloadData to refresh the data in the chart.
				</para>
			</remarks>
			<param name="includePlotArea"><c>true</c> if the chart needs to redraw the data for its series, which is done in the chart plot area.</param>
		</member>
		
		<member name="M:ShinobiCharts.ShinobiChart.StringFor(System.Double,System.Double,ShinobiCharts.SChartAxis,ShinobiCharts.SChartAxis)">
			<summary>
				Returns a string representing the given x and y double values on the specified chart axes.
			</summary>
			<remarks>
				<para>
					This method queries each axis for a string which represents the given value, then concatenates them together to give
					a single string.
					The x value is displayed before the y value.
				</para>
				<para>
					This method is commonly used for displaying the tooltip on the chart crosshair.
				</para>
			</remarks>
			<param name="fx">The value on the x axis.</param>
			<param name="fy">The value on the y axis.</param>
			<param name="xAxis">The x axis on the chart with which the x value is associated.</param>
			<param name="yAxis">The y axis on the chart with which the y value is associated.</param>
			<returns>
				A string representing the given x and y values on the specified chart axes.
			</returns>
		</member>
		
		<member name="M:ShinobiCharts.ShinobiChart.StringFor(System.Double,System.Double,ShinobiCharts.SChartSeries)">
			<summary>
				Returns a string representing the given x and y double values in the specified chart series
			</summary>
			<remarks>
				<para>
					This method queries the series for the string representation of the given x and y values.
					It then concatenates those strings together.
					The x value is displayed before the y value.
				</para>
				<para>
					This method is commonly used for displaying the tooltip on the chart crosshair.
				</para>
			</remarks>
			<param name="fx">The value on the x axis.</param>
			<param name="fy">The value on the y axis.</param>
			<param name="series">The chart series with which the values are associated</param>
			<returns>
				A string representing the given double values in the specified chart series.
			</returns>
		</member>
		
		<member name="M:ShinobiCharts.ShinobiChart.StringFor(MonoTouch.Foundation.NSObject,MonoTouch.Foundation.NSObject,ShinobiCharts.SChartSeries)">
			<summary>
				Returns a string representing the given x and y values in the specified chart series.
			</summary>
			<remarks>
				<para>
					This method queries the series for the string representation of the given x and y values.
					It then concatenates those strings together.
					The x value is displayed before the y value.
				</para>
				<para>
					This method is commonly used for displaying the tooltip on the chart crosshair.
				</para>
			</remarks>
			<param name="fx">The value on the x axis.</param>
			<param name="fy">The value on the y axis.</param>
			<param name="series">The chart series with which the values are associated.</param>
			<returns>
				A string representing the given values in the specified chart series.
			</returns>
		</member>
		
		<member name="M:ShinobiCharts.ShinobiChart.PointIsVisible(ShinobiCharts.SChartPoint,ShinobiCharts.SChartSeries)">
			<summary>
				Returns whether the specified chart point is currently visible on the chart.
			</summary>
			<remarks></remarks>
			<param name="point">The point of interest on the chart.</param>
			<param name="series">The chart series which contains the point.</param>
			<returns><c>true</c> if the specified point is visible on the chart.</returns>
		</member>
		
		<member name="M:ShinobiCharts.ShinobiChart.AddAnnotation(ShinobiCharts.SChartAnnotation)">
			<summary>
				Add an annotation view to be displayed on the chart plot area.
			</summary>
			<remarks>
				See <see cref="T:ShinobiCharts.SChartAnnotation" />.
			</remarks>
			<param name="newAnnotation">The new annotation to add to the chart.</param>
		</member>
		
		<member name="M:ShinobiCharts.ShinobiChart.ReplaceAnnotation(System.Int32,ShinobiCharts.SChartAnnotation)">
			<summary>
				Replace an annotation on the chart with a new one.
			</summary>
			<remarks>
				Annotations are held in a chart within an array.
				This method allows you to replace one of those annotations with the new one you have specified.
				See <see cref="T:ShinobiCharts.SChartAnnotation" />.
			</remarks>
			<param name="index">The index of the existing annotation within the array which the chart holds.</param>
			<param name="newAnnotation">The new annotation which you will replace it with.</param>
		</member>
		
		<member name="P:ShinobiCharts.ShinobiChart.Annotations">
			<summary>
				Get the current annotations on the chart.
			</summary>
			<remarks></remarks>
			<returns>An array containing all the annotations on the chart.</returns>
		</member>
		
		<member name="M:ShinobiCharts.ShinobiChart.RemoveAnnotation(ShinobiCharts.SChartAnnotation)">
			<summary>
				Remove an annotation from the chart.
			</summary>
			<remarks></remarks>
			<param name="annotation">The annotation to remove.</param>
		</member>
		
		<member name="M:ShinobiCharts.ShinobiChart.RemoveAllAnnotations">
			<summary>
				Remove all annotations from the chart.
			</summary>
			<remarks></remarks>
		</member>

		<member name="P:ShinobiCharts.ShinobiChart.Info">
			<summary>
				Returns a string describing the version of the Charts framework being used.
			</summary>
			<remarks>
				This includes a version number, the type of framework (Premium, Standard, or Trial) and the date upon which
				the version was released.
			</remarks>
		</member>

		<member name="P:ShinobiCharts.ShinobiChart.RotatesOnDeviceRotation">
			<summary>
				Defines whether the chart rotates when the device is rotated.
			</summary>
			<remarks>
				<para>
					If the view that contains the chart doesn't actually rotate for a device orientation,
					set this flag to <c>false</c> to prevent unnecessary fade out/in of the axes and the crosshair.
				</para>
				<para>
					This property defaults to <c>true</c>.
				</para>
			</remarks>
		</member>
		
		<member name="M:ShinobiCharts.ShinobiChart.AppendToEnd(System.Int32,System.Int32)">
			<summary>
				Notifies the chart that the specified number of data points are available to be appended to the end of
				the specified chart series.
			</summary>
			<remarks></remarks>
			<param name="numberOfDataPoints">The number of data points which are available to be appended to the end of the series.</param>
			<param name="seriesIndex">The index of the series which should append the new data.</param>
		</member>
		
		<member name="M:ShinobiCharts.ShinobiChart.RemoveFromStart(System.Int32,System.Int32)">
			<summary>
				Notifies the chart that the specified number of data points should be removed from the start of the specified chart series.
			</summary>
			<remarks></remarks>
			<param name="numberOfDataPoints">The number of data points which should be removed from the start of the series.</param>
			<param name="seriesIndex">The index of the series which should append the new data.</param>
		</member>
		
		
    <member name="T:ShinobiCharts.SChartInternalDataPoint">
      <summary> Internal data points 
      </summary>
		<remarks></remarks>
    </member>
		
    <member name="M:ShinobiCharts.SChartInternalDataPoint.#ctor">
      <summary>Default constructor
      </summary>
		<remarks></remarks>
    </member>
        
	<member name="M:ShinobiCharts.SChartInternalDataPoint.#ctor(MonoTouch.Foundation.NSCoder)">
      <summary>A constructor that initializes the object from the data stored in the unarchiver object.
      </summary>
	  <remarks>This constructor is provided to allow the class to be initialized from an unarchiver (for example, during NIB deserialization).</remarks>
	  <param name="coder">The unarchiver object</param>
    </member>
        
    <member name="M:ShinobiCharts.SChartInternalDataPoint.#ctor(MonoTouch.Foundation.NSObjectFlag)">
      <summary>Constructor to call on derived classes to skip initialization and merely allocate the object.
      </summary>
	  <remarks>You should not invoke this method directly.</remarks>
	  <param name="t">Unused sentinel value</param>
    </member>
		
	<member name="M:ShinobiCharts.SChartInternalDataPoint.#ctor(System.IntPtr)">
      <summary>A constructor used when creating managed representations of unmanaged objects.
      </summary>
	  <remarks>You should not invoke this method directly.</remarks>
	  <param name="handle">Handle of the unmanaged object</param>
    </member>
        
	<member name="M:ShinobiCharts.SChartInternalDataPoint.ConformsToProtocol(System.IntPtr)">
      <summary>Internal - checks whether this object conforms to a protocol.
      </summary>
	  <remarks>Not normally called from application code - used by the Shinobi framework.</remarks>
	  <param name="protocol">The protocol</param>
	  <returns>True if the object conforms to the protocol</returns>
    </member>

	<member name="P:ShinobiCharts.SChartInternalDataPoint.ClassHandle">
        <summary>
        The handle for this class.
        </summary>
	  <remarks>Not normally used by application code</remarks>
    </member>	

	<member name="M:ShinobiCharts.SChartInternalDataPoint.Dispose(System.Boolean)">
      <summary> Releases unmanaged resources.
      </summary>
	  <remarks></remarks>
	  <param name="disposing">True if called by Dispose, false if called from a finalizer</param>
    </member>

    <member name="P:ShinobiCharts.SChartInternalDataPoint.XValue">
      <summary> 
 				The x value for this data point 
      </summary>
		<remarks></remarks>
    </member>
        
    <member name="P:ShinobiCharts.SChartInternalDataPoint.YValue">
      <summary> 
				The y value for this data point 
      </summary>
		<remarks></remarks>
    </member>
        
    <member name="P:ShinobiCharts.SChartInternalDataPoint.XValues">
      <summary> X values by key for series that require multiple values. 
      </summary>
		<remarks></remarks>
    </member>
        
    <member name="P:ShinobiCharts.SChartInternalDataPoint.YValues">
      <summary> Y values by key for series that require multiple values. 
      </summary>
		<remarks></remarks>
    </member>
		
		<member name="P:ShinobiCharts.SChartInternalDataPoint.Values">
			<summary>Values by key for series that require values independent of axes.</summary>
			<remarks></remarks>
		</member>
        
    <member name="P:ShinobiCharts.SChartInternalDataPoint.Texture">
      <summary>
      </summary>
		<remarks></remarks>
    </member>
        
    <member name="P:ShinobiCharts.SChartInternalDataPoint.Radius">
      <summary>
      </summary>
		<remarks></remarks>
    </member>
        
    <member name="P:ShinobiCharts.SChartInternalDataPoint.InnerRadius">
      <summary>
      </summary>
		<remarks></remarks>
    </member>
        
    <member name="P:ShinobiCharts.SChartInternalDataPoint.XCoord">
      <summary> The x coordinate for this data point - calculate by the relevant axis.
      </summary>
		<remarks></remarks>
    </member>
        
    <member name="P:ShinobiCharts.SChartInternalDataPoint.YCoord">
      <summary> The y coordinate for this data point - calculate by the relevant axis. 
      </summary>
		<remarks></remarks>
    </member>
        
    <member name="P:ShinobiCharts.SChartInternalDataPoint.XCoords">
      <summary> X coordinates by key for series that require multiple values. 
      </summary>
		<remarks></remarks>
    </member>
        
    <member name="P:ShinobiCharts.SChartInternalDataPoint.YCoords">
      <summary> Y coordinates by key for series that require multiple values. 
      </summary>
		<remarks></remarks>
    </member>
        
    <member name="P:ShinobiCharts.SChartInternalDataPoint.Selected">
      <summary> Is this point Selected by a user. 
      </summary>
		<remarks></remarks>
    </member>
        
    <member name="M:ShinobiCharts.SChartInternalDataPoint.CompareXAsNumber(ShinobiCharts.SChartInternalDataPoint)">
      <summary>  Compare the X component values of these two internal data points.
      </summary>
	  <remarks></remarks>
	  <param name="dp"></param>
    </member>
       
    <member name="M:ShinobiCharts.SChartInternalDataPoint.CompareYAsNumber(ShinobiCharts.SChartInternalDataPoint)">
      <summary> Compare the Y component values of these two internal data points. 
      </summary>
	  <remarks></remarks>
	  <param name="dp"></param>
    </member>

    <member name="M:ShinobiCharts.SChartInternalDataPoint.GetExternalDatapointFromInternal(ShinobiCharts.SChartData,ShinobiCharts.SChartAxis,ShinobiCharts.SChartAxis)">
      <summary>Converts a data point
      </summary>
	  <remarks></remarks>
	  <param name="dataPoint"></param>
	  <param name="xAxis"></param>
	  <param name="yAxis"></param>
    </member>
		
      
    <member name="T:ShinobiCharts.SChartRange">
      <summary>Represents a range of values on a chart.
       </summary>
	  <remarks>
				It is used by the chart axes, which are defined in SChartAxis.
				SChartRange is the base class for the concrete range types which are available in ShinobiCharts.
				The concrete types are:
				<list type="bullet">
					<item><term>SChartNumberRange - represents numerical ranges.</term></item>
					<item><term>SChartDateRange - represents date/time ranges.</term></item>
				</list>
			</remarks>
    </member>
		
	<member name="M:ShinobiCharts.SChartRange.#ctor(MonoTouch.Foundation.NSCoder)">
      <summary>A constructor that initializes the object from the data stored in the unarchiver object.
      </summary>
	  <remarks>This constructor is provided to allow the class to be initialized from an unarchiver (for example, during NIB deserialization).</remarks>
	  <param name="coder">The unarchiver object</param>
    </member>
        
    <member name="M:ShinobiCharts.SChartRange.#ctor(MonoTouch.Foundation.NSObjectFlag)">
      <summary>Constructor to call on derived classes to skip initialization and merely allocate the object.
      </summary>
	  <remarks>You should not invoke this method directly.</remarks>
	  <param name="t">Unused sentinel value</param>
    </member>
		
	<member name="M:ShinobiCharts.SChartRange.#ctor(System.IntPtr)">
      <summary>A constructor used when creating managed representations of unmanaged objects.
      </summary>
	  <remarks>You should not invoke this method directly.</remarks>
	  <param name="handle">Handle of the unmanaged object</param>
    </member>

	<member name="M:ShinobiCharts.SChartRange.#ctor(MonoTouch.Foundation.NSNumber,MonoTouch.Foundation.NSNumber)">
      <summary>Initializes and returns a newly allocated range object, with the specified minimum and maximum values.
      </summary>
	  <remarks></remarks>
	  <param name="min">The minimum value of the new range.</param>
	  <param name="max">The maximum value of the new range.</param>
			<returns>An initialized range object, or null if the object couldn't be created.</returns>
    </member>
        
	<member name="P:ShinobiCharts.SChartRange.ClassHandle">
        <summary>
        The handle for this class.
        </summary>
	  <remarks>Not normally used by application code</remarks>
    </member>
        
	<member name="M:ShinobiCharts.SChartRange.Dispose(System.Boolean)">
      <summary> Releases unmanaged resources.
      </summary>
	  <remarks></remarks>
	  <param name="disposing">True if called by Dispose, false if called from a finalizer</param>
    </member>

    <member name="P:ShinobiCharts.SChartRange.Minimum">
      <summary>The minimum value of the range.
      </summary>
		<remarks></remarks>
    </member>
        
    <member name="P:ShinobiCharts.SChartRange.Maximum">
      <summary>The maximum value of the range.
      </summary>
		<remarks></remarks>
    </member>

    <member name="P:ShinobiCharts.SChartRange.Span">
      <summary>The difference between the maximum and the minimum of the range, as a NSNumber.
      </summary>
		<remarks></remarks>
    </member>
        
    <member name="M:ShinobiCharts.SChartRange.Clone(ShinobiCharts.SChartRange)">
      <summary>Copies the given range object, and returns the new range.
      </summary>
	  <remarks></remarks>
	  <param name="range">The range object to copy.</param>
	  <returns>The copy of the range object.</returns>
    </member>
        
		
    <member name="T:ShinobiCharts.SChartTickLabelFormatter">
      <summary> A wrapper object that contains an appropriate NSFormatter for the axes for which it is formatting tick labels.
      </summary>
	  <remarks>Instances of SChartDateTimeAxis and SChartNumberAxis (and subclasses thereof) are assigned a sensible SChartTickLabelFormatter when
 they are initialized. Set properties on the <see cref="P:ShinobiCharts.SChartTickLabelFormatter.Formatter"/> property to customise your formatting.
 You can also subclass SChartTickLabelFormatter and set your custom object to an axis to handle formatting.</remarks>
    </member>

    <member name="M:ShinobiCharts.SChartTickLabelFormatter.#ctor">
      <summary> Create a new tick label formatter.
      </summary>
	  <remarks></remarks>
    </member>
        
	<member name="M:ShinobiCharts.SChartTickLabelFormatter.#ctor(MonoTouch.Foundation.NSCoder)">
      <summary>A constructor that initializes the object from the data stored in the unarchiver object.
      </summary>
	  <remarks>This constructor is provided to allow the class to be initialized from an unarchiver (for example, during NIB deserialization).</remarks>
	  <param name="coder">The unarchiver object</param>
    </member>

    <member name="M:ShinobiCharts.SChartTickLabelFormatter.#ctor(MonoTouch.Foundation.NSObjectFlag)">
      <summary>Constructor to call on derived classes to skip initialization and merely allocate the object.
      </summary>
	  <remarks>You should not invoke this method directly.</remarks>
	  <param name="t">Unused sentinel value</param>
    </member>
		
	<member name="M:ShinobiCharts.SChartTickLabelFormatter.#ctor(System.IntPtr)">
      <summary>A constructor used when creating managed representations of unmanaged objects.
      </summary>
	  <remarks>You should not invoke this method directly.</remarks>
	  <param name="handle">Handle of the unmanaged object</param>
    </member>

	<member name="P:ShinobiCharts.SChartTickLabelFormatter.ClassHandle">
        <summary>
        The handle for this class.
        </summary>
	  <remarks>Not normally used by application code</remarks>
    </member>		
        
	<member name="M:ShinobiCharts.SChartTickLabelFormatter.Dispose(System.Boolean)">
      <summary> Releases unmanaged resources.
      </summary>
	  <remarks></remarks>
	  <param name="disposing">True if called by Dispose, false if called from a finalizer</param>
    </member>

    <member name="P:ShinobiCharts.SChartTickLabelFormatter.Formatter">
      <summary>The internal NSFormatter.
      </summary>
	  <remarks>Configure this object as you would an NSFormatter.</remarks>
    </member>
        
    <member name="P:ShinobiCharts.SChartTickLabelFormatter.NumberFormatter">
      <summary>Get the formatter property pre-cast as an NSNumberFormatter.
      </summary>
	  <remarks>If the formatter is not an NSNumberFormatter, null will be returned.</remarks>
    </member>
        
    <member name="P:ShinobiCharts.SChartTickLabelFormatter.DateFormatter">
      <summary>Get the formatter property pre-cast as an NSDateFormatter.
      </summary>
	  <remarks>If the formatter is not an NSDateFormatter, null will be returned.</remarks>
    </member>
        
    <member name="M:ShinobiCharts.SChartTickLabelFormatter.CreateNumberFormatter">
      <summary>Factory method for an SChartTickLabelFormatter with a formatter of type NSNumberFormatter.
      </summary>
	  <remarks>Use this to create formatters for instances of SChartNumberAxes.</remarks>
	  <returns></returns>
    </member>
        
    <member name="M:ShinobiCharts.SChartTickLabelFormatter.CreateDateFormatter">
      <summary>Factory method for an SChartTickLabelFormatter with a formatter of type NSDateFormatter.
      </summary>
	  <remarks>Use this to create formatters for instances of SChartDateTimeAxes.</remarks>
	  <returns></returns>
    </member>
        
    <member name="M:ShinobiCharts.SChartTickLabelFormatter.StringForObjectValue(MonoTouch.Foundation.NSObject,ShinobiCharts.SChartAxis)">
      <summary>Get the formatted string representation for the value of a data object on an axis
      </summary>
	  <remarks></remarks>
	  <param name="obj"></param>
	  <param name="axis"></param>
	  <returns></returns>
    </member>
        
        
    <member name="T:ShinobiCharts.SChartTickMark">
      <summary>A tick mark on an axis
      </summary>
	  <remarks>The label for the tick mark is also managed by this class.</remarks>
    </member>

    <member name="M:ShinobiCharts.SChartTickMark.#ctor">
      <summary> Create a new tickmark.
      </summary>
	  <remarks></remarks>
    </member>
        
    <member name="M:ShinobiCharts.SChartTickMark.#ctor(System.Drawing.RectangleF,System.String)">
      <summary> Create a tick mark with a particular label. 
      </summary>
	  <remarks></remarks>
    </member>
		
	<member name="M:ShinobiCharts.SChartTickMark.#ctor(MonoTouch.Foundation.NSCoder)">
      <summary>A constructor that initializes the object from the data stored in the unarchiver object.
      </summary>
	  <remarks>This constructor is provided to allow the class to be initialized from an unarchiver (for example, during NIB deserialization).</remarks>
	  <param name="coder">The unarchiver object</param>
    </member>
        
    <member name="M:ShinobiCharts.SChartTickMark.#ctor(MonoTouch.Foundation.NSObjectFlag)">
      <summary>Constructor to call on derived classes to skip initialization and merely allocate the object.
      </summary>
	  <remarks>You should not invoke this method directly.</remarks>
	  <param name="t">Unused sentinel value</param>
    </member>
		
	<member name="M:ShinobiCharts.SChartTickMark.#ctor(System.IntPtr)">
      <summary>A constructor used when creating managed representations of unmanaged objects.
      </summary>
	  <remarks>You should not invoke this method directly.</remarks>
	  <param name="handle">Handle of the unmanaged object</param>
    </member>

	<member name="P:ShinobiCharts.SChartTickMark.ClassHandle">
        <summary>
        The handle for this class.
        </summary>
	  <remarks>Not normally used by application code</remarks>
    </member>		
        
	<member name="M:ShinobiCharts.SChartTickMark.Dispose(System.Boolean)">
      <summary> Releases unmanaged resources.
      </summary>
	  <remarks></remarks>
	  <param name="disposing">True if called by Dispose, false if called from a finalizer</param>
    </member>

    <member name="P:ShinobiCharts.SChartTickMark.TickEnabled">
      <summary> Is this tick mark visible on the chart? 
      </summary>
		<remarks></remarks>
    </member>
        
    <member name="P:ShinobiCharts.SChartTickMark.TickLabel">
      <summary>	The label object to visually represent the value of this tick mark.
      </summary>
		<remarks> Note: If this is `null` then no label will be displayed. 
		</remarks>
    </member>
        
    <member name="P:ShinobiCharts.SChartTickMark.TickMarkY">
      <summary>The origin of the tickmark in Y, in pixels.
      </summary>
		<remarks></remarks>
    </member>
        
    <member name="P:ShinobiCharts.SChartTickMark.TickMarkX">
      <summary>The origin of the tickmark in X, in pixels.
      </summary>
		<remarks></remarks>
    </member>
        
    <member name="P:ShinobiCharts.SChartTickMark.OverAlternateStripe">
      <summary>DEPRECATED - this will be removed from the API soon.
      </summary>
		<remarks></remarks>
    </member>
        
    <member name="P:ShinobiCharts.SChartTickMark.Value">
      <summary>A double representing the location of the tickmark on the axis. It is from this value that the text of the tickmark is determined.
      </summary>
			<remarks>
				Where the axis isn't numeric, the representation may vary.
				On an SChartDateTimeAxis, this will be a number of seconds elapsed from a fixed point.
				On an SChartCategoryAxis this will be the integer index of the category represented.
			</remarks>
    </member>
        
    <member name="P:ShinobiCharts.SChartTickMark.TickMarkView">
      <summary>The UIView in which the tickmark is drawn.
      </summary>
		<remarks>
				This is the view in which the 'tick' is drawn - the line between the axis and any associated ticklabel.
				Note that this view does not contain the label, gridLine, or gridStripe UIViews.
			</remarks>
    </member>
        
    <member name="P:ShinobiCharts.SChartTickMark.GridLineView">
      <summary>The UIView that is the gridLine for the tickmark.
      </summary>
		<remarks>
				This view sits underneath the plot area.
				This will be null is gridLines are not enabled.
			</remarks>
    </member>
        
    <member name="P:ShinobiCharts.SChartTickMark.GridStripeView">
      <summary>The UIView that is the gridStripe for the tickmark.
      </summary>
		<remarks>
				This view sits underneath the plot area.
				This will be null is gridStripes are not enabled.
			</remarks>
    </member>
        
    <member name="M:ShinobiCharts.SChartTickMark.CompareForXAxis(ShinobiCharts.SChartTickMark)">
      <summary>Compare the X values for this tick mark.
      </summary>
	  <remarks></remarks>
	  <param name="tm"></param>
	  <returns></returns>
    </member>
        
    <member name="M:ShinobiCharts.SChartTickMark.CompareForYAxis(ShinobiCharts.SChartTickMark)">
      <summary> Compare the Y values for this tick mark. 
      </summary>
      <remarks></remarks>
	  <param name="tm"></param>
	  <returns></returns>
    </member>
        
    <member name="M:ShinobiCharts.SChartTickMark.RemoveLabel">
      <summary> Called when the axis wishes to remove this tick mark label.
       </summary>
	  <remarks>Override this to provide a custom exit routine for the label.
	  </remarks>		
    </member>
        
    <member name="M:ShinobiCharts.SChartTickMark.DisableTick(ShinobiCharts.SChartAxis)">
      <summary>Disables a tickmark, removing it completely from the owning axis.
      </summary>
		<remarks></remarks>
    </member>
        
    <member name="P:ShinobiCharts.SChartTickMark.TickLengthModifier">
      <summary>DEPRECATED - this will be removed from the API soon.
      </summary>
    </member>
        
    <member name="P:ShinobiCharts.SChartTickMark.IsMajor">
      <summary>Whether or not the tickmark is major.
      </summary>
		<remarks></remarks>
    </member>
        
    <member name="M:ShinobiCharts.SChartTickMark.RemoveTickMarkView">
      <summary>DEPRECATED - this will be removed from the API soon.
      </summary>
		<remarks></remarks>
    </member>
        
    <member name="M:ShinobiCharts.SChartTickMark.RemoveGridLineView">
      <summary>DEPRECATED - this will be removed from the API soon.
      </summary>
		<remarks></remarks>
    </member>
        
    <member name="M:ShinobiCharts.SChartTickMark.RemoveGridStripeView">
      <summary>DEPRECATED - this will be removed from the API soon.
      </summary>
		<remarks></remarks>
    </member>

      
    <member name="T:ShinobiCharts.SChartAxisStyle">
      <summary>Visual style properties for the axis, tick marks and labels, gridlines and grid stripes.
      </summary>
		<remarks></remarks>
    </member>
        
    <member name="M:ShinobiCharts.SChartAxisStyle.#ctor">
      <summary>Default constructor
      </summary>
	 <remarks></remarks>
    </member>
		
	<member name="M:ShinobiCharts.SChartAxisStyle.#ctor(MonoTouch.Foundation.NSCoder)">
      <summary>A constructor that initializes the object from the data stored in the unarchiver object.
      </summary>
	  <remarks>This constructor is provided to allow the class to be initialized from an unarchiver (for example, during NIB deserialization).</remarks>
	  <param name="coder">The unarchiver object</param>
    </member>
        
    <member name="M:ShinobiCharts.SChartAxisStyle.#ctor(MonoTouch.Foundation.NSObjectFlag)">
      <summary>Constructor to call on derived classes to skip initialization and merely allocate the object.
      </summary>
	  <remarks>You should not invoke this method directly.</remarks>
	  <param name="t">Unused sentinel value</param>
    </member>
		
	<member name="M:ShinobiCharts.SChartAxisStyle.#ctor(System.IntPtr)">
      <summary>A constructor used when creating managed representations of unmanaged objects.
      </summary>
	  <remarks>You should not invoke this method directly.</remarks>
	  <param name="handle">Handle of the unmanaged object</param>
    </member>

	<member name="P:ShinobiCharts.SChartAxisStyle.ClassHandle">
      <summary>The handle for this class.
      </summary>
	  <remarks>Not normally used by application code</remarks>
    </member>
        
	<member name="M:ShinobiCharts.SChartAxisStyle.ConformsToProtocol(System.IntPtr)">
      <summary>Internal - checks whether this object conforms to a protocol.
      </summary>
	  <remarks>Not normally called from application code - used by the Shinobi framework.</remarks>
	  <param name="protocol">The protocol</param>
	  <returns>True if the object conforms to the protocol</returns>
    </member>
        
    <member name="P:ShinobiCharts.SChartAxisStyle.LineColor">
      <summary> 
 			The UIColor for the axis line
      </summary>
		<remarks></remarks>
    </member>
        
    <member name="P:ShinobiCharts.SChartAxisStyle.LineWidth">
      <summary> The Width in pixels of the axis line 
      </summary>
		<remarks></remarks>
    </member>
		
    <member name="P:ShinobiCharts.SChartAxisStyle.InterSeriesPadding">
      <summary> The padding between datapoints of different series where they are plotted on the same axis value.
      </summary>
		<remarks> A value between `0.0` and `1.0` as a proportion of the available space. 
		</remarks>
    </member>
        
    <member name="P:ShinobiCharts.SChartAxisStyle.InterSeriesSetPadding">
      <summary> The padding between sets of series' datapoints on neighbouring axis values.
      </summary>
		<remarks> A value between `0.0` and `1.0` as a percentage of the available space. 
		</remarks>
    </member>
       
    <member name="P:ShinobiCharts.SChartAxisStyle.InterColumnPadding">
      <summary> DEPRECATED - use InterSeriesPadding instead of InterColumnPadding.
 
 The padding between columns of different series at a data point. A value between `0.0` and `1.0` as a percentage of the available space. 
      </summary>
		<remarks></remarks>
    </member>
        
    <member name="P:ShinobiCharts.SChartAxisStyle.InterColumnSetPadding">
      <summary> DEPRECATED - use InterSeriesSetPadding instead of InterColumnSetPadding.
 
 The padding between sets of columns on different data points. A value between `0.0` and `1.0` as a percentage of the available space. 
      </summary>
    </member>
        
    <member name="P:ShinobiCharts.SChartAxisStyle.InterBarPadding">
      <summary> DEPRECATED - use InterSeriesPadding instead of InterBarPadding. 
 
 The padding between bars of different series at a data point. A value between `0.0` and `1.0` as a percentage of the available space. 
      </summary>
		<remarks></remarks>
    </member>
        
    <member name="P:ShinobiCharts.SChartAxisStyle.InterBarSetPadding">
      <summary> DEPRECATED - use InterSeriesSetPadding instead of InterBarSetPadding.
 
 The padding between sets of bars on different data points. A value between `0.0` and `1.0` as a percentage of the available space. 
      </summary>
		<remarks></remarks>
    </member>

    <member name="P:ShinobiCharts.SChartAxisStyle.MajorTickStyle">
      <summary> An SChartTickStyle object containing styling preferences for the major tick marks 
      </summary>
		<remarks></remarks>
    </member>
        
    <member name="P:ShinobiCharts.SChartAxisStyle.MinorTickStyle">
      <summary> An SChartTickStyle object containing styling preferences for the minor tick marks 
      </summary>
		<remarks></remarks>
    </member>
        
    <member name="P:ShinobiCharts.SChartAxisStyle.MajorGridLineStyle">
      <summary> An SChartMajorGridlineStyle object containing styling preferences for the major gridlines 
      </summary>
		<remarks></remarks>
    </member>
        
    <member name="P:ShinobiCharts.SChartAxisStyle.GridStripeStyle">
      <summary> An SChartGridStripeStyle object containing styling preferences for the grid stripes 
      </summary>
		<remarks></remarks>
    </member>
        
    <member name="P:ShinobiCharts.SChartAxisStyle.TitleStyle">
      <summary> An SChartAxisTitleStyle object containing styling preferences for the axis title 
      </summary>
		<remarks></remarks>
    </member>
        
    <member name="M:ShinobiCharts.SChartAxisStyle.SupplementStyle(ShinobiCharts.SChartAxisStyle)">
      <summary> Supplements this Style object by taking styles this object doesn't have, from the argument, `style`. 
      </summary>
      <remarks></remarks>
	  <param name="style"></param>
    </member>

	<member name="M:ShinobiCharts.SChartAxisStyle.Dispose(System.Boolean)">
      <summary> Releases unmanaged resources.
      </summary>
	  <remarks></remarks>
	  <param name="disposing">True if called by Dispose, false if called from a finalizer</param>
    </member>

      
		<member name="T:ShinobiCharts.SChartCartesianSeries">
			<summary>Represents an instance of a cartesian series on a chart.
			</summary>
			<remarks>
				<para>
					Cartesian coordinates are points defined in a plane by a pair of numerical coordinates, which are the signed distances from the point
					to either axis in the plane.
					In our charts, we are using an x and a y axis.
				</para><para>
					SChartCartesianSeries is the base class for all of the concrete cartesian series which are provided in ShinobiCharts.
					The concrete series types which are available are:
					<list type="bullet">
						<item>
							<term>
								<see cref="T:ShinobiCharts.SChartBarSeries" /> - represents a bar series.
							</term>
						</item>
						<item>
							<term>
								<see cref="T:ShinobiCharts.SChartColumnSeries" /> - represents a column series.
							</term>
						</item>
						<item>
							<term>
								<see cref="T:ShinobiCharts.SChartLineSeries" /> - represents a line series.
							</term>
						</item>
						<item>
							<term>
								<see cref="T:ShinobiCharts.SChartStepLineSeries" /> - represents a stepped line series.
							</term>
						</item>
						<item>
							<term>
								<see cref="T:ShinobiCharts.SChartBandSeries" /> - represents a band series.
								These are only available in the premium version of charts.
							</term>
						</item>
						<item>
							<term>
								<see cref="T:ShinobiCharts.SChartScatterSeries" /> - represents a scatter plots.
							</term>
						</item>
						<item>
							<term>
								<see cref="T:ShinobiCharts.SChartCandlestickSeries" /> - represents a candlestick series.
								These are only available in the premium version of charts.
							</term>
						</item>
						<item>
							<term>
								<see cref="T:ShinobiCharts.SChartOHLCSeries" /> - represents an Open-High-Low-Closed (OHLC) series.
								These are only available in the premium version of charts.
							</term>
						</item>
					</list>
				</para><para>
					Some types of chart series can be stacked.
					This means that they are rendered on top of each other, with the first series rendered at the bottom, and subsequent series offset so
					that they begin at the top of the previous series.
					The types of series which can be stacked are bar series, column series, line series and stepped line series.
					See the <see cref="P:ShinobiCharts.SChartCartesianSeries.StackIndex" /> property for more information.
				</para>
			</remarks>
		</member>

    <member name="M:ShinobiCharts.SChartCartesianSeries.#ctor">
      <summary>Default constructor
      </summary>
	 <remarks></remarks>
    </member>
		
	<member name="M:ShinobiCharts.SChartCartesianSeries.#ctor(MonoTouch.Foundation.NSCoder)">
      <summary>A constructor that initializes the object from the data stored in the unarchiver object.
      </summary>
	  <remarks>This constructor is provided to allow the class to be initialized from an unarchiver (for example, during NIB deserialization).</remarks>
	  <param name="coder">The unarchiver object</param>
    </member>
        
    <member name="M:ShinobiCharts.SChartCartesianSeries.#ctor(MonoTouch.Foundation.NSObjectFlag)">
      <summary>Constructor to call on derived classes to skip initialization and merely allocate the object.
      </summary>
	  <remarks>You should not invoke this method directly.</remarks>
	  <param name="t">Unused sentinel value</param>
    </member>
		
	<member name="M:ShinobiCharts.SChartCartesianSeries.#ctor(System.IntPtr)">
      <summary>A constructor used when creating managed representations of unmanaged objects.
      </summary>
	  <remarks>You should not invoke this method directly.</remarks>
	  <param name="handle">Handle of the unmanaged object</param>
    </member>

	<member name="P:ShinobiCharts.SChartCartesianSeries.ClassHandle">
      <summary>The handle for this class.
      </summary>
	  <remarks>Not normally used by application code</remarks>
    </member>
        
    <member name="P:ShinobiCharts.SChartCartesianSeries.Baseline">
      <summary>Baseline for the series, on the x or y axis depending on its orientation.
      </summary>
		<remarks>This defaults to 0.0.</remarks>
    </member>
        
		<member name="P:ShinobiCharts.SChartCartesianSeries.StackIndex">
			<summary>The index of the stacked set to which this series belongs.
			</summary>
			<remarks>
				<para>
					Series can be stacked on a chart, which means that their values are offset and they are rendered on top of each other,
					with the first series rendered at the bottom, offset from the baseline, with subsequent series offset so that they begin at the
					top of the previous series.  Each stacked set in the chart is assigned a unique ID.
					To add a series to a stacked set, you set its <c>StackIndex</c> property to be the ID of the stacked set to which you wish to add the series.
				</para>
				<para>
					This property defaults to <c>null</c>.
					This indicates that the series is not stacked.
				</para>
				<para>
					The types of series which can be stacked are bar series, column series, line series and stepped line series.
				</para>
				<para>
					Note that for any stack, all offsets must either be positive or negative - for example:
					Two column series are stacked.
					Both series have YValues for XValues of 3 and 4.
					The first series has a YValue of 2 for x=3 and -1 for x=4.
					The second series has YValues of 7 for x=3 and -3 for x=4.
					This is OK, whereas if the second series had a YValue of 2 for x=4, that stack would contain both positive and negative offsets and could
					produce strange effects.
				</para>
				<para>
					Note also that if your series are stacked, their values must be sorted - with respect to the XAxis in the case of a column series or line
					series of horizontal orientation, and with respect to the YAxis in the case of a bar series or line series of vertical orientation.
				</para>
			</remarks>
		</member>

	<member name="M:ShinobiCharts.SChartCartesianSeries.Dispose(System.Boolean)">
      <summary> Releases unmanaged resources.
      </summary>
	  <remarks></remarks>
	  <param name="disposing">True if called by Dispose, false if called from a finalizer</param>
    </member>

    <member name="P:ShinobiCharts.SChartCartesianSeries.Animated">
      <summary>DEPRECATED - Use SChartSeries.AnimationEnabled instead.
      </summary>
		<remarks></remarks>
    </member>
        
    <member name="P:ShinobiCharts.SChartCartesianSeries.AnimationDuration">
      <summary>DEPRECATED - Configure either the SChartSeries.EntryAnimation or SChartSeries.ExitAnimation instead.
      </summary>
		<remarks></remarks>
    </member>
        
    <member name="P:ShinobiCharts.SChartCartesianSeries.AnimationCurve">
      <summary>DEPRECATED - Configure either the SChartSeries.EntryAnimation or SChartSeries.ExitAnimation instead.
      </summary>
		<remarks>
		</remarks>
    </member>
      
    <member name="P:ShinobiCharts.SChartCartesianSeries.AnimationCurve">
        <summary></summary>
		<remarks></remarks>
    </member>
      
    <member name="P:ShinobiCharts.SChartCartesianSeries.RangeOfDataInX">
        <summary>The range of the data in the X axis.</summary>
		<remarks></remarks>
    </member>
      
    <member name="P:ShinobiCharts.SChartCartesianSeries.RangeOfDataInY">
        <summary>The range of the data in the Y axis.</summary>
		<remarks></remarks>
    </member>

		<member name="M:ShinobiCharts.SChartCartesianSeries.DataPointWithMaxY">
			<summary>Returns the datapoint with the largest Y value.</summary>
			<remarks></remarks>
		</member>

		<member name="M:ShinobiCharts.SChartCartesianSeries.DataPointWithMinY">
			<summary>Returns the datapoint with the smallest Y value.</summary>
			<remarks></remarks>
		</member>

		<member name="M:ShinobiCharts.SChartCartesianSeries.DataPointWithMaxX">
			<summary>Returns the datapoint with the largest X value.</summary>
			<remarks></remarks>
		</member>

		<member name="M:ShinobiCharts.SChartCartesianSeries.DataPointWithMinX">
			<summary>Returns the datapoint with the smallest X value.</summary>
			<remarks></remarks>
		</member>
      
      
    <member name="T:ShinobiCharts.SChartBarColumnSeries">
      <summary>Abstract base class for column and bar series. 
      </summary>
		<remarks>To display a bar or column series on the chart init and use one of the classes <see cref="T:Shinobicharts.SChartBarSeries"/> or <see cref="T:Shinobicharts.SChartColumnSeries"/> respectively. </remarks>
    </member>

    <member name="M:ShinobiCharts.SChartBarColumnSeries.#ctor">
      <summary>Default constructor
      </summary>
	 <remarks></remarks>
    </member>
		
	<member name="M:ShinobiCharts.SChartBarColumnSeries.#ctor(MonoTouch.Foundation.NSCoder)">
      <summary>A constructor that initializes the object from the data stored in the unarchiver object.
      </summary>
	  <remarks>This constructor is provided to allow the class to be initialized from an unarchiver (for example, during NIB deserialization).</remarks>
	  <param name="coder">The unarchiver object</param>
    </member>
        
    <member name="M:ShinobiCharts.SChartBarColumnSeries.#ctor(MonoTouch.Foundation.NSObjectFlag)">
      <summary>Constructor to call on derived classes to skip initialization and merely allocate the object.
      </summary>
	  <remarks>You should not invoke this method directly.</remarks>
	  <param name="t">Unused sentinel value</param>
    </member>
		
	<member name="M:ShinobiCharts.SChartBarColumnSeries.#ctor(System.IntPtr)">
      <summary>A constructor used when creating managed representations of unmanaged objects.
      </summary>
	  <remarks>You should not invoke this method directly.</remarks>
	  <param name="handle">Handle of the unmanaged object</param>
    </member>

	<member name="P:ShinobiCharts.SChartBarColumnSeries.ClassHandle">
      <summary>The handle for this class.
      </summary>
	  <remarks>Not normally used by application code</remarks>
    </member>
        
        
    <member name="P:ShinobiCharts.SChartBarColumnSeries.Orientation">
      <summary>
      </summary>
		<remarks></remarks>
    </member>
        

	<member name="T:ShinobiCharts.SChartTickStyle">
      <summary>Visual style properties for tick marks 
       </summary>
		<remarks></remarks>
    </member>
        
    <member name="M:ShinobiCharts.SChartTickStyle.#ctor">
      <summary>Default constructor
      </summary>
	 <remarks></remarks>
    </member>
		
	<member name="M:ShinobiCharts.SChartTickStyle.#ctor(MonoTouch.Foundation.NSCoder)">
      <summary>A constructor that initializes the object from the data stored in the unarchiver object.
      </summary>
	  <remarks>This constructor is provided to allow the class to be initialized from an unarchiver (for example, during NIB deserialization).</remarks>
	  <param name="coder">The unarchiver object</param>
    </member>
        
    <member name="M:ShinobiCharts.SChartTickStyle.#ctor(MonoTouch.Foundation.NSObjectFlag)">
      <summary>Constructor to call on derived classes to skip initialization and merely allocate the object.
      </summary>
	  <remarks>You should not invoke this method directly.</remarks>
	  <param name="t">Unused sentinel value</param>
    </member>
		
	<member name="M:ShinobiCharts.SChartTickStyle.#ctor(System.IntPtr)">
      <summary>A constructor used when creating managed representations of unmanaged objects.
      </summary>
	  <remarks>You should not invoke this method directly.</remarks>
	  <param name="handle">Handle of the unmanaged object</param>
    </member>

	<member name="P:ShinobiCharts.SChartTickStyle.ClassHandle">
      <summary>The handle for this class.
      </summary>
	  <remarks>Not normally used by application code</remarks>
    </member>
        
	<member name="M:ShinobiCharts.SChartTickStyle.Dispose(System.Boolean)">
      <summary> Releases unmanaged resources.
      </summary>
	  <remarks></remarks>
	  <param name="disposing">True if called by Dispose, false if called from a finalizer</param>
    </member>

	<member name="M:ShinobiCharts.SChartTickStyle.ConformsToProtocol(System.IntPtr)">
      <summary>Internal - checks whether this object conforms to a protocol.
      </summary>
	  <remarks>Not normally called from application code - used by the Shinobi framework.</remarks>
	  <param name="protocol">The protocol</param>
	  <returns>True if the object conforms to the protocol</returns>
    </member>

    <member name="P:ShinobiCharts.SChartTickStyle.ShowTicks">
      <summary> Should tick marks be displayed on the axes. 
      </summary>
		<remarks></remarks>
    </member>
        
    <member name="P:ShinobiCharts.SChartTickStyle.ShowTicksSet">
      <summary>
      </summary>
		<remarks></remarks>
    </member>
        
    <member name="P:ShinobiCharts.SChartTickStyle.ShowLabels">
      <summary> Should labels be displayed on the major tick marks. 
      </summary>
		<remarks></remarks>
    </member>
        
    <member name="P:ShinobiCharts.SChartTickStyle.ShowLabelsSet">
      <summary>
      </summary>
		<remarks></remarks>
    </member>
        
    <member name="P:ShinobiCharts.SChartTickStyle.TickLabelOrientation">
      <summary> The Orientation of labels on major tick marks
      </summary>
		<remarks></remarks>
    </member>
        
    <member name="P:ShinobiCharts.SChartTickStyle.TickLabelOrientationSet">
      <summary>
      </summary>
		<remarks></remarks>
    </member>
        
    <member name="P:ShinobiCharts.SChartTickStyle.LineColor">
      <summary> The UIColor for the tick mark lines 
      </summary>
		<remarks></remarks>
    </member>
        
    <member name="P:ShinobiCharts.SChartTickStyle.LineWidth">
      <summary> The Width of the tick mark line in pixels 
      </summary>
		<remarks></remarks>
    </member>
        
    <member name="P:ShinobiCharts.SChartTickStyle.LineLength">
      <summary> The length of the tick mark lines in pixels 
      </summary>
		<remarks></remarks>
    </member>
        
    <member name="P:ShinobiCharts.SChartTickStyle.LabelColor">
      <summary> The Color for the text in labels 
      </summary>
		<remarks></remarks>
    </member>
        
    <member name="P:ShinobiCharts.SChartTickStyle.LabelFont">
      <summary> The font for the labels 
      </summary>
		<remarks></remarks>
    </member>
		
		<member name="P:ShinobiCharts.SChartTickStyle.TextAlignment">
			<summary>
				The text alignment of the labels.
			</summary>
			<remarks></remarks>
		</member>
		
    <member name="P:ShinobiCharts.SChartTickStyle.LabelTextShadowColor">
      <summary> The shadow Color for label text 
      </summary>
		<remarks></remarks>
    </member>
        
    <member name="P:ShinobiCharts.SChartTickStyle.TickGap">
      <summary> The gap between a tick label and its corresponding tick mark 
      </summary>
		<remarks></remarks>
    </member>
        
    <member name="M:ShinobiCharts.SChartTickStyle.SupplementStyle(ShinobiCharts.SChartTickStyle)">
      <summary> Supplements this Style object by taking styles this object doesn't have, from the argument, `Style` 
      </summary>
	  <remarks></remarks>
	  <param name="style"></param>
    </member>

      
    <member name="T:ShinobiCharts.SChartMajorGridlineStyle">
      <summary>Visual style properties for the major grid lines.
      </summary>
		<remarks></remarks>
    </member>
        
    <member name="M:ShinobiCharts.SChartMajorGridlineStyle.#ctor">
      <summary>Default constructor
      </summary>
	 <remarks></remarks>
    </member>
		
	<member name="M:ShinobiCharts.SChartMajorGridlineStyle.#ctor(MonoTouch.Foundation.NSCoder)">
      <summary>A constructor that initializes the object from the data stored in the unarchiver object.
      </summary>
	  <remarks>This constructor is provided to allow the class to be initialized from an unarchiver (for example, during NIB deserialization).</remarks>
	  <param name="coder">The unarchiver object</param>
    </member>
        
    <member name="M:ShinobiCharts.SChartMajorGridlineStyle.#ctor(MonoTouch.Foundation.NSObjectFlag)">
      <summary>Constructor to call on derived classes to skip initialization and merely allocate the object.
      </summary>
	  <remarks>You should not invoke this method directly.</remarks>
	  <param name="t">Unused sentinel value</param>
    </member>
		
	<member name="M:ShinobiCharts.SChartMajorGridlineStyle.#ctor(System.IntPtr)">
      <summary>A constructor used when creating managed representations of unmanaged objects.
      </summary>
	  <remarks>You should not invoke this method directly.</remarks>
	  <param name="handle">Handle of the unmanaged object</param>
    </member>

	<member name="P:ShinobiCharts.SChartMajorGridlineStyle.ClassHandle">
      <summary>The handle for this class.
      </summary>
	  <remarks>Not normally used by application code</remarks>
    </member>
        
	<member name="M:ShinobiCharts.SChartMajorGridlineStyle.Dispose(System.Boolean)">
      <summary> Releases unmanaged resources.
      </summary>
	  <remarks></remarks>
	  <param name="disposing">True if called by Dispose, false if called from a finalizer</param>
    </member>

	<member name="M:ShinobiCharts.SChartMajorGridlineStyle.ConformsToProtocol(System.IntPtr)">
      <summary>Internal - checks whether this object conforms to a protocol.
      </summary>
	  <remarks>Not normally called from application code - used by the Shinobi framework.</remarks>
	  <param name="protocol">The protocol</param>
	  <returns>True if the object conforms to the protocol</returns>
    </member>

    <member name="P:ShinobiCharts.SChartMajorGridlineStyle.ShowMajorGridLines">
      <summary>  Show grid lines from the major tick marks 
      </summary>
		<remarks></remarks>
    </member>
        
    <member name="P:ShinobiCharts.SChartMajorGridlineStyle.ShowMajorGridLinesSet">
      <summary>
      </summary>
		<remarks></remarks>
    </member>
        
    <member name="P:ShinobiCharts.SChartMajorGridlineStyle.DashedMajorGridLines">
      <summary> Should the lines be dashed 
      </summary>
		<remarks></remarks>
    </member>
        
    <member name="P:ShinobiCharts.SChartMajorGridlineStyle.DashedMajorGridLinesSet">
      <summary>
      </summary>
		<remarks></remarks>
    </member>
        
    <member name="P:ShinobiCharts.SChartMajorGridlineStyle.LineColor">
      <summary> The UIColor of the grid lines 
      </summary>
		<remarks></remarks>
    </member>
        
    <member name="P:ShinobiCharts.SChartMajorGridlineStyle.LineWidth">
      <summary> The Width in pixels of the grid lines 
      </summary>
		<remarks></remarks>
    </member>
        
    <member name="P:ShinobiCharts.SChartMajorGridlineStyle.DashStyle">
      <summary> The dash pattern of the line.
      </summary>
		<remarks> An array of pixel lengths for each adjacent section. The pattern will wrap if the line needs more segments than provided.
		</remarks>
    </member>
        
    <member name="M:ShinobiCharts.SChartMajorGridlineStyle.SupplementStyle(ShinobiCharts.SChartMajorGridlineStyle)">
      <summary> Supplements this Style object by taking styles this object doesn't have, from the argument, `style` 
      </summary>
	  <remarks></remarks>
	  <param name="style"></param>
    </member>

      
    <member name="T:ShinobiCharts.SChartGridStripeStyle">
      <summary>Visual style properties for the grid stripes that can appear between major tick marks.
      </summary>
		<remarks></remarks>
    </member>

    <member name="M:ShinobiCharts.SChartGridStripeStyle.#ctor">
      <summary>Default constructor
      </summary>
	 <remarks></remarks>
    </member>
		
	<member name="M:ShinobiCharts.SChartGridStripeStyle.#ctor(MonoTouch.Foundation.NSCoder)">
      <summary>A constructor that initializes the object from the data stored in the unarchiver object.
      </summary>
	  <remarks>This constructor is provided to allow the class to be initialized from an unarchiver (for example, during NIB deserialization).</remarks>
	  <param name="coder">The unarchiver object</param>
    </member>
        
    <member name="M:ShinobiCharts.SChartGridStripeStyle.#ctor(MonoTouch.Foundation.NSObjectFlag)">
      <summary>Constructor to call on derived classes to skip initialization and merely allocate the object.
      </summary>
	  <remarks>You should not invoke this method directly.</remarks>
	  <param name="t">Unused sentinel value</param>
    </member>
		
	<member name="M:ShinobiCharts.SChartGridStripeStyle.#ctor(System.IntPtr)">
      <summary>A constructor used when creating managed representations of unmanaged objects.
      </summary>
	  <remarks>You should not invoke this method directly.</remarks>
	  <param name="handle">Handle of the unmanaged object</param>
    </member>

	<member name="P:ShinobiCharts.SChartGridStripeStyle.ClassHandle">
      <summary>The handle for this class.
      </summary>
	  <remarks>Not normally used by application code</remarks>
    </member>
        
	<member name="M:ShinobiCharts.SChartGridStripeStyle.Dispose(System.Boolean)">
      <summary> Releases unmanaged resources.
      </summary>
	  <remarks></remarks>
	  <param name="disposing">True if called by Dispose, false if called from a finalizer</param>
    </member>

	<member name="M:ShinobiCharts.SChartGridStripeStyle.ConformsToProtocol(System.IntPtr)">
      <summary>Internal - checks whether this object conforms to a protocol.
      </summary>
	  <remarks>Not normally called from application code - used by the Shinobi framework.</remarks>
	  <param name="protocol">The protocol</param>
	  <returns>True if the object conforms to the protocol</returns>
    </member>

    <member name="P:ShinobiCharts.SChartGridStripeStyle.StripeColor">
      <summary> The Color of the main stripes between major tick marks 
      </summary>
		<remarks></remarks>
    </member>
        
    <member name="P:ShinobiCharts.SChartGridStripeStyle.AlternateStripeColor">
      <summary> The Color of the alternate stripes between major tick marks 
      </summary>
		<remarks></remarks>
    </member>
        
    <member name="P:ShinobiCharts.SChartGridStripeStyle.ShowGridStripes">
      <summary> Should the chart display stripes between the major tick marks. 
      </summary>
		<remarks></remarks>
    </member>
        
    <member name="P:ShinobiCharts.SChartGridStripeStyle.ShowGridStripesSet">
      <summary>
      </summary>
		<remarks></remarks>
    </member>
        
    <member name="M:ShinobiCharts.SChartGridStripeStyle.SupplementStyle(ShinobiCharts.SChartGridStripeStyle)">
      <summary> Supplements this Style object by taking styles this object doesn't have, from the argument, `style`. 
      </summary>
	  <remarks></remarks>
	  <param name="style"></param>
    </member>

		
    <member name="T:ShinobiCharts.SChartAxisTitleStyle">
      <summary>Visual style properties for the axis titles.
       </summary>
		<remarks></remarks>
    </member>

    <member name="M:ShinobiCharts.SChartAxisTitleStyle.#ctor">
      <summary>Default constructor
      </summary>
	 <remarks></remarks>
    </member>
		
	<member name="M:ShinobiCharts.SChartAxisTitleStyle.#ctor(MonoTouch.Foundation.NSCoder)">
      <summary>A constructor that initializes the object from the data stored in the unarchiver object.
      </summary>
	  <remarks>This constructor is provided to allow the class to be initialized from an unarchiver (for example, during NIB deserialization).</remarks>
	  <param name="coder">The unarchiver object</param>
    </member>
        
    <member name="M:ShinobiCharts.SChartAxisTitleStyle.#ctor(MonoTouch.Foundation.NSObjectFlag)">
      <summary>Constructor to call on derived classes to skip initialization and merely allocate the object.
      </summary>
	  <remarks>You should not invoke this method directly.</remarks>
	  <param name="t">Unused sentinel value</param>
    </member>
		
	<member name="M:ShinobiCharts.SChartAxisTitleStyle.#ctor(System.IntPtr)">
      <summary>A constructor used when creating managed representations of unmanaged objects.
      </summary>
	  <remarks>You should not invoke this method directly.</remarks>
	  <param name="handle">Handle of the unmanaged object</param>
    </member>

	<member name="P:ShinobiCharts.SChartAxisTitleStyle.ClassHandle">
      <summary>The handle for this class.
      </summary>
	  <remarks>Not normally used by application code</remarks>
    </member>
        
    <member name="P:ShinobiCharts.SChartAxisTitleStyle.TextColor">
      <summary>The Color of the text for the title 
      </summary>
		<remarks></remarks>
    </member>
		
	<member name="M:ShinobiCharts.SChartAxisTitleStyle.ConformsToProtocol(System.IntPtr)">
      <summary>Internal - checks whether this object conforms to a protocol.
      </summary>
	  <remarks>Not normally called from application code - used by the Shinobi framework.</remarks>
	  <param name="protocol">The protocol</param>
	  <returns>True if the object conforms to the protocol</returns>
    </member>
        
    <member name="P:ShinobiCharts.SChartAxisTitleStyle.Font">
      <summary> The font of the label text 
      </summary>
		<remarks></remarks>
    </member>
        
    <member name="P:ShinobiCharts.SChartAxisTitleStyle.MinimumFontSize">
      <summary> The minimum font size of the title.
       </summary>
	<remarks>		
			 This functions in the same way as the UILabel property with the same name. 
	</remarks>		
    </member>
        
    <member name="P:ShinobiCharts.SChartAxisTitleStyle.MinimumFontSizeSet">
      <summary>
      </summary>
		<remarks></remarks>
    </member>
        
    <member name="P:ShinobiCharts.SChartAxisTitleStyle.TextAlign">
      <summary> Text alignment for the title text 
      </summary>
		<remarks></remarks>
    </member>
        
    <member name="P:ShinobiCharts.SChartAxisTitleStyle.TextAlignSet">
      <summary>
      </summary>
		<remarks></remarks>
    </member>
        
    <member name="P:ShinobiCharts.SChartAxisTitleStyle.BackgroundColor">
      <summary> UIColor used for the background of the title 
      </summary>
		<remarks></remarks>
    </member>
        
    <member name="P:ShinobiCharts.SChartAxisTitleStyle.TitleOrientation">
      <summary> One of the preset Orientations for the title
      </summary>
		<remarks></remarks>
    </member>
        
    <member name="P:ShinobiCharts.SChartAxisTitleStyle.TitleOrientationSet">
      <summary>
      </summary>
		<remarks></remarks>
    </member>
		
    <member name="M:ShinobiCharts.SChartAxisTitleStyle.SupplementStyle(ShinobiCharts.SChartAxisTitleStyle)">
      <summary> Supplements this Style object by taking styles this object doesn't have, from the argument, `style`. 
      </summary>
      <remarks></remarks>
	  <param name="style"></param>
    </member>

	<member name="M:ShinobiCharts.SChartAxisTitleStyle.Dispose(System.Boolean)">
      <summary> Releases unmanaged resources.
      </summary>
	  <remarks></remarks>
	  <param name="disposing">True if called by Dispose, false if called from a finalizer</param>
    </member>

      
		<member name="T:ShinobiCharts.SChartBandSeries">
			<summary>A type of SChartSeries that uses its data points to construct a band series.</summary>
			<remarks>
				<para>
					Data points in a band series will contain multiple values.
					This means that they will be instances of <see cref="T:ShinobiCharts.SChartMultiXDataPoint" /> or <see cref="T:ShinobiCharts.SChartMultiYDataPoint" />,
					depending on the orientation of the series.
					The keys for the values in each data point will be <see cref="P:ShinobiCharts.SChartBandSeries.KeyHigh" /> and
					<see cref="P:ShinobiCharts.SChartBandSeries.KeyLow" />.
				</para><para>
					The band series is visualised as two line series, one for the High values and one for the Low, with an area fill between the lines.
					The colour of this fill depends on the relationship between the lines, for example it may be green if the High value is greater than the Low value,
					and red if the opposite is true.
				</para><para>
					In order to provide the High and Low values to the chart, the data points in the band series should implement either the
					<see cref="M:ShinobiCharts.SChartData.GetXValue(System.String)" />
					method or the <see cref="M:ShinobiCharts.SChartData.GetYValue(System.String)" /> method on the <see cref="T:ShinobiCharts.SChartData" /> protocol,
					depending on the series orientation.
				</para><para>
					The band series contains an instance of <see cref="T:ShinobiCharts.SChartBandSeriesStyle" />, which manages the appearance of the series.
				</para>
			</remarks>
		</member>

    <member name="M:ShinobiCharts.SChartBandSeries.#ctor">
      <summary>Default constructor
      </summary>
	 <remarks></remarks>
    </member>
		
	<member name="M:ShinobiCharts.SChartBandSeries.#ctor(MonoTouch.Foundation.NSCoder)">
      <summary>A constructor that initializes the object from the data stored in the unarchiver object.
      </summary>
	  <remarks>This constructor is provided to allow the class to be initialized from an unarchiver (for example, during NIB deserialization).</remarks>
	  <param name="coder">The unarchiver object</param>
    </member>
        
    <member name="M:ShinobiCharts.SChartBandSeries.#ctor(MonoTouch.Foundation.NSObjectFlag)">
      <summary>Constructor to call on derived classes to skip initialization and merely allocate the object.
      </summary>
	  <remarks>You should not invoke this method directly.</remarks>
	  <param name="t">Unused sentinel value</param>
    </member>
		
	<member name="M:ShinobiCharts.SChartBandSeries.#ctor(System.IntPtr)">
      <summary>A constructor used when creating managed representations of unmanaged objects.
      </summary>
	  <remarks>You should not invoke this method directly.</remarks>
	  <param name="handle">Handle of the unmanaged object</param>
    </member>

	<member name="P:ShinobiCharts.SChartBandSeries.ClassHandle">
      <summary>The handle for this class.
      </summary>
	  <remarks>Not normally used by application code</remarks>
    </member>
        
	<member name="M:ShinobiCharts.SChartBandSeries.Dispose(System.Boolean)">
      <summary> Releases unmanaged resources.
      </summary>
	  <remarks></remarks>
	  <param name="disposing">True if called by Dispose, false if called from a finalizer</param>
    </member>

    <member name="P:ShinobiCharts.SChartBandSeries.Orientation">
      <summary>Defines the orientation of the band series.</summary>
		<remarks>If the series is horizontal, each data point will have multiple y values.  If the series is vertical, each data point will have multiple x values.</remarks>
    </member>
        
    <member name="P:ShinobiCharts.SChartBandSeries.Style">
      <summary>Manages the appearance of the band series on the chart.
      </summary>
		<remarks>The default settings of the style are inherited from the chart theme.  You can tweak the appearance of the series by modifying the style.
		</remarks>
    </member>
        
    <member name="P:ShinobiCharts.SChartBandSeries.SelectedStyle">
      <summary>Manages the appearance of the band series when it is selected.
      </summary>
		<remarks>Style settings in this object will be applied when the series is marked as selected (or a point is selected).
			The default settings of the style are inherited from the chart theme.  You can tweak the appearance of the series by modifying the style.</remarks>
    </member>

		<member name="P:ShinobiCharts.SChartBandSeries.KeyHigh">
			<summary></summary>
			<remarks></remarks>
		</member>

		<member name="P:ShinobiCharts.SChartBandSeries.KeyLow">
			<summary></summary>
			<remarks></remarks>
		</member>


    <member name="T:ShinobiCharts.SChartPointStyle">
      <summary>Manages the appearance of data points within chart series.
      </summary>
		<remarks>
				<para>
					It is used by instances of SChartBandSeries, SChartLineSeries and SChartScatterSeries, as all of these types of
					series can display individual points.
				</para><para>
					By default, points are displayed as two circles, one displayed within the other.
					You can configure the color and radius of both circles.
					You can also add a gradient to a point, so that it fades as you move out from its center.
				</para><para>
					You also have the option to display images for each point, rather than displaying two circles.
					This is managed using the Texture property.
				</para>
			</remarks>
    </member>
        
    <member name="M:ShinobiCharts.SChartPointStyle.#ctor">
      <summary>Default constructor
      </summary>
	 <remarks></remarks>
    </member>
		
	<member name="M:ShinobiCharts.SChartPointStyle.#ctor(MonoTouch.Foundation.NSCoder)">
      <summary>A constructor that initializes the object from the data stored in the unarchiver object.
      </summary>
	  <remarks>This constructor is provided to allow the class to be initialized from an unarchiver (for example, during NIB deserialization).</remarks>
	  <param name="coder">The unarchiver object</param>
    </member>
        
    <member name="M:ShinobiCharts.SChartPointStyle.#ctor(MonoTouch.Foundation.NSObjectFlag)">
      <summary>Constructor to call on derived classes to skip initialization and merely allocate the object.
      </summary>
	  <remarks>You should not invoke this method directly.</remarks>
	  <param name="t">Unused sentinel value</param>
    </member>
		
	<member name="M:ShinobiCharts.SChartPointStyle.#ctor(System.IntPtr)">
      <summary>A constructor used when creating managed representations of unmanaged objects.
      </summary>
	  <remarks>You should not invoke this method directly.</remarks>
	  <param name="handle">Handle of the unmanaged object</param>
    </member>

	<member name="P:ShinobiCharts.SChartPointStyle.ClassHandle">
      <summary>The handle for this class.
      </summary>
	  <remarks>Not normally used by application code</remarks>
    </member>
        
	<member name="M:ShinobiCharts.SChartPointStyle.Dispose(System.Boolean)">
      <summary> Releases unmanaged resources.
      </summary>
	  <remarks></remarks>
	  <param name="disposing">True if called by Dispose, false if called from a finalizer</param>
    </member>

	<member name="M:ShinobiCharts.SChartPointStyle.ConformsToProtocol(System.IntPtr)">
      <summary>Internal - checks whether this object conforms to a protocol.
      </summary>
	  <remarks>Not normally called from application code - used by the Shinobi framework.</remarks>
	  <param name="protocol">The protocol</param>
	  <returns>True if the object conforms to the protocol</returns>
    </member>

    <member name="P:ShinobiCharts.SChartPointStyle.ShowPoints">
      <summary>Should a symbol be shown at each data point. 
      </summary>
		<remarks></remarks>
    </member>
        
    <member name="P:ShinobiCharts.SChartPointStyle.ShowPointsSet">
      <summary>
      </summary>
		<remarks></remarks>
    </member>
        
    <member name="P:ShinobiCharts.SChartPointStyle.Color">
      <summary> The color of the data points 
      </summary>
		<remarks></remarks>
    </member>
        
    <member name="P:ShinobiCharts.SChartPointStyle.ColorBelowBaseline">
      <summary> The color of the data points below the Baseline 
      </summary>
		<remarks></remarks>
    </member>
        
    <member name="P:ShinobiCharts.SChartPointStyle.Radius">
      <summary> The Radius of the default data point 
      </summary>
		<remarks></remarks>
    </member>
        
    <member name="P:ShinobiCharts.SChartPointStyle.InnerColor">
      <summary> The color of the inner sections of data points.
      </summary>
		<remarks></remarks>
    </member>
        
    <member name="P:ShinobiCharts.SChartPointStyle.InnerColorBelowBaseline">
      <summary>The color of the inner sections of data points when the chart series goes below its baseline.
      </summary>
		<remarks></remarks>
    </member>
        
    <member name="P:ShinobiCharts.SChartPointStyle.InnerRadius">
      <summary>The radius of the inner section of a data point.
      </summary>
		<remarks></remarks>
    </member>
        
    <member name="P:ShinobiCharts.SChartPointStyle.Gradient">
      <summary> The Gradient of the point - starting from the centre, this describes how rapidly the alpha fades.
      </summary>
		<remarks> 1.0 means that the edge is fully transparent, 0.0 means that the edge has the same alpha as the centre
		</remarks>
    </member>
        
    <member name="P:ShinobiCharts.SChartPointStyle.Texture">
      <summary> A PNG image to be used for each data point 
      </summary>
		<remarks></remarks>
    </member>
        
    <member name="M:ShinobiCharts.SChartPointStyle.SupplementStyle(ShinobiCharts.SChartPointStyle)">
      <summary> Updates this style object using the configuration of the passed in style.
      </summary>
	  <remarks></remarks>
	  <param name="style">The new style with which to update this style object.</param>
    </member>

      
		<member name="T:ShinobiCharts.SChartBandSeriesStyle">
			<summary>Manages the appearance of an instance of SChartBandSeries on a chart.
			</summary>
			<remarks>
				The band series is visualised as two line series, one for the High values and one for the Low, with an area fill between the lines.
				
				SChartBandSeriesStyle allows you to configure the appearance of various aspects of the series, such as:
				<list type="bullet">
					<item>
						<term>The width and color of the lines series.</term>
					</item>
					<item>
						<term>Whether the area between the lines series is filled, and the color of the fill if it is.</term>
					</item>
					<item>
						<term>The appearance of points in the series, both when they are selected and when they are not.</term>
					</item>
				</list>
			</remarks>
		</member>

    <member name="M:ShinobiCharts.SChartBandSeriesStyle.#ctor">
      <summary>Default constructor
      </summary>
	 <remarks></remarks>
    </member>
		
	<member name="M:ShinobiCharts.SChartBandSeriesStyle.#ctor(MonoTouch.Foundation.NSCoder)">
      <summary>A constructor that initializes the object from the data stored in the unarchiver object.
      </summary>
	  <remarks>This constructor is provided to allow the class to be initialized from an unarchiver (for example, during NIB deserialization).</remarks>
	  <param name="coder">The unarchiver object</param>
    </member>
        
    <member name="M:ShinobiCharts.SChartBandSeriesStyle.#ctor(MonoTouch.Foundation.NSObjectFlag)">
      <summary>Constructor to call on derived classes to skip initialization and merely allocate the object.
      </summary>
	  <remarks>You should not invoke this method directly.</remarks>
	  <param name="t">Unused sentinel value</param>
    </member>
		
	<member name="M:ShinobiCharts.SChartBandSeriesStyle.#ctor(System.IntPtr)">
      <summary>A constructor used when creating managed representations of unmanaged objects.
      </summary>
	  <remarks>You should not invoke this method directly.</remarks>
	  <param name="handle">Handle of the unmanaged object</param>
    </member>

	<member name="P:ShinobiCharts.SChartBandSeriesStyle.ClassHandle">
      <summary>The handle for this class.
      </summary>
	  <remarks>Not normally used by application code</remarks>
    </member>
       
	<member name="M:ShinobiCharts.SChartBandSeriesStyle.Dispose(System.Boolean)">
      <summary> Releases unmanaged resources.
      </summary>
	  <remarks></remarks>
	  <param name="disposing">True if called by Dispose, false if called from a finalizer</param>
    </member>
        
    <member name="P:ShinobiCharts.SChartBandSeriesStyle.ShowFill">
      <summary>Defines whether the area between the high and low lines is filled.
      </summary>
	  <remarks></remarks>
    </member>
        
    <member name="P:ShinobiCharts.SChartBandSeriesStyle.ShowFillSet">
      <summary>DEPRECATED - This will be removed from the API in a future commit.  This property should be private.
      </summary>
	  <remarks></remarks>
    </member>
        
    <member name="P:ShinobiCharts.SChartBandSeriesStyle.LineColorHigh">
      <summary> The Color of the high line.
      </summary>
	  <remarks></remarks>
    </member>
        
    <member name="P:ShinobiCharts.SChartBandSeriesStyle.LineColorLow">
      <summary> The Color of the low line.
      </summary>
		<remarks></remarks>
    </member>
        
    <member name="P:ShinobiCharts.SChartBandSeriesStyle.LineWidth">
      <summary>The width of each of the lines, in points.
      </summary>
		<remarks></remarks>
    </member>
        
    <member name="P:ShinobiCharts.SChartBandSeriesStyle.AreaColorNormal">
      <summary> The Color of the fill between the lines when the high line is above the low line 
      </summary>
		<remarks></remarks>
    </member>
        
    <member name="P:ShinobiCharts.SChartBandSeriesStyle.AreaColorInverted">
      <summary> The Color of the fill between the lines when the low line is above the high line 
      </summary>
		<remarks></remarks>
    </member>
        
    <member name="P:ShinobiCharts.SChartBandSeriesStyle.PointStyle">
      <summary>Manages the appearance of data points within the series.
      </summary>
		<remarks></remarks>
    </member>
        
    <member name="P:ShinobiCharts.SChartBandSeriesStyle.SelectedPointStyle">
      <summary>Manages the appearance of data points within the series which are selected.
      </summary>
		<remarks></remarks>
    </member>
        
    <member name="M:ShinobiCharts.SChartBandSeriesStyle.SupplementStyle(ShinobiCharts.SChartBandSeriesStyle)">
      <summary>Updates this style object using the configuration of the passed in style.
      </summary>
	  <remarks></remarks>
	  <param name="style">The new style with which to update this style object.</param>
    </member>

      
		<member name="T:ShinobiCharts.SChartBarColumnSeriesStyle">
			<summary>
				SChartBarColumnSeriesStyle manages the look of bar and column series on a chart.
			</summary>
			<remarks>
				<para>
					Contains any properties which are common to both bar and column series.
				</para><para>
					For properties which are specific to bar series, you should use the <see cref="T:ShinobiCharts.SChartBarSeriesStyle" />.
					For properties which are specific to column series, you should use the <see cref="T:ShinobiCharts.SChartColumnSeriesStyle" />.
				</para>
			</remarks>
		</member>

    <member name="M:ShinobiCharts.SChartBarColumnSeriesStyle.#ctor">
      <summary>Default constructor
      </summary>
	 <remarks></remarks>
    </member>
		
	<member name="M:ShinobiCharts.SChartBarColumnSeriesStyle.#ctor(MonoTouch.Foundation.NSCoder)">
      <summary>A constructor that initializes the object from the data stored in the unarchiver object.
      </summary>
	  <remarks>This constructor is provided to allow the class to be initialized from an unarchiver (for example, during NIB deserialization).</remarks>
	  <param name="coder">The unarchiver object</param>
    </member>
        
    <member name="M:ShinobiCharts.SChartBarColumnSeriesStyle.#ctor(MonoTouch.Foundation.NSObjectFlag)">
      <summary>Constructor to call on derived classes to skip initialization and merely allocate the object.
      </summary>
	  <remarks>You should not invoke this method directly.</remarks>
	  <param name="t">Unused sentinel value</param>
    </member>
		
	<member name="M:ShinobiCharts.SChartBarColumnSeriesStyle.#ctor(System.IntPtr)">
      <summary>A constructor used when creating managed representations of unmanaged objects.
      </summary>
	  <remarks>You should not invoke this method directly.</remarks>
	  <param name="handle">Handle of the unmanaged object</param>
    </member>

	<member name="P:ShinobiCharts.SChartBarColumnSeriesStyle.ClassHandle">
      <summary>The handle for this class.
      </summary>
	  <remarks>Not normally used by application code</remarks>
    </member>
       
	<member name="M:ShinobiCharts.SChartBarColumnSeriesStyle.Dispose(System.Boolean)">
      <summary> Releases unmanaged resources.
      </summary>
	  <remarks></remarks>
	  <param name="disposing">True if called by Dispose, false if called from a finalizer</param>
    </member>
        
    <member name="P:ShinobiCharts.SChartBarColumnSeriesStyle.ShowArea">
      <summary>Set this property to <c>true</c> to fill the area inside the bar/column.</summary>
		<remarks>This defaults to <c>true</c>.</remarks>
    </member>
        
    <member name="P:ShinobiCharts.SChartBarColumnSeriesStyle.ShowAreaWasSet">
      <summary>DEPRECATED - In future releases, this property will be taken off the API.  It is used internally, but shouldn't be set from the outside.
      </summary>
		<remarks></remarks>
    </member>
        
		<member name="P:ShinobiCharts.SChartBarColumnSeriesStyle.ShowAreaWithGradient">
			<summary>
				Set this property to <c>true</c> to add a gradient to the fill inside the bar/column.
			</summary>
			<remarks>
				If the area is not filled, this property won't have any effect. 
				When a gradient is applied to the fill, the color starts at AreaColor, and finishes at AreaColorGradient.
				The gradient isn't configurable.  It runs from left to right on column series, and from top to bottom on bar series.
				This defaults to <c>true</c>.
			</remarks>
		</member>
        
    <member name="P:ShinobiCharts.SChartBarColumnSeriesStyle.ShowAreaWithGradientWasSet">
      <summary>DEPRECATED - In future releases, this property will be taken off the API.  It is used internally, but shouldn't be set from the outside.
      </summary>
		<remarks></remarks>
    </member>
        
    <member name="P:ShinobiCharts.SChartBarColumnSeriesStyle.AreaColor">
      <summary> The fill Color of the area inside the bar/column if ShowArea is true.
      </summary>
		<remarks></remarks>
    </member>
        
    <member name="P:ShinobiCharts.SChartBarColumnSeriesStyle.AreaColorGradient">
      <summary> The Second fill Color of the area inside the bar/column if ShowAreaWithGradient is true.
      </summary>
		<remarks></remarks>
    </member>
        
    <member name="P:ShinobiCharts.SChartBarColumnSeriesStyle.AreaColorBelowBaseline">
      <summary> The fill Color of the area inside the bar/column if ShowArea is true when the data point is below the baseline of the series.
      </summary>
		<remarks>The baseline of the series is set by <see cref="P:ShinobiCharts.SChartCartesianSeries.Baseline" />.</remarks>
    </member>
       
    <member name="P:ShinobiCharts.SChartBarColumnSeriesStyle.AreaColorGradientBelowBaseline">
      <summary> The Second fill Color of the area inside the bar/column if ShowAreaWithGradient is true when the data point is below the baseline.
      </summary>
		<remarks>The baseline of the series is set by <see cref="P:ShinobiCharts.SChartCartesianSeries.Baseline" />.</remarks>
    </member>
        
    <member name="P:ShinobiCharts.SChartBarColumnSeriesStyle.LineColor">
      <summary> The UIColor of the outline of the bar/column.
      </summary>
		<remarks></remarks>
    </member>
        
    <member name="P:ShinobiCharts.SChartBarColumnSeriesStyle.LineColorBelowBaseline">
      <summary> The UIColor of the outline of the bar/column when the data point is below the baseline.
      </summary>
		<remarks>The baseline of the series is set by <see cref="P:ShinobiCharts.SChartCartesianSeries.Baseline" />.</remarks>
    </member>
        
    <member name="P:ShinobiCharts.SChartBarColumnSeriesStyle.LineWidth">
      <summary> The Width of the outline of the bar/column, in points.
      </summary>
		<remarks></remarks>
    </member>
        
    <member name="M:ShinobiCharts.SChartBarColumnSeriesStyle.SupplementStyle(ShinobiCharts.SChartBarColumnSeriesStyle)">
      <summary>Updates this style object using the settings from the passed-in style.
      </summary>
	  <remarks></remarks>
	  <param name="style">The style with which to configure this style object.</param>
    </member>

      
    <member name="T:ShinobiCharts.SChartBarSeries">
      <summary>Displays a bar series on the chart.
       </summary>
		<remarks>A bar series is visualized as a horizontal rectangle on the chart, where the width of the rectange equates to the x value of the data point.
			The area of the bar can be filled, depending on the style of the series.</remarks>
    </member>

    <member name="M:ShinobiCharts.SChartBarSeries.#ctor">
      <summary>Default constructor
      </summary>
	 <remarks></remarks>
    </member>
		
	<member name="M:ShinobiCharts.SChartBarSeries.#ctor(MonoTouch.Foundation.NSCoder)">
      <summary>A constructor that initializes the object from the data stored in the unarchiver object.
      </summary>
	  <remarks>This constructor is provided to allow the class to be initialized from an unarchiver (for example, during NIB deserialization).</remarks>
	  <param name="coder">The unarchiver object</param>
    </member>
        
    <member name="M:ShinobiCharts.SChartBarSeries.#ctor(MonoTouch.Foundation.NSObjectFlag)">
      <summary>Constructor to call on derived classes to skip initialization and merely allocate the object.
      </summary>
	  <remarks>You should not invoke this method directly.</remarks>
	  <param name="t">Unused sentinel value</param>
    </member>
		
	<member name="M:ShinobiCharts.SChartBarSeries.#ctor(System.IntPtr)">
      <summary>A constructor used when creating managed representations of unmanaged objects.
      </summary>
	  <remarks>You should not invoke this method directly.</remarks>
	  <param name="handle">Handle of the unmanaged object</param>
    </member>

	<member name="P:ShinobiCharts.SChartBarSeries.ClassHandle">
      <summary>The handle for this class.
      </summary>
	  <remarks>Not normally used by application code</remarks>
    </member>
       
	<member name="M:ShinobiCharts.SChartBarSeries.Dispose(System.Boolean)">
      <summary> Releases unmanaged resources.
      </summary>
	  <remarks></remarks>
	  <param name="disposing">True if called by Dispose, false if called from a finalizer</param>
    </member>
		
    <member name="P:ShinobiCharts.SChartBarSeries.Style">
      <summary>The style object for this series.
      </summary>
		<remarks>When a series is created, its style is set from the theme.
				If you wish to customize the look of the series, you can tweak the properties of the style to configure it correctly,
				or you can create a new style object and set it on the series.
		</remarks>
    </member>
        
		<member name="P:ShinobiCharts.SChartBarSeries.SelectedStyle">
			<summary>The selected style object for this series.
			</summary>
			<remarks>
				These style settings will be applied when the series is marked as selected (or a datapoint is selected).
				When a series is created, its style is set from the theme.
				If you wish to customize the look of the series, you can tweak the properties of the style to configure it correctly,
				or you can create a new style object and set it on the series.
			</remarks>
		</member>
		
      
    <member name="T:ShinobiCharts.SChartBarSeriesStyle">
      <summary>Manages the look and feel of an instance of SChartBarSeries.
      </summary>
			<remarks>
				SChartBarSeriesStyle currently inherits all of its behaviour from its parent, <see cref="T:ShinobiCharts.SChartBarColumnSeriesStyle" />.
			</remarks>
    </member>

    <member name="M:ShinobiCharts.SChartBarSeriesStyle.#ctor">
      <summary>Default constructor
      </summary>
	 <remarks></remarks>
    </member>
		
	<member name="M:ShinobiCharts.SChartBarSeriesStyle.#ctor(MonoTouch.Foundation.NSCoder)">
      <summary>A constructor that initializes the object from the data stored in the unarchiver object.
      </summary>
	  <remarks>This constructor is provided to allow the class to be initialized from an unarchiver (for example, during NIB deserialization).</remarks>
	  <param name="coder">The unarchiver object</param>
    </member>
        
    <member name="M:ShinobiCharts.SChartBarSeriesStyle.#ctor(MonoTouch.Foundation.NSObjectFlag)">
      <summary>Constructor to call on derived classes to skip initialization and merely allocate the object.
      </summary>
	  <remarks>You should not invoke this method directly.</remarks>
	  <param name="t">Unused sentinel value</param>
    </member>
		
	<member name="M:ShinobiCharts.SChartBarSeriesStyle.#ctor(System.IntPtr)">
      <summary>A constructor used when creating managed representations of unmanaged objects.
      </summary>
	  <remarks>You should not invoke this method directly.</remarks>
	  <param name="handle">Handle of the unmanaged object</param>
    </member>

	<member name="P:ShinobiCharts.SChartBarSeriesStyle.ClassHandle">
      <summary>The handle for this class.
      </summary>
	  <remarks>Not normally used by application code</remarks>
    </member>
       
	<member name="M:ShinobiCharts.SChartBarSeriesStyle.Dispose(System.Boolean)">
      <summary> Releases unmanaged resources.
      </summary>
	  <remarks></remarks>
	  <param name="disposing">True if called by Dispose, false if called from a finalizer</param>
    </member>
		

    <member name="T:ShinobiCharts.SChartBoxGestureStyle">
      <summary>Visual style properties for the box zoom feature.
      </summary>
		<remarks>
				<para>
					If you set the <see cref="P:ShinobiCharts.ShinobiChart.GesturePanType" /> property on a chart to <see cref="F:ShinobiCharts.SChartGesturePanType.BoxDraw" />,
					the chart will draw a box on the chart during a pan.
					When the pan is finished, the chart will zoom to the limits of the box.
				</para><para>
					The SChartBoxGestureStyle class manages the look and feel of the box gesture.
					An instance of the class is contained by the chart's theme.
					To update the look of the box gesture on a chart, you could use the following code:
					<code>chart.theme.boxGestureStyle.boxLineColor = [UIColor redColor];
[chart applyTheme];</code>
				</para><para>
					The definition of the chart theme can be found in <see cref="T:ShinobiCharts.SChartTheme" />.
				</para>
			</remarks>
    </member>
        
    <member name="M:ShinobiCharts.SChartBoxGestureStyle.#ctor">
      <summary>Default constructor
      </summary>
	 <remarks></remarks>
    </member>
		
	<member name="M:ShinobiCharts.SChartBoxGestureStyle.#ctor(MonoTouch.Foundation.NSCoder)">
      <summary>A constructor that initializes the object from the data stored in the unarchiver object.
      </summary>
	  <remarks>This constructor is provided to allow the class to be initialized from an unarchiver (for example, during NIB deserialization).</remarks>
	  <param name="coder">The unarchiver object</param>
    </member>
        
    <member name="M:ShinobiCharts.SChartBoxGestureStyle.#ctor(MonoTouch.Foundation.NSObjectFlag)">
      <summary>Constructor to call on derived classes to skip initialization and merely allocate the object.
      </summary>
	  <remarks>You should not invoke this method directly.</remarks>
	  <param name="t">Unused sentinel value</param>
    </member>
		
	<member name="M:ShinobiCharts.SChartBoxGestureStyle.#ctor(System.IntPtr)">
      <summary>A constructor used when creating managed representations of unmanaged objects.
      </summary>
	  <remarks>You should not invoke this method directly.</remarks>
	  <param name="handle">Handle of the unmanaged object</param>
    </member>

	<member name="P:ShinobiCharts.SChartBoxGestureStyle.ClassHandle">
      <summary>The handle for this class.
      </summary>
	  <remarks>Not normally used by application code</remarks>
    </member>
       
	<member name="M:ShinobiCharts.SChartBoxGestureStyle.Dispose(System.Boolean)">
      <summary> Releases unmanaged resources.
      </summary>
	  <remarks></remarks>
	  <param name="disposing">True if called by Dispose, false if called from a finalizer</param>
    </member>
		
    <member name="P:ShinobiCharts.SChartBoxGestureStyle.BoxLineColor">
      <summary>The color of the outline of the box that will be the new zoomed area.
      </summary>
		<remarks></remarks>
    </member>
        
    <member name="P:ShinobiCharts.SChartBoxGestureStyle.BoxLineWidth">
      <summary>The width of the outline of the box that will be the new zoomed area, in points.
      </summary>
		<remarks></remarks>
    </member>
        
    <member name="P:ShinobiCharts.SChartBoxGestureStyle.TrackingLineColor">
      <summary>The color of the lines that extend from the zoom box to the axes.
      </summary>
		<remarks></remarks>
    </member>

        
    <member name="P:ShinobiCharts.SChartBoxGestureStyle.TrackingLineWidth">
      <summary>The width of the lines that extend from the zoom box to the axes, in points.
      </summary>
		<remarks></remarks>
    </member>

      
		<member name="T:ShinobiCharts.SChartCandlestickSeries">
			<summary>A type of SChartSeries which displays Open-High-Low-Close data on a chart.</summary>
			<remarks>
				Each data point in a candlestick series is visualised as a thick candle between the open and close values, with 'wicks' indicating the high and low positions.
				
				Data points in a candlestick series will contain multiple values.
				This means that they will be instances of <see cref="T:ShinobiCharts.SChartMultiXDataPoint" /> or <see cref="T:ShinobiCharts.SChartMultiYDataPoint" />,
				depending on the orientation of the series.
				The keys for the values in each data point will be <see cref="P:ShinobiCharts.SChartCandlestickSeries.KeyOpen" />,
				<see cref="P:ShinobiCharts.SChartCandlestickSeries.KeyHigh" />, <see cref="P:ShinobiCharts.SChartCandlestickSeries.KeyLow" /> and
				<see cref="P:ShinobiCharts.SChartCandlestickSeries.KeyClose" />.
				
				In order to provide the Open, High, Low, and Close values to the chart, the data points in the candlestick series should implement either the
				<see cref="M:ShinobiCharts.SChartData.GetXValue(System.String)" /> method or the <see cref="M:ShinobiCharts.SChartData.GetYValue(System.String)" />
				method on the <see cref="T:ShinobiCharts.SChartData" /> protocol, depending on the series orientation.
				
				The series contains an instance of <see cref="T:ShinobiCharts.SChartCandlestickSeriesStyle" />, which manages the appearance of the series on the chart.
			</remarks>
		</member>

    <member name="M:ShinobiCharts.SChartCandlestickSeries.#ctor">
      <summary>Default constructor
      </summary>
	 <remarks></remarks>
    </member>
		
	<member name="M:ShinobiCharts.SChartCandlestickSeries.#ctor(MonoTouch.Foundation.NSCoder)">
      <summary>A constructor that initializes the object from the data stored in the unarchiver object.
      </summary>
	  <remarks>This constructor is provided to allow the class to be initialized from an unarchiver (for example, during NIB deserialization).</remarks>
	  <param name="coder">The unarchiver object</param>
    </member>
        
    <member name="M:ShinobiCharts.SChartCandlestickSeries.#ctor(MonoTouch.Foundation.NSObjectFlag)">
      <summary>Constructor to call on derived classes to skip initialization and merely allocate the object.
      </summary>
	  <remarks>You should not invoke this method directly.</remarks>
	  <param name="t">Unused sentinel value</param>
    </member>
		
	<member name="M:ShinobiCharts.SChartCandlestickSeries.#ctor(System.IntPtr)">
      <summary>A constructor used when creating managed representations of unmanaged objects.
      </summary>
	  <remarks>You should not invoke this method directly.</remarks>
	  <param name="handle">Handle of the unmanaged object</param>
    </member>

	<member name="P:ShinobiCharts.SChartCandlestickSeries.ClassHandle">
      <summary>The handle for this class.
      </summary>
	  <remarks>Not normally used by application code</remarks>
    </member>
        
	<member name="M:ShinobiCharts.SChartCandlestickSeries.Dispose(System.Boolean)">
      <summary> Releases unmanaged resources.
      </summary>
	  <remarks></remarks>
	  <param name="disposing">True if called by Dispose, false if called from a finalizer</param>
    </member>
        
    <member name="P:ShinobiCharts.SChartCandlestickSeries.Style">
      <summary>Manages the appearance of the candlestick series on the chart.
      </summary>
		<remarks>The default settings of the style are inherited from the chart theme.  You can tweak the appearance of the series by modifying the style.
		</remarks>
    </member>
        
    <member name="P:ShinobiCharts.SChartCandlestickSeries.SelectedStyle">
      <summary>Manages the appearance of the candlestick series when it is selected.
      </summary>
		<remarks>Style settings in this object will be applied when the series is marked as selected (or a point is selected).
			The default settings of the style are inherited from the chart theme.  You can tweak the appearance of the series by modifying the style.</remarks>
    </member>
    
	<member name="M:ShinobiCharts.SChartCandlestickSeries.GetPointStyle(ShinobiCharts.SChartInternalDataPoint,ShinobiCharts.SChartInternalDataPoint)">
		<summary> Specifies the style to use on a per-point basis.</summary>
		<remarks>
			<para>
				This method is called for each candlestick datapoint in the series and the standard implementation chooses to return either the style orselectedStyle object
				based on the <c>SelectionMode</c> and selected state of either the point or the series. Computationally expensive operations here will increase initial render time.
			</para>
			<para>
				Use the <c>YCoords</c> dictionary to access parameters unless you have setup a horizontal candle series. This method is also useful if you would like to base the
				styling of a candlestick point on data relating to the previous point. Here is an example of a simple rule:
			</para>
			<code>override public SChartCandlestickSeriesStyle GetPointStyle (SChartInternalDataPoint dataPoint, SChartInternalDataPoint previousDatapoint)
{
	SChartCandlestickSeriesStyle newStyle = base.GetPointStyle (dataPoint, previousDatapoint);
	float open = ((NSNumber)dataPoint.YValues[SChartCandlestickSeries.KeyOpen]).FloatValue;
	float close = ((NSNumber)dataPoint.YValues[SChartCandlestickSeries.KeyClose]).FloatValue;
	float priorClose = ((NSNumber)previousDatapoint.YValues[SChartCandlestickSeries.KeyClose]).FloatValue;
	if (close > priorClose &amp;&amp; close > open)
	{
		newStyle.OutlineColor = UIColor.Green;
		newStyle.RisingColor = UIColor.Clear;
		newStyle.RisingColorGradient = UIColor.Clear;
	}
	return newStyle;
}</code>
			<para>
				Note: The datapoints are "internal" at this point. Any values that are based on a time series may be relative to the anchor point and should be used
				in conjunction with the relevant axis if the absolute value is required. See <see cref="T:ShinobiCharts.SChartAxis" />.
			</para>
		</remarks>
		<param name="dataPoint">The data-point that will be styled by the returned style object.</param>
		<param name="previousDataPoint">The point that was passed to the datasource immediately prior to this one. Will be <c>null</c> for first point.</param>
	</member>
	
	<member name="M:ShinobiCharts.SChartCandlestickSeries.GetPointFillColor(ShinobiCharts.SChartInternalDataPoint,ShinobiCharts.SChartInternalDataPoint,ShinobiCharts.SChartCandlestickSeriesStyle)">
		<summary>Specifies the fill color for a candlestick on a per-point basis.</summary>
		<remarks>
			<para>
				This method is called for each candlestick point and the standard implementation returns the <c>RisingColor</c> or <c>FallingColo</c> of the style returned by
				<see cref="M:ShinobiCharts.SChartCandlestickSeries.GetPointStyle(ShinobiCharts.SChartInternalDataPoint,ShinobiCharts.SChartInternalDataPoint)" />. You should
				return a UIColor that will be the used for the candlestick fill regardless of any other style settings or selection.
			</para>
		</remarks>
		<param name="dataPoint">The data-point that will use the returned color.</param>
		<param name="previousDataPoint">The point that was passed to the datasource immediately prior to this one. Will be <c>null</c> for first point.</param>
		<param name="style">The style object that will be used to style this candlestick point.</param>
	</member>
	
	<member name="M:ShinobiCharts.SChartCandlestickSeries.GetPointGradientColor(ShinobiCharts.SChartInternalDataPoint,ShinobiCharts.SChartInternalDataPoint,ShinobiCharts.SChartCandlestickSeriesStyle)">
		<summary>Specifies the gradient fill color for a candlestick on a per-point basis.</summary>
		<remarks>
			<para>
				This method is called for each candlestick point and the standard implementation returns the <c>RisingColorGradient</c> or <c>FallingColorGradient</c> of the style returned by 
				<see cref="M:ShinobiCharts.SChartCandlestickSeries.GetPointStyle(ShinobiCharts.SChartInternalDataPoint,ShinobiCharts.SChartInternalDataPoint)" />.
				You should return a UIColor that will be the used for the candlestick gradient fill regardless of any other style settings or selection.
			</para>
		</remarks>
		<param name="dataPoint">The data-point that will use the returned color.</param>
		<param name="previousDataPoint">The point that was passed to the datasource immediately prior to this one. Will be <c>null</c> for first point.</param>
		<param name="style">The style object that will be used to style this candlestick point.</param>
	</member>
		
	<member name="P:ShinobiCharts.SChartCandlestickSeries.KeyClose">
		<summary></summary>
		<remarks></remarks>
	</member>

	<member name="P:ShinobiCharts.SChartCandlestickSeries.KeyHigh">
		<summary></summary>
		<remarks></remarks>
	</member>

	<member name="P:ShinobiCharts.SChartCandlestickSeries.KeyLow">
		<summary></summary>
		<remarks></remarks>
	</member>

	<member name="P:ShinobiCharts.SChartCandlestickSeries.KeyOpen">
		<summary></summary>
		<remarks></remarks>
	</member>


	<member name="T:ShinobiCharts.SChartCandlestickSeriesStyle">
		<summary>Manages the appearance of an instance of SChartCandlestickSeries on the chart.
		</summary>
		<remarks>
			<para>
				Each data point in a candlestick series is visualised as a thick candle between the open and close values,
				with 'wicks' indicating the high and low positions.
			</para><para>
				SChartCandlestickSeriesStyle inherits some of its behavior from its parent, <see cref="T:ShinobiCharts.SChartOHLCSeriesStyle" />.
				This controls things like the colors which are used for data points when their data values are rising or falling.
				Have a look at the API documentation of the parent class for more information.
			</para><para>
				This style object allows you to configure properties which are specific to the appearance of candlestick charts.
				These are:
				<list type="bullet">
					<item>
						<term>
							The color and width of the sticks (or 'wicks') at either end of the candle.
							See <see cref="P:ShinobiCharts.SChartCandlestickSeriesStyle.StickColor" /> or
							<see cref="P:ShinobiCharts.SChartCandlestickSeriesStyle.StickWidth" /> for more information.
						</term>
					</item>
					<item>
						<term>
							The color and width of the outline of the candle.
							See <see cref="P:ShinobiCharts.SChartCandlestickSeriesStyle.OutlineColor" /> and
							<see cref="P:ShinobiCharts.SChartCandlestickSeriesStyle.OutlineWidth" /> for more information.
						</term>
					</item>
				</list>
			</para>
		</remarks>
	</member>

    <member name="M:ShinobiCharts.SChartCandlestickSeriesStyle.#ctor">
      <summary>Default constructor
      </summary>
	 <remarks></remarks>
    </member>
		
	<member name="M:ShinobiCharts.SChartCandlestickSeriesStyle.#ctor(MonoTouch.Foundation.NSCoder)">
      <summary>A constructor that initializes the object from the data stored in the unarchiver object.
      </summary>
	  <remarks>This constructor is provided to allow the class to be initialized from an unarchiver (for example, during NIB deserialization).</remarks>
	  <param name="coder">The unarchiver object</param>
    </member>
        
    <member name="M:ShinobiCharts.SChartCandlestickSeriesStyle.#ctor(MonoTouch.Foundation.NSObjectFlag)">
      <summary>Constructor to call on derived classes to skip initialization and merely allocate the object.
      </summary>
	  <remarks>You should not invoke this method directly.</remarks>
	  <param name="t">Unused sentinel value</param>
    </member>
		
	<member name="M:ShinobiCharts.SChartCandlestickSeriesStyle.#ctor(System.IntPtr)">
      <summary>A constructor used when creating managed representations of unmanaged objects.
      </summary>
	  <remarks>You should not invoke this method directly.</remarks>
	  <param name="handle">Handle of the unmanaged object</param>
    </member>

	<member name="P:ShinobiCharts.SChartCandlestickSeriesStyle.ClassHandle">
      <summary>The handle for this class.
      </summary>
	  <remarks>Not normally used by application code</remarks>
    </member>
       
	<member name="M:ShinobiCharts.SChartCandlestickSeriesStyle.Dispose(System.Boolean)">
      <summary> Releases unmanaged resources.
      </summary>
	  <remarks></remarks>
	  <param name="disposing">True if called by Dispose, false if called from a finalizer</param>
    </member>
        
    <member name="P:ShinobiCharts.SChartCandlestickSeriesStyle.OutlineColor">
      <summary>The color of the candlestick's outline.
      </summary>
		<remarks></remarks>
    </member>
        
    <member name="P:ShinobiCharts.SChartCandlestickSeriesStyle.StickColor">
      <summary>The color of the candlestick's high and low sticks.
      </summary>
		<remarks></remarks>
    </member>
        
    <member name="P:ShinobiCharts.SChartCandlestickSeriesStyle.StickWidth">
      <summary>The width of the candlestick's high and low sticks, in points.
      </summary>
		<remarks></remarks>
    </member>
        
    <member name="P:ShinobiCharts.SChartCandlestickSeriesStyle.OutlineWidth">
      <summary>The width of the candlestick's outline, in points.
      </summary>
		<remarks></remarks>
    </member>
        
    <member name="M:ShinobiCharts.SChartCandlestickSeriesStyle.SupplementStyle(ShinobiCharts.SChartCandlestickSeriesStyle)">
      <summary>Updates this style object using the specified style.
      </summary>
	  <remarks></remarks>
	  <param name="style">The new style with which to update this style object.</param>
    </member>
        
		
    <member name="T:ShinobiCharts.SChartCrosshairStyle">
      <summary>Visual style properties for the cross hair object SChartCrosshair
      </summary>
		<remarks></remarks>
    </member>
        
    <member name="M:ShinobiCharts.SChartCrosshairStyle.#ctor">
      <summary>Default constructor
      </summary>
	 <remarks></remarks>
    </member>
		
	<member name="M:ShinobiCharts.SChartCrosshairStyle.#ctor(MonoTouch.Foundation.NSCoder)">
      <summary>A constructor that initializes the object from the data stored in the unarchiver object.
      </summary>
	  <remarks>This constructor is provided to allow the class to be initialized from an unarchiver (for example, during NIB deserialization).</remarks>
	  <param name="coder">The unarchiver object</param>
    </member>
        
    <member name="M:ShinobiCharts.SChartCrosshairStyle.#ctor(MonoTouch.Foundation.NSObjectFlag)">
      <summary>Constructor to call on derived classes to skip initialization and merely allocate the object.
      </summary>
	  <remarks>You should not invoke this method directly.</remarks>
	  <param name="t">Unused sentinel value</param>
    </member>
		
	<member name="M:ShinobiCharts.SChartCrosshairStyle.#ctor(System.IntPtr)">
      <summary>A constructor used when creating managed representations of unmanaged objects.
      </summary>
	  <remarks>You should not invoke this method directly.</remarks>
	  <param name="handle">Handle of the unmanaged object</param>
    </member>

	<member name="P:ShinobiCharts.SChartCrosshairStyle.ClassHandle">
      <summary>The handle for this class.
      </summary>
	  <remarks>Not normally used by application code</remarks>
    </member>
       
	<member name="M:ShinobiCharts.SChartCrosshairStyle.Dispose(System.Boolean)">
      <summary> Releases unmanaged resources.
      </summary>
	  <remarks></remarks>
	  <param name="disposing">True if called by Dispose, false if called from a finalizer</param>
    </member>
        
    <member name="P:ShinobiCharts.SChartCrosshairStyle.LineWidth">
      <summary> The Width of the lines from the target to the axes 
      </summary>
		<remarks></remarks>
    </member>

        
    <member name="P:ShinobiCharts.SChartCrosshairStyle.LineColor">
      <summary> The Color of the lines from the target to the axes 
      </summary>
		<remarks></remarks>
    </member>

        
    <member name="P:ShinobiCharts.SChartCrosshairStyle.DefaultFont">
      <summary> The font of the text in the Tooltip 
      </summary>
		<remarks></remarks>
    </member>

        
    <member name="P:ShinobiCharts.SChartCrosshairStyle.DefaultTextColor">
      <summary> The color of the text in the Tooltip 
      </summary>
		<remarks></remarks>
    </member>

        
    <member name="P:ShinobiCharts.SChartCrosshairStyle.DefaultLabelBackgroundColor">
      <summary> The background color of the labels in the Tooltip 
      </summary>
		<remarks></remarks>
    </member>

        
    <member name="P:ShinobiCharts.SChartCrosshairStyle.DefaultBackgroundColor">
      <summary> The background color of the Tooltip 
      </summary>
		<remarks></remarks>
    </member>

        
    <member name="P:ShinobiCharts.SChartCrosshairStyle.DefaultCornerRadius">
      <summary> The corner Radius of the Tooltip 
      </summary>
		<remarks></remarks>
    </member>

        
    <member name="P:ShinobiCharts.SChartCrosshairStyle.DefaultBorderWidth">
      <summary> The Width of the Tooltip border 
      </summary>
		<remarks></remarks>
    </member>

        
    <member name="P:ShinobiCharts.SChartCrosshairStyle.DefaultBorderColor">
      <summary> The color of the Tooltip border 
      </summary>
		<remarks></remarks>
    </member>

        
    <member name="P:ShinobiCharts.SChartCrosshairStyle.DefaultKeyValuesPerRow">
      <summary> The number of key-Value pairs displayed on each row of multi-Value Tooltips. 
      </summary>
		<remarks>Important: This property will be used internally by calling 'intValue'.</remarks>
    </member>
        
    <member name="M:ShinobiCharts.SChartCrosshairStyle.SupplementStyle(ShinobiCharts.SChartCrosshairStyle)">
      <summary> Supplements this Style object by taking styles this object doesn't have, from the argument `style` 
      </summary>
	  <remarks></remarks>
	  <param name="style"></param>
    </member>
		
		
    <member name="T:ShinobiCharts.SChartDataPoint">
      <summary>A single-valued (one X coordinate and one Y coordinate) data point</summary>
		<remarks> <para>In a ShinobiChart, one or more SChartSeries are visualised. The data displayed by these series is contained in a data series, 
				SChartDataSeries. And, finally, each of these data series contains individual data points. This class represents these data items. </para>
 				<para>Each SChartDataPoint represents a simple data point in a SChartDataSeries. 
				  The simple data point is made up of an X and a Y object (not multiple x or y objects). 
				  It doesn't need to know what these objects are, it merely looks after them. 
				  Knowing how to interpet and translate these objects onto a chart is the job of the axis on the chart, which is an instance of SChartAxis.</para>
		</remarks>
    </member>
        
    <member name="M:ShinobiCharts.SChartDataPoint.#ctor">
      <summary>Default constructor
      </summary>
	 <remarks></remarks>
    </member>
		
	<member name="M:ShinobiCharts.SChartDataPoint.#ctor(MonoTouch.Foundation.NSCoder)">
      <summary>A constructor that initializes the object from the data stored in the unarchiver object.
      </summary>
	  <remarks>This constructor is provided to allow the class to be initialized from an unarchiver (for example, during NIB deserialization).</remarks>
	  <param name="coder">The unarchiver object</param>
    </member>
        
    <member name="M:ShinobiCharts.SChartDataPoint.#ctor(MonoTouch.Foundation.NSObjectFlag)">
      <summary>Constructor to call on derived classes to skip initialization and merely allocate the object.
      </summary>
	  <remarks>You should not invoke this method directly.</remarks>
	  <param name="t">Unused sentinel value</param>
    </member>
		
	<member name="M:ShinobiCharts.SChartDataPoint.#ctor(System.IntPtr)">
      <summary>A constructor used when creating managed representations of unmanaged objects.
      </summary>
	  <remarks>You should not invoke this method directly.</remarks>
	  <param name="handle">Handle of the unmanaged object</param>
    </member>

	<member name="P:ShinobiCharts.SChartDataPoint.ClassHandle">
      <summary>The handle for this class.
      </summary>
	  <remarks>Not normally used by application code</remarks>
    </member>
       
	<member name="M:ShinobiCharts.SChartDataPoint.Dispose(System.Boolean)">
      <summary> Releases unmanaged resources.
      </summary>
	  <remarks></remarks>
	  <param name="disposing">True if called by Dispose, false if called from a finalizer</param>
    </member>
		
	<member name="M:ShinobiCharts.SChartDataPoint.ConformsToProtocol(System.IntPtr)">
      <summary>Internal - checks whether this object conforms to a protocol.
      </summary>
	  <remarks>Not normally called from application code - used by the Shinobi framework.</remarks>
	  <param name="protocol">The protocol</param>
	  <returns>True if the object conforms to the protocol</returns>
    </member>	
		
    <member name="P:ShinobiCharts.SChartDataPoint.XValue">
      <summary> The x value for this data point.
      </summary>
		<remarks></remarks>
    </member>
        
    <member name="P:ShinobiCharts.SChartDataPoint.YValue">
      <summary> The y value for this data point.
      </summary>
		<remarks>
		</remarks>
    </member>
        
    <member name="P:ShinobiCharts.SChartDataPoint.Index">
      <summary>The index of this data point in its series.
      </summary>
	  <remarks>
	  </remarks>
    </member>
        
    <member name="P:ShinobiCharts.SChartDataPoint.Selected">
      <summary>Defines whether this point is selected.
      </summary>
		<remarks>When set to true this data point will adopt a selected state.
				One effect of setting this property is that the style of the data point will change.
			The series will apply the selected style to this point, as opposed to the normal style.</remarks>
    </member>
      
      
    <member name="T:ShinobiCharts.SChartNumberRange">
      <summary>Represents numerical ranges on a chart axis (SChartAxis).</summary>
		<remarks>
				This is the likely range of choice for a SChartNumberAxis, but numerical ranges can also be applied to
				other axis types, including SChartDateTimeAxis and SChartCategoryAxis.
			</remarks>
    </member>
		
    <member name="M:ShinobiCharts.SChartNumberRange.#ctor(MonoTouch.Foundation.NSNumber,MonoTouch.Foundation.NSNumber)">
      <summary> Initializes the range with Number objects for the min and max. 
      </summary>
		<remarks></remarks>
    </member>
		
	<member name="M:ShinobiCharts.SChartNumberRange.#ctor(MonoTouch.Foundation.NSCoder)">
      <summary>A constructor that initializes the object from the data stored in the unarchiver object.
      </summary>
	  <remarks>This constructor is provided to allow the class to be initialized from an unarchiver (for example, during NIB deserialization).</remarks>
	  <param name="coder">The unarchiver object</param>
    </member>
        
    <member name="M:ShinobiCharts.SChartNumberRange.#ctor(MonoTouch.Foundation.NSObjectFlag)">
      <summary>Constructor to call on derived classes to skip initialization and merely allocate the object.
      </summary>
	  <remarks>You should not invoke this method directly.</remarks>
	  <param name="t">Unused sentinel value</param>
    </member>
		
	<member name="M:ShinobiCharts.SChartNumberRange.#ctor(System.IntPtr)">
      <summary>A constructor used when creating managed representations of unmanaged objects.
      </summary>
	  <remarks>You should not invoke this method directly.</remarks>
	  <param name="handle">Handle of the unmanaged object</param>
    </member>

	<member name="P:ShinobiCharts.SChartNumberRange.ClassHandle">
        <summary>The handle for this class.
        </summary>
	  <remarks>Not normally used by application code</remarks>
    </member>
        
    <member name="T:ShinobiCharts.SChartDataSeries">
      <summary>A set of data points to be visualized on the ShinobiChart. 
      </summary>
			<remarks>
				Each SChartSeries requires a set of data points that it will visually represent.
				The SChartDataSeries looks after these points.
				The set of data points it contains will adopt the SChartData protocol.
				SChartDataSeries is not concerned with style or aesthetics.
				All the properties defined here are related to the data only.
			</remarks>
    </member>

    <member name="M:ShinobiCharts.SChartDataSeries.#ctor">
      <summary>Default constructor
      </summary>
		<remarks></remarks>
    </member>
        
	<member name="M:ShinobiCharts.SChartDataSeries.#ctor(MonoTouch.Foundation.NSCoder)">
      <summary>A constructor that initializes the object from the data stored in the unarchiver object.
      </summary>
	  <remarks>This constructor is provided to allow the class to be initialized from an unarchiver (for example, during NIB deserialization).</remarks>
	  <param name="coder">The unarchiver object</param>
    </member>
        
    <member name="M:ShinobiCharts.SChartDataSeries.#ctor(MonoTouch.Foundation.NSObjectFlag)">
      <summary>Constructor to call on derived classes to skip initialization and merely allocate the object.
      </summary>
	  <remarks>You should not invoke this method directly.</remarks>
	  <param name="t">Unused sentinel value</param>
    </member>
		
	<member name="M:ShinobiCharts.SChartDataSeries.#ctor(System.IntPtr)">
      <summary>A constructor used when creating managed representations of unmanaged objects.
      </summary>
	  <remarks>You should not invoke this method directly.</remarks>
	  <param name="handle">Handle of the unmanaged object</param>
    </member>
        
	<member name="P:ShinobiCharts.SChartDataSeries.ClassHandle">
      <summary>The handle for this class.
      </summary>
	  <remarks>Not normally used by application code</remarks>
    </member>
       
	<member name="M:ShinobiCharts.SChartDataSeries.Dispose(System.Boolean)">
      <summary> Releases unmanaged resources.
      </summary>
	  <remarks></remarks>
	  <param name="disposing">True if called by Dispose, false if called from a finalizer</param>
    </member>
		
    <member name="P:ShinobiCharts.SChartDataSeries.DataPoints">
      <summary>The data points contained within this series.
      </summary>
			<remarks>
				<para>
					Data is provided to the chart from its SChartDatasource.
					The chart uses this data to build up its series, and to populate the SChartDataSeries for each one.
					When it is populated, each data series makes internal copies of the data objects which are provided to
					it from the chart datasource.
					These internal representations of the data are actually instances of an internal subclass of SChartDataPoint,
					but should be treated as instances of SChartDataPoint.
					The data series maintains an array of these internal data points.
				</para><para>
					This property allows you to access the internal data points which the data series holds.
					You can use these to display the value of a particular data point, for example in the chart crosshair.
				</para><para>
					Modifying the value of any of the data points in this array will have no effect on the display of the series
					in the chart.
					In order to refresh the chart to display new data, you should update the chart datasource, then call:
					<code>Chart.ReloadData();
Chart.RedrawChart();</code>
					This will force the chart to refresh its data, going back to the datasource to get it.
				</para>
			</remarks>
    </member>
        
    <member name="P:ShinobiCharts.SChartDataSeries.XValueKeys">
      <summary>The array of keys (NSString objects) for the x values in this series.
      </summary>
		<remarks>If each data point in the series contains multiple x values, the data series will contain a set of keys to allow us to get the correct x value back.
		</remarks>
    </member>
        
    <member name="P:ShinobiCharts.SChartDataSeries.YValueKeys">
      <summary>The array of keys (NSString objects) for the y values in this series.
      </summary>
		<remarks>If each data point in the series contains multiple y values, the data series will contain a set of keys to allow us to get the correct y value back.
		</remarks>
    </member>
		
		<member name="P:ShinobiCharts.SChartDataSeries.ValueKeys">
			<summary>An array of keys (NSString objects) for this series.</summary>
			<remarks>If the series requires values independent of the axes, then it should return the keys for those values here.
			The data source will then attempt to load these keys for this series.</remarks>
		</member>
        
    <member name="P:ShinobiCharts.SChartDataSeries.RangeX">
      	<summary>The range of the data values in X.</summary>
		<remarks></remarks>
    </member>
        
    <member name="P:ShinobiCharts.SChartDataSeries.RangeY">
      	<summary>The range of the data values in Y.</summary>
		<remarks></remarks>
    </member>
        
    <member name="P:ShinobiCharts.SChartDataSeries.AllXValues">
      <summary>An array containing all of the x values in this data series.
	  </summary>
		<remarks>The values in the array are ordered according to the order of the data points in the series.
				If a data point contains multiple x values, they are all added to this array.
		</remarks>
    </member>
        
    <member name="P:ShinobiCharts.SChartDataSeries.AllYValues">
      <summary>An array containing all of the y values in this data series.
      </summary>
		<remarks>The values in the array are ordered according to the order of the data points in the series
				If a data point contains multiple y values, they are all added to this array.
		</remarks>
    </member>

      
		<member name="T:ShinobiCharts.SChartCategoryAxis">
			<summary>A subclass of SChartAxis designed to work with discrete data points with no linear correlation between values.
			</summary>
			<remarks>
				<para>
					For the purposes of ranges, each data point value for a category axis is represented by an index
					(generated by the order in which data points are added to the series - but removing duplicates).
					This determines order and can be used to set ranges.
				</para><para>
					For example, for datapoint values "June", 5 and "Frog" passed to the chart in that order along a category axis:
					<list type="bullet">
						<item>
							<term>
								June is equivalent to 0.
							</term>
						</item>
						<item>
							<term>
								5 is equivalent to 1.
							</term>
						</item>
						<item>
							<term>
								Frog is equivalent to 2.
							</term>
						</item>
						<item>
							<term>
								The range of this data is 0 to 2.
							</term>
						</item>
						<item>
							<term>
								Setting a range of 0 to 1 would show June and 5, but not Frog.
							</term>
						</item>
					</list>
				</para><para>
					The data point values are not sorted and do not need to be members of the same class -
					as long as they respond to the 'description' selector.
					Each series linked to the Category Axis can only have one datapoint per Category.
					If a second data point is added with the same value, it will replace the first.
				</para><para>
					Since one cannot interpolate between '5' and a 'Frog', or group 'June' and '5' into an encapsulating value,
					minor tick marks are disabled on Category Axes.
					Major tick marks and labels, if enabled, will be shown for each datapoint.
					Setting major or minor tick frequencies will have no effect.
				</para>
			</remarks>
		</member>

    <member name="M:ShinobiCharts.SChartCategoryAxis.#ctor">
      <summary>Default constructor
      </summary>
		<remarks></remarks>
    </member>
        
    <member name="M:ShinobiCharts.SChartCategoryAxis.#ctor(ShinobiCharts.SChartNumberRange)">
      <summary>Create an SChartCategoryAxis with a number range representing the indices.
      </summary>
		<remarks>
			The range is based upon the index number of each category where 0 is the first category and n is the nth category,
			in the order in which the data points are presented to the chart. 
			The index number of a category can be found from the array <see cref="P:Shinobicharts.SChartCategoryAxis.Categories"/> -
			which contains the actual set of categories.
		</remarks>
	  <param name="range"></param>
    </member>
		
	<member name="M:ShinobiCharts.SChartCategoryAxis.#ctor(MonoTouch.Foundation.NSCoder)">
      <summary>A constructor that initializes the object from the data stored in the unarchiver object.
      </summary>
	  <remarks>This constructor is provided to allow the class to be initialized from an unarchiver (for example, during NIB deserialization).</remarks>
	  <param name="coder">The unarchiver object</param>
    </member>
        
    <member name="M:ShinobiCharts.SChartCategoryAxis.#ctor(MonoTouch.Foundation.NSObjectFlag)">
      <summary>Constructor to call on derived classes to skip initialization and merely allocate the object.
      </summary>
	  <remarks>You should not invoke this method directly.</remarks>
	  <param name="t">Unused sentinel value</param>
    </member>
		
	<member name="M:ShinobiCharts.SChartCategoryAxis.#ctor(System.IntPtr)">
      <summary>A constructor used when creating managed representations of unmanaged objects.
      </summary>
	  <remarks>You should not invoke this method directly.</remarks>
	  <param name="handle">Handle of the unmanaged object</param>
    </member>
        
	<member name="P:ShinobiCharts.SChartCategoryAxis.ClassHandle">
      <summary>The handle for this class.
      </summary>
	  <remarks>Not normally used by application code</remarks>
    </member>
       
	<member name="M:ShinobiCharts.SChartCategoryAxis.Dispose(System.Boolean)">
      <summary> Releases unmanaged resources.
      </summary>
	  <remarks></remarks>
	  <param name="disposing">True if called by Dispose, false if called from a finalizer</param>
    </member>
		
    <member name="P:ShinobiCharts.SChartCategoryAxis.Categories">
      <summary>	An array containing all of the Categories across all series linked to this axis.
      </summary>
			<remarks>
				This array should not be replaced or manipulated, but it can be used to link data point values to integer values.
				The DataIndex from the data source may not correspond to the index of the category.
			</remarks>
    </member>

      
		<member name="T:ShinobiCharts.SChartColumnSeries">
			<summary>Displays a column series on the chart.
			</summary>
			<remarks>
				A column series is visualized as a vertical rectangle on the chart, where the height of the rectange equates to
				the y value of the data point.
				The area of the column can be filled, depending on the style of the series.
			</remarks>
		</member>

    <member name="M:ShinobiCharts.SChartColumnSeries.#ctor">
      <summary>Default constructor
      </summary>
	 <remarks></remarks>
    </member>
		
	<member name="M:ShinobiCharts.SChartColumnSeries.#ctor(MonoTouch.Foundation.NSCoder)">
      <summary>A constructor that initializes the object from the data stored in the unarchiver object.
      </summary>
	  <remarks>This constructor is provided to allow the class to be initialized from an unarchiver (for example, during NIB deserialization).</remarks>
	  <param name="coder">The unarchiver object</param>
    </member>
        
    <member name="M:ShinobiCharts.SChartColumnSeries.#ctor(MonoTouch.Foundation.NSObjectFlag)">
      <summary>Constructor to call on derived classes to skip initialization and merely allocate the object.
      </summary>
	  <remarks>You should not invoke this method directly.</remarks>
	  <param name="t">Unused sentinel value</param>
    </member>
		
	<member name="M:ShinobiCharts.SChartColumnSeries.#ctor(System.IntPtr)">
      <summary>A constructor used when creating managed representations of unmanaged objects.
      </summary>
	  <remarks>You should not invoke this method directly.</remarks>
	  <param name="handle">Handle of the unmanaged object</param>
    </member>

	<member name="P:ShinobiCharts.SChartColumnSeries.ClassHandle">
      <summary>The handle for this class.
      </summary>
	  <remarks>Not normally used by application code</remarks>
    </member>
        
	<member name="M:ShinobiCharts.SChartColumnSeries.Dispose(System.Boolean)">
      <summary> Releases unmanaged resources.
      </summary>
	  <remarks></remarks>
	  <param name="disposing">True if called by Dispose, false if called from a finalizer</param>
    </member>
        
    <member name="P:ShinobiCharts.SChartColumnSeries.Style">
      <summary>The style object for this series.
      </summary>
		<remarks>When a series is created, its style is set from the theme.
				If you wish to customize the look of the series, you can tweak the properties of the style to configure
				it correctly, or you can create a new style object and set it on the series.
		</remarks>
    </member>
        
    <member name="P:ShinobiCharts.SChartColumnSeries.SelectedStyle">
      <summary>The selected style object for this series.
      </summary>
		<remarks>These style settings will be applied when the series is marked as selected (or a datapoint is selected).
			When a series is created, its style is set from the theme.
			If you wish to customize the look of the series, you can tweak the properties of the style to configure it correctly,
			or you can create a new style object and set it on the series.</remarks>
    </member>

      
    <member name="T:ShinobiCharts.SChartColumnSeriesStyle">
      <summary>Manages the look and feel of an instance of SChartColumnSeriesStyle.
      </summary>
		<remarks>SChartColumnSeriesStyle currently inherits all of its behaviour from its parent, SChartBarColumnSeriesStyle.
		</remarks>
    </member>

    <member name="M:ShinobiCharts.SChartColumnSeriesStyle.#ctor">
      <summary>Default constructor
      </summary>
	 <remarks></remarks>
    </member>
		
	<member name="M:ShinobiCharts.SChartColumnSeriesStyle.#ctor(MonoTouch.Foundation.NSCoder)">
      <summary>A constructor that initializes the object from the data stored in the unarchiver object.
      </summary>
	  <remarks>This constructor is provided to allow the class to be initialized from an unarchiver (for example, during NIB deserialization).</remarks>
	  <param name="coder">The unarchiver object</param>
    </member>
        
    <member name="M:ShinobiCharts.SChartColumnSeriesStyle.#ctor(MonoTouch.Foundation.NSObjectFlag)">
      <summary>Constructor to call on derived classes to skip initialization and merely allocate the object.
      </summary>
	  <remarks>You should not invoke this method directly.</remarks>
	  <param name="t">Unused sentinel value</param>
    </member>
		
	<member name="M:ShinobiCharts.SChartColumnSeriesStyle.#ctor(System.IntPtr)">
      <summary>A constructor used when creating managed representations of unmanaged objects.
      </summary>
	  <remarks>You should not invoke this method directly.</remarks>
	  <param name="handle">Handle of the unmanaged object</param>
    </member>

	<member name="P:ShinobiCharts.SChartColumnSeriesStyle.ClassHandle">
      <summary>The handle for this class.
      </summary>
	  <remarks>Not normally used by application code</remarks>
    </member>
       
	<member name="M:ShinobiCharts.SChartColumnSeriesStyle.Dispose(System.Boolean)">
      <summary> Releases unmanaged resources.
      </summary>
	  <remarks></remarks>
	  <param name="disposing">True if called by Dispose, false if called from a finalizer</param>
    </member>

		
    <member name="T:ShinobiCharts.SChartCrosshairTooltip">
      <summary>A text label that moves with the chart crosshair
      </summary>
	<remarks>	
		<para>To create a custom Tooltip - subclass this class and override the functions below. When the standard <see cref="T:ShinobiCharts.SChartCrosshair"/> moves position it will call the following functions in order:</para>
		<para><see cref="M:ShinobiCharts.SChartCrosshairTooltip.SetTooltipStyle"/></para>
		<para><see cref="M:ShinobiCharts.SChartCrosshairTooltip.SetDataPoint"/></para>
		<para><see cref="M:ShinobiCharts.SChartCrosshairTooltip.SetPosition"/></para>		
	</remarks>
	<altmember cref="T:ShinobiCharts.SChartCrosshair"/>		
    </member>
        
    <member name="M:ShinobiCharts.SChartCrosshairTooltip.#ctor">
      <summary>Default constructor
      </summary>
	 <remarks></remarks>
    </member>
		
	<member name="M:ShinobiCharts.SChartCrosshairTooltip.#ctor(System.Drawing.RectangleF)">
      <summary>	Create an SChartCanvasOverlay with frame RectangleF.
      </summary>
	  <remarks></remarks>
    </member>
	
	<member name="M:ShinobiCharts.SChartCrosshairTooltip.#ctor(System.Drawing.RectangleF,ShinobiCharts.ShinobiChart,ShinobiCharts.SChartCanvas)">
      <summary>	Create an SChartCanvasOverlay with frame RectangleF, for selected ShinobiChart.
      </summary>
		<remarks></remarks>
    </member>	
		
	<member name="M:ShinobiCharts.SChartCrosshairTooltip.#ctor(MonoTouch.Foundation.NSCoder)">
      <summary>A constructor that initializes the object from the data stored in the unarchiver object.
      </summary>
	  <remarks>This constructor is provided to allow the class to be initialized from an unarchiver (for example, during NIB deserialization).</remarks>
	  <param name="coder">The unarchiver object</param>
    </member>
        
    <member name="M:ShinobiCharts.SChartCrosshairTooltip.#ctor(MonoTouch.Foundation.NSObjectFlag)">
      <summary>Constructor to call on derived classes to skip initialization and merely allocate the object.
      </summary>
	  <remarks>You should not invoke this method directly.</remarks>
	  <param name="t">Unused sentinel value</param>
    </member>
		
	<member name="M:ShinobiCharts.SChartCrosshairTooltip.#ctor(System.IntPtr)">
      <summary>A constructor used when creating managed representations of unmanaged objects.
      </summary>
	  <remarks>You should not invoke this method directly.</remarks>
	  <param name="handle">Handle of the unmanaged object</param>
    </member>

	<member name="P:ShinobiCharts.SChartCrosshairTooltip.ClassHandle">
      <summary>The handle for this class.
      </summary>
	  <remarks>Not normally used by application code</remarks>
    </member>
        
	<member name="M:ShinobiCharts.SChartCrosshairTooltip.Dispose(System.Boolean)">
      <summary> Releases unmanaged resources.
      </summary>
	  <remarks></remarks>
	  <param name="disposing">True if called by Dispose, false if called from a finalizer</param>
    </member>

    <member name="P:ShinobiCharts.SChartCrosshairTooltip.Label">
      <summary>This is the label that this tooltip uses to display the related data point info.
      </summary>
	  <remarks></remarks>
    </member>
		
		<member name="M:ShinobiCharts.SChartCrosshairTooltip.SetDefaults">
			<summary>A method that is called to setup default properties of the tooltip (such as Inset and Label.)</summary>
			<remarks></remarks>
		</member>
        
    <member name="M:ShinobiCharts.SChartCrosshairTooltip.OnSettingTooltipStyle(ShinobiCharts.SChartCrosshairStyle)">
      <summary> Passes in the Crosshair Style object to update the look and feel of the Tooltip. Called by the standard Crosshair. 
      </summary>
	  <remarks></remarks>
	  <param name="style"></param>
    </member>
        
    <member name="M:ShinobiCharts.SChartCrosshairTooltip.OnSettingDataPoint(ShinobiCharts.SChartData,ShinobiCharts.SChartSeries,ShinobiCharts.ShinobiChart)">
      <summary> Passes in information about the current Crosshair data point. To convert dataPoint to a useful value. Called by the standard Crosshair. 
      </summary>
	  <remarks></remarks>
	  <param name="dataPoint"></param>
	  <param name="series"></param>
	  <param name="chart"></param>
    </member>
        
    <member name="M:ShinobiCharts.SChartCrosshairTooltip.OnSettingPosition(ShinobiCharts.SChartPoint,ShinobiCharts.SChartCanvas)">
      <summary> Passes in the Position of the Crosshair target and the current Canvas. This allows Positioning of the Tooltip, using the Canvas to do border checks. Called by the standard Crosshair. 
      </summary>
	  <remarks></remarks>
	  <param name="pos"></param>
 	  <param name="canvas"></param>
    </member>

    <member name="M:ShinobiCharts.SChartCrosshairTooltip.OnSettingResolvedDataPoint(ShinobiCharts.SChartPoint,ShinobiCharts.SChartSeries,ShinobiCharts.ShinobiChart)">
      <summary> Passes in information about the current crosshair data point's resolved value. You can use dataPoint to obtain the interpolated value. Called by the standard Crosshair. 
      </summary>
	  <remarks></remarks>
	  <param name="dataPoint"></param>
	  <param name="series"></param>
	  <param name="chart"></param>
    </member>
		
		<member name="M:ShinobiCharts.SChartCrosshairTooltip.LayoutContents">
			<summary>This method is called everytime the tooltip needs to layout its contents and is called as part of OnSettingPosition.</summary>
			<remarks></remarks>
		</member>
		
		<member name="P:ShinobiCharts.SChartCrosshairTooltip.Inset">
			<summary>The inset that is used in the implementation of layoutContents for all subviews.</summary>
			<remarks></remarks>
		</member>
        
    <member name="M:ShinobiCharts.SChartCrosshairTooltip.OnFloatingAt(System.Drawing.PointF)">
      <summary> When the crosshair is in floating mode, this is called for the current floating-position.
 This is primarily for use in a subclass, where the label text can be set to a custom string.
 By default, no useful information is shown in the label. Called by the standard Crosshair. 
      </summary>
	  <remarks></remarks>
	  <param name="coords"></param>
    </member>
        
      
    <member name="T:ShinobiCharts.SChartCrosshairMultiValueTooltip">
      <summary>A crosshair tooltip with multiple labels, for use with multi-valued data
      </summary>
	 <remarks></remarks>
    </member>
        
    <member name="M:ShinobiCharts.SChartCrosshairMultiValueTooltip.#ctor">
      <summary>Default constructor
      </summary>
	 <remarks></remarks>
    </member>
		
	<member name="M:ShinobiCharts.SChartCrosshairMultiValueTooltip.#ctor(System.Drawing.RectangleF)">
      <summary>	Create an SChartCanvasOverlay with frame RectangleF.
      </summary>
	  <remarks></remarks>
    </member>
	
	<member name="M:ShinobiCharts.SChartCrosshairMultiValueTooltip.#ctor(System.Drawing.RectangleF,ShinobiCharts.ShinobiChart,ShinobiCharts.SChartCanvas)">
      <summary>	Create an SChartCanvasOverlay with frame RectangleF, for selected ShinobiChart.
      </summary>
		<remarks></remarks>
    </member>	
		
	<member name="M:ShinobiCharts.SChartCrosshairMultiValueTooltip.#ctor(MonoTouch.Foundation.NSCoder)">
      <summary>A constructor that initializes the object from the data stored in the unarchiver object.
      </summary>
	  <remarks>This constructor is provided to allow the class to be initialized from an unarchiver (for example, during NIB deserialization).</remarks>
	  <param name="coder">The unarchiver object</param>
    </member>
        
    <member name="M:ShinobiCharts.SChartCrosshairMultiValueTooltip.#ctor(MonoTouch.Foundation.NSObjectFlag)">
      <summary>Constructor to call on derived classes to skip initialization and merely allocate the object.
      </summary>
	  <remarks>You should not invoke this method directly.</remarks>
	  <param name="t">Unused sentinel value</param>
    </member>
		
	<member name="M:ShinobiCharts.SChartCrosshairMultiValueTooltip.#ctor(System.IntPtr)">
      <summary>A constructor used when creating managed representations of unmanaged objects.
      </summary>
	  <remarks>You should not invoke this method directly.</remarks>
	  <param name="handle">Handle of the unmanaged object</param>
    </member>

	<member name="P:ShinobiCharts.SChartCrosshairMultiValueTooltip.ClassHandle">
      <summary>The handle for this class.
      </summary>
	  <remarks>Not normally used by application code</remarks>
    </member>
        
	<member name="M:ShinobiCharts.SChartCrosshairMultiValueTooltip.Dispose(System.Boolean)">
      <summary> Releases unmanaged resources.
      </summary>
	  <remarks></remarks>
	  <param name="disposing">True if called by Dispose, false if called from a finalizer</param>
    </member>

    <member name="P:ShinobiCharts.SChartCrosshairMultiValueTooltip.Labels">
      <summary>An array of labels that contains a label for each display key and each display value (as dictated by GetKeyValueDisplayPairs()).
      </summary>
	 <remarks></remarks>
    </member>
		
		<member name="M:ShinobiCharts.SChartCrosshairMultiValueTooltip.GetKeyValueDisplayPairs(ShinobiCharts.SChartData,ShinobiCharts.SChartSeries,ShinobiCharts.SChartAxis,ShinobiCharts.SChartAxis)">
			<summary>Returns a dictionary of key-value pairs that will be displayed in this tooltip.</summary>
			<remarks>
				For example an OHLC series with a multi-y data point will return a dictionary with four entries.
				The keys will be "Open", "High", "Low", "Close" as returned by the series method SChartSeries.StringFor,
				with corresponding values from the given data point.
				The default behaviour is to use the methods <see cref="M:ShinobiCharts.SChartSeries.StringFor(System.String,ShinobiCharts.SChartData)" />
				and <see cref="M:ShinobiCharts.SChartSeries.StringFor(System.String,ShinobiCharts.SChartData,ShinobiCharts.SChartAxis)" />
				to retrieve the desired display strings for each key and each value.
				This means that if you only need to change the text that is displayed for each key or value it is likely less
				work to subclass your series and override these methods.
			</remarks>
			<param name="dataPoint">The data point that the toolip is attempting to display values for.</param>
			<param name="series">The series that dataPoint belongs to.</param>
			<param name="xAxis">The x-axis that the series is linked to.</param>
			<param name="yAxis">The y-axis that the series is linked to.</param>
			<returns>A dictionary of NSString objects that are to be displayed in this tooltip.</returns>
		</member>
		
		<member name="M:ShinobiCharts.SChartCrosshairMultiValueTooltip.GetMainLabelString(ShinobiCharts.SChartData,ShinobiCharts.SChartSeries,ShinobiCharts.SChartAxis,ShinobiCharts.SChartAxis)">
			<summary>Returns the string that will be used as the main label on this tooltip.</summary>
			<remarks>
				The default beahviour of this method is to return string representations of the x and y values,
				where no multi-values exist, as formatted by the appropriate axis.
			</remarks>
			<param name="dataPoint">The data point that the toolip is attempting to display values for.</param>
			<param name="series">The series that dataPoint belongs to.</param>
			<param name="xAxis">The x-axis that the series is linked to.</param>
			<param name="yAxis">The y-axis that the series is linked to.</param>
			<returns>A string representing the text to be displayed in this tooltip's main label.</returns>
		</member>

     
		<member name="T:ShinobiCharts.SChartDateFrequency">
			<summary>The desired frequency of tick marks on an SChartDateTimeAxis</summary>
			<remarks>
				<para>
					An SChartDateFrequency is used to specify the desired frequency of tick marks on a <see cref="T:ShinobiCharts.SChartDateTimeAxis"/>.
					For example, a frequency of 2 hours will cause the axis to attempt to display a tick mark at every 2 hour mark.
					No class type other than SChartDateFrequency (or one of its subclasses) may be used to define a date frequency
					on the axis.
				</para><para>
					A frequency of a particular calendar unit may be set from one of the following supported units:
					year, month, week, day, hour, minute, second.
					This can be done by either: 
					<list type="bullet">
						<item>
							<term>Initialising an `SChartDateFrequency` object, then using the setter method for the appropriate unit of time (as listed above).</term>
						</item>
						<item>
							<term>Using one of the convenience init methods provided (such as `initWithSecond:`).</term>
						</item>
						<item>
							<term>Using one of the factory methods provided (such as `dateFrequencyWithSecond:`).</term>
						</item>
					</list>
				</para><para>
					A frequency can only be specified in terms of one type of calendar unit.
					For example - a frequency of 1 hour AND 3 minutes cannot be set.
					In this case the frequency can only be of the type hour or of the type minute and will be set to the last
					component specified.
					To specify partial units it is necessary to use the lowest denominator - in the case of 1 hour and 3 minutes
					we would create a frequency of 63 minutes.
				</para><para>
					If an attempt is made to set frequency to a negative or zero value, a default of 1 for the given component will be set.
					For example, if an attempt is made to set a frequency of -9 years the actual frequency set will be 1 year.
				</para><para>
					Once the frequency is created, it is given a frequency denomination.
				</para>
			</remarks>
		</member>
        
 	<member name="M:ShinobiCharts.SChartDateFrequency.#ctor(MonoTouch.Foundation.NSCoder)">
      <summary>A constructor that initializes the object from the data stored in the unarchiver object.
      </summary>
	  <remarks>This constructor is provided to allow the class to be initialized from an unarchiver (for example, during NIB deserialization).</remarks>
	  <param name="coder">The unarchiver object</param>
    </member>
        
    <member name="M:ShinobiCharts.SChartDateFrequency.#ctor(MonoTouch.Foundation.NSObjectFlag)">
      <summary>Constructor to call on derived classes to skip initialization and merely allocate the object.
      </summary>
	  <remarks>You should not invoke this method directly.</remarks>
	  <param name="t">Unused sentinel value</param>
    </member>
		
	<member name="M:ShinobiCharts.SChartDateFrequency.#ctor(System.IntPtr)">
      <summary>A constructor used when creating managed representations of unmanaged objects.
      </summary>
	  <remarks>You should not invoke this method directly.</remarks>
	  <param name="handle">Handle of the unmanaged object</param>
    </member>
        
	<member name="P:ShinobiCharts.SChartDateFrequency.ClassHandle">
        <summary>
        The handle for this class.
        </summary>
	  <remarks>Not normally used by application code</remarks>
    </member>	

	<member name="M:ShinobiCharts.SChartDateFrequency.ConformsToProtocol(System.IntPtr)">
      <summary>Internal - checks whether this object conforms to a protocol.
      </summary>
	  <remarks>Not normally called from application code - used by the Shinobi framework.</remarks>
	  <param name="protocol">The protocol</param>Supp
	  <returns>True if the object conforms to the protocol</returns>
    </member>

   <member name="P:ShinobiCharts.SChartDateFrequency.Denomination">
      <summary>The frequency denomination of the date frequency object.
      </summary>
		<remarks></remarks>
    </member>
        
    <member name="M:ShinobiCharts.SChartDateFrequency.CreateWithYear(System.Int32)">
      <summary>Returns a new date frequency object, with a frequency of the specified number of years.
      </summary>
		<remarks></remarks>
			<para name="newYear">The frequency to use, in years.</para>
    </member>
        
    <member name="M:ShinobiCharts.SChartDateFrequency.CreateWithMonth(System.Int32)">
      <summary>Returns a new date frequency object, with a frequency of the specified number of months.
      </summary>
		<remarks></remarks>
			<param name="newMonth">The frequency to use, in months.</param>
    </member>
        
    <member name="M:ShinobiCharts.SChartDateFrequency.CreateWithWeek(System.Int32)">
      <summary>Returns a new date frequency object, with a frequency of the specified number of weeks.
      </summary>
		<remarks></remarks>
			<param name="newWeek">The frequency to use, in weeks.</param>
    </member>
        
    <member name="M:ShinobiCharts.SChartDateFrequency.CreateWithDay(System.Int32)">
      <summary>Returns a new date frequency object, with a frequency of the specified number of days.
      </summary>
		<remarks></remarks>
			<param name="newDay">The frequency to use, in days.</param>
    </member>
        
    <member name="M:ShinobiCharts.SChartDateFrequency.CreateWithHour(System.Int32)">
      <summary>Returns a new date frequency object, with a frequency of the specified number of hours.
      </summary>
		<remarks></remarks>
			<param name="newHour">The frequency to use, in hours.</param>
    </member>
        
    <member name="M:ShinobiCharts.SChartDateFrequency.CreateWithMinute(System.Int32)">
      <summary>Returns a new date frequency object, with a frequency of the specified number of minutes.
      </summary>
		<remarks></remarks>
			<param name="newMinute">The frequency to use, in minutes.</param>
    </member>
        
    <member name="M:ShinobiCharts.SChartDateFrequency.CreateWithSecond(System.Int32)">
      <summary>Returns a new date frequency object, with a frequency of the specified number of seconds.
      </summary>
		<remarks></remarks>
			<param name="newSecond">The frequency to use, in seconds.</param>
    </member>
		
		<member name="M:ShinobiCharts.SChartDateFrequency.SetYear(System.Int32)">
			<summary>Set the date frequency to have a value of the specified number of years.</summary>
			<remarks>Before the new value is set, we clear any existing values in the object.</remarks>
			<param name="v">The new frequency to set, in years.</param>
		</member>
		
		<member name="M:ShinobiCharts.SChartDateFrequency.SetMonth(System.Int32)">
			<summary>Set the date frequency to have a value of the specified number of months.</summary>
			<remarks>Before the new value is set, we clear any existing values in the object.</remarks>
			<param name="v">The new frequency to set, in months.</param>
		</member>
		
		<member name="M:ShinobiCharts.SChartDateFrequency.SetWeek(System.Int32)">
			<summary>Set the date frequency to have a value of the specified number of weeks.</summary>
			<remarks>Before the new value is set, we clear any existing values in the object.</remarks>
			<param name="v">The new frequency to set, in weeks.</param>
		</member>
		
		<member name="M:ShinobiCharts.SChartDateFrequency.SetDay(System.Int32)">
			<summary>Set the date frequency to have a value of the specified number of days.</summary>
			<remarks>Before the new value is set, we clear any existing values in the object.</remarks>
			<param name="v">The new frequency to set, in days.</param>
		</member>
		
		<member name="M:ShinobiCharts.SChartDateFrequency.SetHour(System.Int32)">
			<summary>Set the date frequency to have a value of the specified number of hours.</summary>
			<remarks>Before the new value is set, we clear any existing values in the object.</remarks>
			<param name="v">The new frequency to set, in hours.</param>
		</member>
		
		<member name="M:ShinobiCharts.SChartDateFrequency.SetMinute(System.Int32)">
			<summary>Set the date frequency to have a value of the specified number of minutes.</summary>
			<remarks>Before the new value is set, we clear any existing values in the object.</remarks>
			<param name="v">The new frequency to set, in minutes.</param>
		</member>
		
		<member name="M:ShinobiCharts.SChartDateFrequency.SetSecond(System.Int32)">
			<summary>Set the date frequency to have a value of the specified number of seconds.</summary>
			<remarks>Before the new value is set, we clear any existing values in the object.</remarks>
			<param name="v">The new frequency to set, in seconds.</param>
		</member>
        
    <member name="P:ShinobiCharts.SChartDateFrequency.Year">
      <summary>DEPRECATED - We will remove this from the public API in a future commit, as it is only intended for internal use.
      </summary>
		<remarks></remarks>
    </member>
        
    <member name="P:ShinobiCharts.SChartDateFrequency.Month">
      <summary>DEPRECATED - We will remove this from the public API in a future commit, as it is only intended for internal use.
      </summary>
		<remarks></remarks>
    </member>
        
    <member name="P:ShinobiCharts.SChartDateFrequency.Week">
      <summary>DEPRECATED - We will remove this from the public API in a future commit, as it is only intended for internal use.
      </summary>
		<remarks></remarks>
    </member>
        
    <member name="P:ShinobiCharts.SChartDateFrequency.Day">
      <summary>DEPRECATED - We will remove this from the public API in a future commit, as it is only intended for internal use.
      </summary>
		<remarks></remarks>
    </member>
        
    <member name="P:ShinobiCharts.SChartDateFrequency.Hour">
      <summary>DEPRECATED - We will remove this from the public API in a future commit, as it is only intended for internal use.
      </summary>
		<remarks></remarks>
    </member>
        
    <member name="P:ShinobiCharts.SChartDateFrequency.Minute">
      <summary>DEPRECATED - We will remove this from the public API in a future commit, as it is only intended for internal use.
      </summary>
		<remarks></remarks>
    </member>
        
    <member name="P:ShinobiCharts.SChartDateFrequency.Second">
      <summary>DEPRECATED - We will remove this from the public API in a future commit, as it is only intended for internal use.
      </summary>
		<remarks></remarks>
    </member>
        
    <member name="M:ShinobiCharts.SChartDateFrequency.ToSeconds">
      <summary>The number of seconds, regardless of the denomination used to create it
      </summary>
	  <remarks></remarks>
	  <returns>The number of seconds, regardless of the denomination used to create it</returns>
    </member>

      
    <member name="T:ShinobiCharts.SChartDateRange">
      <summary>An instance of SChartRange that is specific to NSDate - with each element in the range represented by an NSDate object.</summary>
		<remarks>This is the likely range of choice for an SChartDateTimeAxis. </remarks>
    </member>
        
    <member name="M:ShinobiCharts.SChartDateRange.#ctor(MonoTouch.Foundation.NSDate,MonoTouch.Foundation.NSDate)">
      <summary>Initializes and returns a newly allocated range object with the specified minimum and maximum dates.
      </summary>
		<remarks></remarks>
			<param name="min">The minimum date in the range.</param>
			<param name="max">The maximum date in the range.</param>
			<returns>An initialized range object or <c>null</c> if the range couldn't be created.</returns>
    </member>
		
	<member name="M:ShinobiCharts.SChartDateRange.#ctor(MonoTouch.Foundation.NSCoder)">
      <summary>A constructor that initializes the object from the data stored in the unarchiver object.
      </summary>
	  <remarks>This constructor is provided to allow the class to be initialized from an unarchiver (for example, during NIB deserialization).</remarks>
	  <param name="coder">The unarchiver object</param>
    </member>
        
    <member name="M:ShinobiCharts.SChartDateRange.#ctor(MonoTouch.Foundation.NSObjectFlag)">
      <summary>Constructor to call on derived classes to skip initialization and merely allocate the object.
      </summary>
	  <remarks>You should not invoke this method directly.</remarks>
	  <param name="t">Unused sentinel value</param>
    </member>
		
	<member name="M:ShinobiCharts.SChartDateRange.#ctor(System.IntPtr)">
      <summary>A constructor used when creating managed representations of unmanaged objects.
      </summary>
	  <remarks>You should not invoke this method directly.</remarks>
	  <param name="handle">Handle of the unmanaged object</param>
    </member>

	<member name="P:ShinobiCharts.SChartDateRange.ClassHandle">
        <summary>The handle for this class.
        </summary>
	  <remarks>Not normally used by application code</remarks>
    </member>
        
	<member name="M:ShinobiCharts.SChartDateRange.Dispose(System.Boolean)">
      <summary> Releases unmanaged resources.
      </summary>
	  <remarks></remarks>
	  <param name="disposing">True if called by Dispose, false if called from a finalizer</param>
    </member>

    <member name="P:ShinobiCharts.SChartDateRange.MinimumAsDate">
      <summary>The minimum of the range as an NSDate object.
      </summary>
		<remarks></remarks>
    </member>
        
    <member name="P:ShinobiCharts.SChartDateRange.MaximumAsDate">
      <summary>The maximum of the range as an NSDate object.
      </summary>
		<remarks></remarks>
    </member>


		<member name="T:ShinobiCharts.SChartDateTimeAxis">
			<summary>An axis that works with date/time values </summary>
			<remarks>The frequency values for tick marks are expected to be <see cref="T:ShinobiCharts.SChartDateFrequency"/> objects.</remarks>
		</member>

		<member name="M:ShinobiCharts.SChartDateTimeAxis.#ctor">
			<summary>Default constructor</summary>
			<remarks></remarks>
		</member>

		<member name="M:ShinobiCharts.SChartDateTimeAxis.#ctor(ShinobiCharts.SChartDateRange)">
			<summary> Initialize with an NSDate specific range.</summary>
			<remarks></remarks>
			<param name="range"></param>
		</member>

		<member name="M:ShinobiCharts.SChartDateTimeAxis.#ctor(MonoTouch.Foundation.NSCoder)">
			<summary>A constructor that initializes the object from the data stored in the unarchiver object.</summary>
			<remarks>This constructor is provided to allow the class to be initialized from an unarchiver (for example, during NIB deserialization).</remarks>
			<param name="coder">The unarchiver object</param>
		</member>

		<member name="M:ShinobiCharts.SChartDateTimeAxis.#ctor(MonoTouch.Foundation.NSObjectFlag)">
			<summary>Constructor to call on derived classes to skip initialization and merely allocate the object.</summary>
			<remarks>You should not invoke this method directly.</remarks>
			<param name="t">Unused sentinel value</param>
		</member>

		<member name="M:ShinobiCharts.SChartDateTimeAxis.#ctor(System.IntPtr)">
			<summary>A constructor used when creating managed representations of unmanaged objects.</summary>
			<remarks>You should not invoke this method directly.</remarks>
			<param name="handle">Handle of the unmanaged object</param>
		</member>

		<member name="P:ShinobiCharts.SChartDateTimeAxis.ClassHandle">
			<summary>The handle for this class.</summary>
			<remarks>Not normally used by application code</remarks>
		</member>

		<member name="M:ShinobiCharts.SChartDateTimeAxis.Dispose(System.Boolean)">
			<summary> Releases unmanaged resources.</summary>
			<remarks></remarks>
			<param name="disposing">True if called by Dispose, false if called from a finalizer</param>
		</member>

		<member name="M:ShinobiCharts.SChartDateTimeAxis.GetFormatString(MonoTouch.Foundation.NSDateComponents)">
			<summary>Returns a format string for the current frequency.</summary>
			<remarks>
				<para>
					For example, to show seconds when the chart has calculated a high tick
					frequency for the current zoom level:
					<code>if(frequency.Hour &lt; 12)
	return @"HH:mm:ss";
else
	return @"HH:mm";</code>
					This is called just prior to automatic tick label generation and allows you to
					override the default date label-format as required.
				</para>
			</remarks>
		</member>


    <member name="T:ShinobiCharts.SChartRadialDataPoint">
      <summary>A data point for a radial series.
      </summary>
			<remarks>
				<para>
					A ShinobiChart can contain either cartesian or radial chart series.
					To learn more about cartesian chart series, you should look at the documentation for SChartCartesianSeries,
					or one of its subclasses.
					Radial chart series are described in SChartRadialSeries.
					The data points in radial chart series are represented by this class.
				</para><para>
					A radial data point is made up of a name and a value (magnitude).
					Unlike data points in cartesian series, a SChartRadialDataPoint can have only one value.
				</para>
			</remarks>
    </member>

    <member name="M:ShinobiCharts.SChartRadialDataPoint.#ctor">
      <summary>Default constructor
      </summary>
		<remarks></remarks>
    </member>
        
	<member name="M:ShinobiCharts.SChartRadialDataPoint.#ctor(MonoTouch.Foundation.NSCoder)">
      <summary>A constructor that initializes the object from the data stored in the unarchiver object.
      </summary>
	  <remarks>This constructor is provided to allow the class to be initialized from an unarchiver (for example, during NIB deserialization).</remarks>
	  <param name="coder">The unarchiver object</param>
    </member>
        
    <member name="M:ShinobiCharts.SChartRadialDataPoint.#ctor(MonoTouch.Foundation.NSObjectFlag)">
      <summary>Constructor to call on derived classes to skip initialization and merely allocate the object.
      </summary>
	  <remarks>You should not invoke this method directly.</remarks>
	  <param name="t">Unused sentinel value</param>
    </member>
		
	<member name="M:ShinobiCharts.SChartRadialDataPoint.#ctor(System.IntPtr)">
      <summary>A constructor used when creating managed representations of unmanaged objects.
      </summary>
	  <remarks>You should not invoke this method directly.</remarks>
	  <param name="handle">Handle of the unmanaged object</param>
    </member>
        
	<member name="M:ShinobiCharts.SChartRadialDataPoint.ConformsToProtocol(System.IntPtr)">
      <summary>Internal - checks whether this object conforms to a protocol.
      </summary>
	  <remarks>Not normally called from application code - used by the Shinobi framework.</remarks>
	  <param name="protocol">The protocol</param>
	  <returns>True if the object conforms to the protocol</returns>
    </member>

	<member name="P:ShinobiCharts.SChartRadialDataPoint.ClassHandle">
        <summary>
        The handle for this class.
        </summary>
	  <remarks>Not normally used by application code</remarks>
    </member>	

	<member name="M:ShinobiCharts.SChartRadialDataPoint.Dispose(System.Boolean)">
      <summary> Releases unmanaged resources.
      </summary>
	  <remarks></remarks>
	  <param name="disposing">True if called by Dispose, false if called from a finalizer</param>
    </member>

    <member name="P:ShinobiCharts.SChartRadialDataPoint.Name">
      <summary> The name of this data point.
      </summary>
		<remarks></remarks>
    </member>
        
    <member name="P:ShinobiCharts.SChartRadialDataPoint.XValue">
      <summary> The value for this data point.
      </summary>
		<remarks></remarks>
    </member>
        
    <member name="P:ShinobiCharts.SChartRadialDataPoint.YValue">
      <summary> Not used in radial data points.
      </summary>
		<remarks>
		</remarks>
    </member>
        
    <member name="P:ShinobiCharts.SChartRadialDataPoint.Value">
      <summary> The value or magnitude of this data point.
      </summary>
		<remarks> All radial data points have a single value. 
		</remarks>
    </member>
        
    <member name="P:ShinobiCharts.SChartRadialDataPoint.Selected">
      <summary>  Is this data point Selected.
      </summary>
		<remarks> When set to true this data point will adopt a Selected state. One effect Based on this state is the Style, 
				 the series will apply the Selected Style to a Selected point. 
		</remarks>
    </member>

      
    <member name="T:ShinobiCharts.SChartRadialSeries">
      <summary>Abstract base class for series displaying data in a cirle, with each data point shown as a slice with an angle proportional to its X value.
      </summary>
		<remarks>
				<para>
					SChartRadialSeries represents all radial series within a ShinobiChart.
					This is the base class for radial series, typically you would use one of its subclasses in your chart.
					Currently the following subclasses are available:
					<list type="bullet">
						<item><term>SChartDonutSeries - represents donut series.</term></item>
						<item><term>SChartPieSeries - represents pie series.</term></item>
					</list>
				</para><para>
					Whereas datapoints for cartesian series require an x and a y value, radial series require a name and a value.
					The x value of a datapoint within a radial series is set as the name of the slice, and the y value is set
					as its magnitude.
					See <see cref="T:ShinobiCharts.SChartRadialDataPoint" /> for more information.
				</para>
		</remarks>
    </member>

	<member name="M:ShinobiCharts.SChartRadialSeries.#ctor(MonoTouch.Foundation.NSCoder)">
      <summary>A constructor that initializes the object from the data stored in the unarchiver object.
      </summary>
	  <remarks>This constructor is provided to allow the class to be initialized from an unarchiver (for example, during NIB deserialization).</remarks>
	  <param name="coder">The unarchiver object</param>
    </member>
        
    <member name="M:ShinobiCharts.SChartRadialSeries.#ctor(MonoTouch.Foundation.NSObjectFlag)">
      <summary>Constructor to call on derived classes to skip initialization and merely allocate the object.
      </summary>
	  <remarks>You should not invoke this method directly.</remarks>
	  <param name="t">Unused sentinel value</param>
    </member>
		
	<member name="M:ShinobiCharts.SChartRadialSeries.#ctor(System.IntPtr)">
      <summary>A constructor used when creating managed representations of unmanaged objects.
      </summary>
	  <remarks>You should not invoke this method directly.</remarks>
	  <param name="handle">Handle of the unmanaged object</param>
    </member>

	<member name="P:ShinobiCharts.SChartRadialSeries.ClassHandle">
      <summary>The handle for this class.
      </summary>
	  <remarks>Not normally used by application code</remarks>
    </member>
        
	<member name="M:ShinobiCharts.SChartRadialSeries.Dispose(System.Boolean)">
      <summary> Releases unmanaged resources.
      </summary>
	  <remarks></remarks>
	  <param name="disposing">True if called by Dispose, false if called from a finalizer</param>
    </member>
        
    <member name="P:ShinobiCharts.SChartRadialSeries.LabelFormatString">
      <summary>A format string to use for the labels which annotate data within a radial series.
       </summary>
		<remarks>
				A typical example of the labels would be the labels on each slice in a pie chart.
				This defaults to <c>"%.2f"</c>.
		</remarks>
    </member>

      
    <member name="T:ShinobiCharts.SChartDonutSeriesStyle">
      <summary>Manages the appearance of a SChartDonutSeries on a ShinobiChart.
       </summary>
			<remarks>
				<para>
					Donut slices (and also pie slices, as SChartPieSeriesStyle inherits its behavior from this class) are
					made up of an outline (or 'crust') and a filled area (or 'flavour').
					This style object allows you to manage the following properties of a donut series:
					<list type="bullet">
						<item>
							<term>
								The color and thickness of the crust around the slices.
								You can also configure whether the crust is shown.
								See ShowCrust, CrustThickness and CrustColors for more information.
							</term>
						</item>
						<item>
							<term>
								The fill colors of the slices, and whether slices are filled at all.
								See ShowFlavour and FlavourColors for more information.
							</term>
						</item>
					</list>
				</para><para>
					When a donut series is drawn, it calls the GetCrustColor and GetFlavourColor methods on the style to
					get the crust and flavour colors for each slice.
				</para><para>
					You can configure whether labels are drawn on a donut series.
					By default, they will be.
					The labels annotate each slice in the series.
					See ShowLabels, LabelFont, LabelFontColor and LabelBackgroundColor for more information.
				</para><para>
					When a slice in a donut series is selected, it protrudes out from the rest of the series.
					You can control how much it protrudes using the Protrusion property.
				</para>
			</remarks>
    </member>

    <member name="M:ShinobiCharts.SChartDonutSeriesStyle.#ctor">
      <summary>Default constructor
      </summary>
	 <remarks></remarks>
    </member>
		
	<member name="M:ShinobiCharts.SChartDonutSeriesStyle.#ctor(MonoTouch.Foundation.NSCoder)">
      <summary>A constructor that initializes the object from the data stored in the unarchiver object.
      </summary>
	  <remarks>This constructor is provided to allow the class to be initialized from an unarchiver (for example, during NIB deserialization).</remarks>
	  <param name="coder">The unarchiver object</param>
    </member>
        
    <member name="M:ShinobiCharts.SChartDonutSeriesStyle.#ctor(MonoTouch.Foundation.NSObjectFlag)">
      <summary>Constructor to call on derived classes to skip initialization and merely allocate the object.
      </summary>
	  <remarks>You should not invoke this method directly.</remarks>
	  <param name="t">Unused sentinel value</param>
    </member>
		
	<member name="M:ShinobiCharts.SChartDonutSeriesStyle.#ctor(System.IntPtr)">
      <summary>A constructor used when creating managed representations of unmanaged objects.
      </summary>
	  <remarks>You should not invoke this method directly.</remarks>
	  <param name="handle">Handle of the unmanaged object</param>
    </member>

	<member name="P:ShinobiCharts.SChartDonutSeriesStyle.ClassHandle">
      <summary>The handle for this class.
      </summary>
	  <remarks>Not normally used by application code</remarks>
    </member>
       
	<member name="M:ShinobiCharts.SChartDonutSeriesStyle.Dispose(System.Boolean)">
      <summary> Releases unmanaged resources.
      </summary>
	  <remarks></remarks>
	  <param name="disposing">True if called by Dispose, false if called from a finalizer</param>
    </member>
        
    <member name="P:ShinobiCharts.SChartDonutSeriesStyle.ShowFlavour">
      <summary>Defines whether the inside of the donut is filled or 'flavoured'.
      </summary>
		<remarks></remarks>
    </member>
        
    <member name="P:ShinobiCharts.SChartDonutSeriesStyle.ShowCrust">
      <summary>Defines whether the outline or 'crust' of the donut is to be shown.
      </summary>
		<remarks></remarks>
    </member>
        
    <member name="P:ShinobiCharts.SChartDonutSeriesStyle.ShowLabels">
      <summary>Defines whether the slices of the series are annotated with labels.
      </summary>
		<remarks></remarks>
    </member>
        
    <member name="P:ShinobiCharts.SChartDonutSeriesStyle.ChartEffect">
      <summary>The appearance of the series, which can be either flat, bevelled, or rounded.
      </summary>
		<remarks>
			<para>
				The <c>SChartRadialChartEffect.Default</c> effect is provided for backwards compatibility. It will be removed in future releases,
				as the default effect applied to the chart now depends on the version of iOS which you are running. In iOS7, the flat effect is
				the default. In earlier versions of iOS, the chiselled effect is the default.
			</para>
			<para>The light options for the bevelled and rounded effects have the same shadowing applied, but the shadow
				color is lighter than with the normal effect.</para>
		</remarks>
    </member>
        
    <member name="P:ShinobiCharts.SChartDonutSeriesStyle.CrustColors">
      <summary>An array containing the 'crust' colors of the slices in the series.
      </summary>
		<remarks>The order of the colors in the array corresponds to the order of the slices in the series.</remarks>
    </member>
        
    <member name="P:ShinobiCharts.SChartDonutSeriesStyle.CrustThickness">
      <summary>The thickness of the outline or 'crust' of the series, in points.
      </summary>
		<remarks></remarks>
    </member>
        
    <member name="P:ShinobiCharts.SChartDonutSeriesStyle.FlavourColors">
      <summary>An array containing the 'flavour' colors of the slices in the series.
      </summary>
		<remarks>The order of the colors in the array corresponds to the order of the slices in the series.</remarks>
    </member>
        
    <member name="P:ShinobiCharts.SChartDonutSeriesStyle.InitialRotation">
      <summary>The initial rotation of the series in radians.
      </summary>
		<remarks></remarks>
    </member>
        
    <member name="P:ShinobiCharts.SChartDonutSeriesStyle.Protrusion">
      <summary>The amount by which the slice slides out from the centre when selected, in points.
      </summary>
		<remarks>A zero value means that no protrusion effect is seen when a slice is selected.</remarks>
    </member>
       
    <member name="P:ShinobiCharts.SChartDonutSeriesStyle.ProtrusionSet">
      <summary>DEPRECATED - This will be removed from the public API in a future commit.
      </summary>
		<remarks></remarks>
    </member>
        
    <member name="P:ShinobiCharts.SChartDonutSeriesStyle.LabelFont">
      <summary>The font used in the labels which annotate the series.
      </summary>
		<remarks></remarks>
    </member>
        
    <member name="P:ShinobiCharts.SChartDonutSeriesStyle.LabelFontColor">
      <summary>The font color used in the labels which annotate the series.
      </summary>
		<remarks></remarks>
    </member>
        
    <member name="P:ShinobiCharts.SChartDonutSeriesStyle.LabelBackgroundColor">
      <summary>The background color of the labels which annotate the series.
      </summary>
		<remarks></remarks>
    </member>
        
    <member name="M:ShinobiCharts.SChartDonutSeriesStyle.SupplementStyle(ShinobiCharts.SChartDonutSeriesStyle)">
      <summary>Updates this style object using the settings from the passed-in style.
      </summary>
	  <remarks></remarks>
	  <param name="style">The style with which to configure this style object.</param>
    </member>
        
    <member name="M:ShinobiCharts.SChartDonutSeriesStyle.GetCrustColor(System.Int32)">
      <summary>Returns the outline or 'crust' color for the given slice in the series.
      </summary>
		<remarks></remarks>
			<param name="index">The index of the slice in the series for which to get the crust color.</param>
    </member>
        
    <member name="M:ShinobiCharts.SChartDonutSeriesStyle.GetFlavourColor(System.Int32)">
      <summary>Returns the fill or 'flavour' color for the given slice in the series.
      </summary>
		<remarks></remarks>
			<param name="index">The index of the slice in the series for which to get the flavor color.</param>
    </member>

      
    <member name="T:ShinobiCharts.SChartDonutSeries">
      <summary>Displays magnitude data on the chart - the larger the value of the data point, the larger the slice representing that data point.
      </summary>
	<remarks>
				<para>
					A donut series contains an instance of SChartDonutSeriesStyle, which manages its appearance.
				</para><para>
					You can configure the radius of the slices in the chart, and how big the hole in the middle of the donut is.
					See InnerRadius and OuterRadius for more information.
				</para><para>
					When a slice is selected in the chart, it protrudes out of the donut, and rotates to a given position.
					You can set the amount of protrusion which a selected slice has by setting the Protrusion property on the
					series SelectedStyle.
					You can set the position it rotates to using the SelectedPosition property.
					The series contains an instance of SChartAnimation which describes the motion of the slice as it rotates
					to its selected position.
					See SelectionAnimation for more information.
				</para><para>
					You can enable panning on a donut series.
					If panning is enabled, performing a swipe gesture on the series will cause it to rotate.
					Whether panning is enabled is controlled by the GesturePanningEnabled property.
					This defaults to <c>false</c>.
				</para><para>
					Legends on donut charts show an entry for each data point, or slice, of the donut series.
				</para>
	</remarks>		
	  <altmember cref="T:ShinobiCharts.SChartDonutSeriesStyle" />
	  <altmember cref="T:ShinobiCharts.SChartRadialSeries" />
	  <altmember cref="T:ShinobiCharts.SChartPieChart" />
	  <altmember cref="T:ShinobiCharts.SChartRadialDataPoint" />
    </member>

    <member name="M:ShinobiCharts.SChartDonutSeries.#ctor">
      <summary>Default constructor
      </summary>
	 <remarks></remarks>
    </member>
		
	<member name="M:ShinobiCharts.SChartDonutSeries.#ctor(MonoTouch.Foundation.NSCoder)">
      <summary>A constructor that initializes the object from the data stored in the unarchiver object.
      </summary>
	  <remarks>This constructor is provided to allow the class to be initialized from an unarchiver (for example, during NIB deserialization).</remarks>
	  <param name="coder">The unarchiver object</param>
    </member>
        
    <member name="M:ShinobiCharts.SChartDonutSeries.#ctor(MonoTouch.Foundation.NSObjectFlag)">
      <summary>Constructor to call on derived classes to skip initialization and merely allocate the object.
      </summary>
	  <remarks>You should not invoke this method directly.</remarks>
	  <param name="t">Unused sentinel value</param>
    </member>
		
	<member name="M:ShinobiCharts.SChartDonutSeries.#ctor(System.IntPtr)">
      <summary>A constructor used when creating managed representations of unmanaged objects.
      </summary>
	  <remarks>You should not invoke this method directly.</remarks>
	  <param name="handle">Handle of the unmanaged object</param>
    </member>

	<member name="P:ShinobiCharts.SChartDonutSeries.ClassHandle">
      <summary>The handle for this class.
      </summary>
	  <remarks>Not normally used by application code</remarks>
    </member>
        
	<member name="M:ShinobiCharts.SChartDonutSeries.Dispose(System.Boolean)">
      <summary> Releases unmanaged resources.
      </summary>
	  <remarks></remarks>
	  <param name="disposing">True if called by Dispose, false if called from a finalizer</param>
    </member>
        
    <member name="P:ShinobiCharts.SChartDonutSeries.InnerRadius">
      <summary> The inner Radius of the series, in points.
      </summary>
		<remarks></remarks>
    </member>
        
    <member name="P:ShinobiCharts.SChartDonutSeries.OuterRadius">
      <summary> The outer Radius of the series, in points.
      </summary>
		<remarks></remarks>
    </member>
        
    <member name="P:ShinobiCharts.SChartDonutSeries.SelectedPosition">
      <summary>The angle to which the slice will rotate once selected, in radians.
      </summary>
		<remarks></remarks>
    </member>
        
    <member name="P:ShinobiCharts.SChartDonutSeries.Rotation">
      <summary> The current Rotation of the series, in radians.
      </summary>
		<remarks></remarks>
    </member>
        
    <member name="P:ShinobiCharts.SChartDonutSeries.AnimationDuration">
      <summary>DEPRECATED - Duration of the Selected slice Rotation animation in Seconds.
      </summary>
		<remarks>Note: This is a guidance value only and the actual duration may change depending on the total angular distance the Rotation covers.
    			 Duration for a PI/2 radians Rotation is going to match this value exactly. 
		</remarks>
    </member>
        
    <member name="P:ShinobiCharts.SChartDonutSeries.AnimationCurveType">
      <summary>DEPRECATED - Animation curve type of the Selected slice Rotation animation
       </summary>
		<remarks>The animation curve describes how the moves from one state to another, e.g linearly, with a bounce, etc. The default is Bounce.
		</remarks>
    </member>
        
    <member name="P:ShinobiCharts.SChartDonutSeries.Style">
      <summary>Manages the appearance of the donut series on the chart.
      </summary>
		<remarks>The default settings of the style are inherited from the chart theme.
				You can tweak the appearance of the series by modifying the style.
		</remarks>
    </member>

    <member name="P:ShinobiCharts.SChartDonutSeries.SelectedStyle">
      <summary>Manages the appearance of the donut series when it is selected.
      </summary>
	  <remarks>Style settings in this object will be applied when the series is marked as selected (or a slice is selected).
			The default settings of the style are inherited from the chart theme.
			You can tweak the appearance of the series by modifying the style.</remarks>
    </member>
        
    <member name="P:ShinobiCharts.SChartDonutSeries.DonutCenter">
      <summary>The center of the donut, within the chart frame.
      </summary>
	  <remarks></remarks>
    </member>

    <member name="M:ShinobiCharts.SChartDonutSeries.CreateLabels(ShinobiCharts.SChartDataSource,ShinobiCharts.ShinobiChart)">
      <summary>Creates the labels for the slices in the donut series, and displays them on the chart.
      </summary>
	  <remarks>The labels are displayed on each slice in the series.</remarks>
	  <param name="datasource">The datasource for the chart.  The series gets the labels from the datasource, then displays them in the correct position on the chart.</param>
	  <param name="chart">The chart containing the donut series.</param>
    </member>
        
    <member name="M:ShinobiCharts.SChartDonutSeries.SetSliceAsSelected(System.Int32,System.Boolean)">
      <summary>Select or deselect a slice within the series.
      </summary>
		<remarks></remarks>
			<param name="sliceIndex">The index of the slice in the series to select or deselect.</param>
			<param name="sel"><c>true</c> if we are selecting the slice. <c>false</c> otherwise.</param>
    </member>
        
    <member name="M:ShinobiCharts.SChartDonutSeries.DrawSlice(System.Int32,System.Int32,System.Single,System.Single,System.Drawing.PointF,System.Single,System.Single,System.Boolean,System.Drawing.RectangleF)">
      <summary>DEPRECATED - This should be a private method, so will be taken off the public API in a future commit.
      </summary>
		<remarks></remarks>
    </member>
        
    <member name="M:ShinobiCharts.SChartDonutSeries.GetSliceCenter(System.Int32)">
      <summary>Returns the center of the slice at a given index, within the chart frame.
      </summary>
		<remarks></remarks>
			<param name="sliceIndex">The index of the slice in which we are interested.</param>
    </member>

    <member name="P:ShinobiCharts.SChartDonutSeries.SelectionAnimation">
        <summary>An animation object describing the motion of a donut series when a slice is selected.</summary>
		<remarks>The angleCurve of the animation describes any rotation of the series from its current position to its selected position.
 The radiusCurve describes the animation of any increase or decrease in the protrusion of the slice as a result of being selected or deselected.</remarks>
    </member>

    <member name="P:ShinobiCharts.SChartDonutSeries.RotationFriction">
        <summary>The amount of friction applied to this pie series after a rotation (pan) gesture finishes, and the series begins to spin.</summary>
		<remarks>The friction is defined as the percentage of decay of velocity per frame. The default value is 0.02, or 2%.</remarks>
    </member>

     <member name="P:ShinobiCharts.SChartDonutSeries.GesturePanningEnabled">
        <summary>Whether or not panning is enabled on this series.</summary>
		<remarks>If panning is enabled, performing a swipe gesture on the series will cause it to rotate.
 The series will stay under your finger whilst your finger remains on the series .
				Once you lift your finger, the series will begin to decelerate. 
				The RotationFriction property controls the rate at which the series will decelerate.
 The default value for this property is false.</remarks>
    </member>

     <member name="P:ShinobiCharts.SChartDonutSeries.SelectionEnabledDuringPanning">
        <summary>Whether or not selection is enabled while the series is panning.</summary>
		<remarks>
			By default, tapping on a radial series during panning will just stop the pan.
				If this property is enabled, tapping on a slice in the series will select that slice.
				This property defaults to false.
			
			If this property is enabled, and SelectedPosition is not set to a value, the donut series will keep spinning
				whilst a slice moves out.
				The same is true for the case where a slice moves in once it is deselected.
		</remarks>
    </member>

   <member name="P:ShinobiCharts.SChartDonutSeries.DrawDirection">
        <summary>The direction in which data is drawn around the centre of the plot.</summary>
		<remarks>This defaults to SChartRadialSeriesDrawDirection.AntiClockwise.</remarks>
    </member>

    <member name="M:ShinobiCharts.SChartDonutSeries.IndexOfSliceAtAngle(System.Double)">
        <summary>Returns the index of the slice in the donut series which is at the given angle in radians.</summary>
		<remarks></remarks>
			<param name="rads">The angle in radians at which we wish to find the donut slice.</param>
    </member>

    <member name="M:ShinobiCharts.SChartDonutSeries.RotateSliceAtIndex(System.Int32,System.Double,ShinobiCharts.SChartAnimation)">
        <summary>Rotates the specified slice to the specified angle in radians, with the provided animation.</summary>
		<remarks></remarks>
		<param name="index">The index of the slice in the series to rotate.</param>
		<param name="rads">The angle to which to rotate the specified slice, in radians.</param>
		<param name="animation">The animation to use during the rotation.</param>
    </member>

		
    <member name="T:ShinobiCharts.SChartLegendStyle">
      <summary>Manages the appearance of the legend on the chart.
      </summary>
		<remarks>The legend is an instance of SChartLegend.</remarks>
    </member>
        
    <member name="M:ShinobiCharts.SChartLegendStyle.#ctor">
      <summary>Default constructor
      </summary>
	 <remarks></remarks>
    </member>
		
	<member name="M:ShinobiCharts.SChartLegendStyle.#ctor(MonoTouch.Foundation.NSCoder)">
      <summary>A constructor that initializes the object from the data stored in the unarchiver object.
      </summary>
	  <remarks>This constructor is provided to allow the class to be initialized from an unarchiver (for example, during NIB deserialization).</remarks>
	  <param name="coder">The unarchiver object</param>
    </member>
        
    <member name="M:ShinobiCharts.SChartLegendStyle.#ctor(MonoTouch.Foundation.NSObjectFlag)">
      <summary>Constructor to call on derived classes to skip initialization and merely allocate the object.
      </summary>
	  <remarks>You should not invoke this method directly.</remarks>
	  <param name="t">Unused sentinel value</param>
    </member>
		
	<member name="M:ShinobiCharts.SChartLegendStyle.#ctor(System.IntPtr)">
      <summary>A constructor used when creating managed representations of unmanaged objects.
      </summary>
	  <remarks>You should not invoke this method directly.</remarks>
	  <param name="handle">Handle of the unmanaged object</param>
    </member>

	<member name="P:ShinobiCharts.SChartLegendStyle.ClassHandle">
      <summary>The handle for this class.
      </summary>
	  <remarks>Not normally used by application code</remarks>
    </member>
        
	<member name="M:ShinobiCharts.SChartLegendStyle.Dispose(System.Boolean)">
      <summary> Releases unmanaged resources.
      </summary>
	  <remarks></remarks>
	  <param name="disposing">True if called by Dispose, false if called from a finalizer</param>
    </member>

	<member name="M:ShinobiCharts.SChartLegendStyle.ConformsToProtocol(System.IntPtr)">
      <summary>Internal - checks whether this object conforms to a protocol.
      </summary>
	  <remarks>Not normally called from application code - used by the Shinobi framework.</remarks>
	  <param name="protocol">The protocol</param>
	  <returns>True if the object conforms to the protocol</returns>
    </member>

    <member name="P:ShinobiCharts.SChartLegendStyle.Font">
      <summary> The font used for the series titles.
      </summary>
		<remarks></remarks>
    </member>
        
    <member name="P:ShinobiCharts.SChartLegendStyle.FontColor">
      <summary> The Color of the text used to display the series titles.
      </summary>
		<remarks></remarks>
    </member>
        
    <member name="P:ShinobiCharts.SChartLegendStyle.TextAlignment">
      <summary> The alignment of the series titles.
      </summary>
		<remarks></remarks>
    </member>
        
    <member name="P:ShinobiCharts.SChartLegendStyle.TextAlignmentSet">
      <summary>DEPRECATED - This will be taken off the public API in a future commit.
      </summary>
	  <remarks></remarks>
    </member>
        
   <member name="P:ShinobiCharts.SChartLegendStyle.TitleFont">
      <summary> The font for the Legend title.
      </summary>
		<remarks></remarks>
    </member>
       
    <member name="P:ShinobiCharts.SChartLegendStyle.TitleFontColor">
      <summary> The Color for the Legend title text.
      </summary>
		<remarks></remarks>
    </member>
        
    <member name="P:ShinobiCharts.SChartLegendStyle.MarginWidth">
      <summary> The amount of padding in pixels around the inside perimeter of the legend, in points.
      </summary>
		<remarks></remarks>
    </member>
        
    <member name="P:ShinobiCharts.SChartLegendStyle.BorderColor">
      <summary> The Color of the border line of the legend.
      </summary>
		<remarks></remarks>
    </member>
        
    <member name="P:ShinobiCharts.SChartLegendStyle.BorderWidth">
      <summary> The width of the legend border in points.
      </summary>
		<remarks></remarks>
    </member>
        
    <member name="P:ShinobiCharts.SChartLegendStyle.CornerRadius">
      <summary> The Radius of the corners of the legend view.
      </summary>
		<remarks> Setting a Radius of 0 will draw square corners. 
		</remarks>
    </member>

		<member name="P:ShinobiCharts.SChartLegendStyle.SymbolCornerRadius">
			<summary>
				The radius of the corners of the legend symbols.
			</summary>
			<remarks>
				Setting a radius of <c>0</c> will draw square corners.
			</remarks>
		</member>

    <member name="P:ShinobiCharts.SChartLegendStyle.HorizontalPadding">
      <summary>The horizontal padding between the symbol and the label representing a chart series in the legend, and also between different series within a row. </summary>
		<remarks></remarks>
    </member>
        
    <member name="P:ShinobiCharts.SChartLegendStyle.VerticalPadding">
      <summary>The vertical padding between rows in the legend.</summary>
		<remarks></remarks>
    </member>
        
    <member name="P:ShinobiCharts.SChartLegendStyle.ShowSymbols">
      	<summary>Defines whether symbols will be shown in the legend.</summary>
		<remarks>
				The default value is <c>true</c> (symbols will be shown).
				Symbols are collected from each of the chart series using the SChartLegendItem protocol.
				If this is set to <c>false</c>, each chart series will be represented in the legend by a text label only.
			</remarks>
    </member>

    <member name="P:ShinobiCharts.SChartLegendStyle.SymbolAlignment">
      <summary>The alignment of the symbols in the legend.
      </summary>
		<remarks>
				If ShowSymbols is set to <c>false</c>, this property will have no effect.
			</remarks>
    </member>
        
    <member name="P:ShinobiCharts.SChartLegendStyle.Orientation">
      <summary>The layout of the series within the legend.
      </summary>
		<remarks></remarks>
    </member>
        
    <member name="P:ShinobiCharts.SChartLegendStyle.AreaColor">
      <summary>The color of the background of the legend.
      </summary>
		<remarks></remarks>
    </member>
        
    <member name="M:ShinobiCharts.SChartLegendStyle.SupplementStyle(ShinobiCharts.SChartLegendStyle)">
      <summary>Updates this style object using the configuration of the passed in style.
      </summary>
	  <remarks></remarks>
	  <param name="style">The new style with which to update this style object.</param>
    </member>
        
    <member name="M:ShinobiCharts.SChartLegendStyle.TextAlignmentSet">
      <summary>DEPRECATED - This will be taken off the public API in a future commit.
      </summary>
		<remarks></remarks>
    </member>

      
    <member name="T:ShinobiCharts.SChartLegendSymbol">
      <summary>Abstract base class for symbols representing the series for display on the Legend.</summary>
		<remarks>
				<para>
					The legend symbols are the visual representations of a series in the chart legend.
					SChartLegendSymbol is the base class for these symbols.
				</para><para>
					As a part of adopting the SChartLegendItem protocol, a series may optionally return a symbol object to represent itself.
					If you are using one of the series types provided by ShinobiCharts, you shouldn't need to create
					legend symbols yourself.
					All of the series types return an appropriate symbol which will represent them in the chart legend.
					These predefined symbols are:
					<list type="bullet">
						<item><term><see cref="T:ShinobiCharts.SChartLegendSymbolLineSeries" /> - represents a line series.</term></item>
						<item><term><see cref="T:ShinobiCharts.SChartLegendSymbolColumnSeries" /> - represents a column series.</term></item>
						<item><term><see cref="T:ShinobiCharts.SChartLegendSymbolBarSeries" /> - represents a bar series.</term></item>
						<item><term><see cref="T:ShinobiCharts.SChartLegendSymbolScatterSeries" /> - represents a scatter series.</term></item>
						<item><term><see cref="T:ShinobiCharts.SChartLegendSymbolPieSeries" /> - represents a pie series.</term></item>
						<item><term><see cref="T:ShinobiCharts.SChartLegendSymbolDonutSeries" /> - represents a donut series.</term></item>
						<item><term><see cref="T:ShinobiCharts.SChartLegendSymbolBandSeries" /> - represents a band series.</term></item>
						<item><term><see cref="T:ShinobiCharts.SChartLegendSymbolCandlestickSeries" /> - represents a candlestick series.</term></item>
						<item><term><see cref="T:ShinobiCharts.SChartLegendSymbolOHLCSeries" /> - represents a OHLC series.</term></item>
					</list>
				</para>
		</remarks>
    </member>
		
	<member name="M:ShinobiCharts.SChartLegendSymbol.#ctor(MonoTouch.Foundation.NSCoder)">
      <summary>A constructor that initializes the object from the data stored in the unarchiver object.
      </summary>
	  <remarks>This constructor is provided to allow the class to be initialized from an unarchiver (for example, during NIB deserialization).</remarks>
	  <param name="coder">The unarchiver object</param>
    </member>
        
    <member name="M:ShinobiCharts.SChartLegendSymbol.#ctor(MonoTouch.Foundation.NSObjectFlag)">
      <summary>Constructor to call on derived classes to skip initialization and merely allocate the object.
      </summary>
	  <remarks>You should not invoke this method directly.</remarks>
	  <param name="t">Unused sentinel value</param>
    </member>
		
	<member name="M:ShinobiCharts.SChartLegendSymbol.#ctor(System.IntPtr)">
      <summary>A constructor used when creating managed representations of unmanaged objects.
      </summary>
	  <remarks>You should not invoke this method directly.</remarks>
	  <param name="handle">Handle of the unmanaged object</param>
    </member>
        
	<member name="P:ShinobiCharts.SChartLegendSymbol.ClassHandle">
        <summary>The handle for this class.
        </summary>
	  <remarks>Not normally used by application code</remarks>
    </member>
        

    <member name="T:ShinobiCharts.SChartLegendSymbolBandSeries">
      <summary>A symbol designed to represent a band series in the chart legend.
      </summary>
		<remarks>The symbol makes use of the series styling, in order to better represent it in the legend.
		</remarks>
    </member>
        
    <member name="P:ShinobiCharts.SChartLegendSymbolBandSeries.Style">
      <summary>The style object for the series associated with this legend symbol.
      </summary>
		<remarks>This property allows you to query the style properties which have been used to create this legend symbol.
		</remarks>
    </member>
        
    <member name="M:ShinobiCharts.SChartLegendSymbolBandSeries.#ctor(ShinobiCharts.SChartBandSeries)">
      <summary>Initializes and returns a newly allocated symbol to represent this band series.
      </summary>
		<remarks></remarks>
			<param name="series">The chart series which this symbol will represent in the chart legend.</param>
			<returns>An initialized symbol, or null if it couldn't be created.</returns>
    </member>
		
	<member name="M:ShinobiCharts.SChartLegendSymbolBandSeries.#ctor(MonoTouch.Foundation.NSCoder)">
      <summary>A constructor that initializes the object from the data stored in the unarchiver object.
      </summary>
	  <remarks>This constructor is provided to allow the class to be initialized from an unarchiver (for example, during NIB deserialization).</remarks>
	  <param name="coder">The unarchiver object</param>
    </member>

        
    <member name="M:ShinobiCharts.SChartLegendSymbolBandSeries.#ctor(MonoTouch.Foundation.NSObjectFlag)">
      <summary>Constructor to call on derived classes to skip initialization and merely allocate the object.
      </summary>
	  <remarks>You should not invoke this method directly.</remarks>
	  <param name="t">Unused sentinel value</param>
    </member>
		
	<member name="M:ShinobiCharts.SChartLegendSymbolBandSeries.#ctor(System.IntPtr)">
      <summary>A constructor used when creating managed representations of unmanaged objects.
      </summary>
	  <remarks>You should not invoke this method directly.</remarks>
	  <param name="handle">Handle of the unmanaged object</param>
    </member>

	<member name="P:ShinobiCharts.SChartLegendSymbolBandSeries.ClassHandle">
      <summary>The handle for this class.
      </summary>
	  <remarks>Not normally used by application code</remarks>
    </member>
        
	<member name="M:ShinobiCharts.SChartLegendSymbolBandSeries.Dispose(System.Boolean)">
      <summary> Releases unmanaged resources.
      </summary>
	  <remarks></remarks>
	  <param name="disposing">True if called by Dispose, false if called from a finalizer</param>
    </member>

      
    <member name="T:ShinobiCharts.SChartLegendSymbolBarSeries">
      <summary>A symbol designed to represent a bar series in the chart legend.
      </summary>
		<remarks>The symbol makes use of the series styling, in order to better represent it in the legend.
		</remarks>
    </member>
        
    <member name="P:ShinobiCharts.SChartLegendSymbolBarSeries.Style">
      <summary>The style object for the series associated with this legend symbol.
      </summary>
		<remarks>This property allows you to query the style properties which have been used to create this legend symbol.
		</remarks>
    </member>
        
    <member name="M:ShinobiCharts.SChartLegendSymbolBarSeries.#ctor(ShinobiCharts.SChartBarSeries)">
      <summary>Initializes and returns a newly allocated symbol to represent this bar series.
      </summary>
		<remarks></remarks>
			<param name="series">The chart series which this symbol will represent in the chart legend.</param>
			<returns>An initialized symbol, or null if it couldn't be created.</returns>
    </member>
		
	<member name="M:ShinobiCharts.SChartLegendSymbolBarSeries.#ctor(MonoTouch.Foundation.NSCoder)">
      <summary>A constructor that initializes the object from the data stored in the unarchiver object.
      </summary>
	  <remarks>This constructor is provided to allow the class to be initialized from an unarchiver (for example, during NIB deserialization).</remarks>
	  <param name="coder">The unarchiver object</param>
    </member>
        
    <member name="M:ShinobiCharts.SChartLegendSymbolBarSeries.#ctor(MonoTouch.Foundation.NSObjectFlag)">
      <summary>Constructor to call on derived classes to skip initialization and merely allocate the object.
      </summary>
	  <remarks>You should not invoke this method directly.</remarks>
	  <param name="t">Unused sentinel value</param>
    </member>
		
	<member name="M:ShinobiCharts.SChartLegendSymbolBarSeries.#ctor(System.IntPtr)">
      <summary>A constructor used when creating managed representations of unmanaged objects.
      </summary>
	  <remarks>You should not invoke this method directly.</remarks>
	  <param name="handle">Handle of the unmanaged object</param>
    </member>

	<member name="P:ShinobiCharts.SChartLegendSymbolBarSeries.ClassHandle">
      <summary>The handle for this class.
      </summary>
	  <remarks>Not normally used by application code</remarks>
    </member>
        
	<member name="M:ShinobiCharts.SChartLegendSymbolBarSeries.Dispose(System.Boolean)">
      <summary> Releases unmanaged resources.
      </summary>
	  <remarks></remarks>
	  <param name="disposing">True if called by Dispose, false if called from a finalizer</param>
    </member>

      
    <member name="T:ShinobiCharts.SChartLegendSymbolCandlestickSeries">
      <summary>A symbol designed to represent a candlestick series in the chart legend.
      </summary>
		<remarks>The symbol makes use of the series styling, in order to better represent it in the legend.</remarks>
    </member>
        
    <member name="P:ShinobiCharts.SChartLegendSymbolCandlestickSeries.Style">
      <summary>The style object for the series associated with this legend symbol.
      </summary>
		<remarks>This property allows you to query the style properties which have been used to create this legend symbol.
		</remarks>
    </member>
        
    <member name="M:ShinobiCharts.SChartLegendSymbolCandlestickSeries.#ctor(ShinobiCharts.SChartCandlestickSeries)">
      <summary>Initializes and returns a newly allocated symbol to represent this candlestick series.
      </summary>
		<remarks></remarks>
			<param name="series">The chart series which this symbol will represent in the chart legend.</param>
			<returns>An initialized symbol, or null if it couldn't be created.</returns>
    </member>
	
	<member name="M:ShinobiCharts.SChartLegendSymbolCandlestickSeries.#ctor(MonoTouch.Foundation.NSCoder)">
      <summary>A constructor that initializes the object from the data stored in the unarchiver object.
      </summary>
	  <remarks>This constructor is provided to allow the class to be initialized from an unarchiver (for example, during NIB deserialization).</remarks>
	  <param name="coder">The unarchiver object</param>
    </member>
        
    <member name="M:ShinobiCharts.SChartLegendSymbolCandlestickSeries.#ctor(MonoTouch.Foundation.NSObjectFlag)">
      <summary>Constructor to call on derived classes to skip initialization and merely allocate the object.
      </summary>
	  <remarks>You should not invoke this method directly.</remarks>
	  <param name="t">Unused sentinel value</param>
    </member>
		
	<member name="M:ShinobiCharts.SChartLegendSymbolCandlestickSeries.#ctor(System.IntPtr)">
      <summary>A constructor used when creating managed representations of unmanaged objects.
      </summary>
	  <remarks>You should not invoke this method directly.</remarks>
	  <param name="handle">Handle of the unmanaged object</param>
    </member>

	<member name="P:ShinobiCharts.SChartLegendSymbolCandlestickSeries.ClassHandle">
      <summary>The handle for this class.
      </summary>
	  <remarks>Not normally used by application code</remarks>
    </member>
        
	<member name="M:ShinobiCharts.SChartLegendSymbolCandlestickSeries.Dispose(System.Boolean)">
      <summary> Releases unmanaged resources.
      </summary>
	  <remarks></remarks>
	  <param name="disposing">True if called by Dispose, false if called from a finalizer</param>
    </member>

		
    <member name="T:ShinobiCharts.SChartLegendSymbolColumnSeries">
      <summary>A symbol designed to represent a column series in the chart legend.
      </summary>
		<remarks>The symbol makes use of the series styling, in order to better represent it in the legend.
		</remarks>
    </member>
        
    <member name="P:ShinobiCharts.SChartLegendSymbolColumnSeries.Style">
      <summary>The style object for the series associated with this legend symbol.
      </summary>
		<remarks>This property allows you to query the style properties which have been used to create this legend symbol.
		</remarks>
    </member>
        
    <member name="M:ShinobiCharts.SChartLegendSymbolColumnSeries.#ctor(ShinobiCharts.SChartColumnSeries)">
      <summary>Initializes and returns a newly allocated symbol to represent this column series.
      </summary>
		<remarks></remarks>
			<param name="series">The chart series which this symbol will represent in the chart legend.</param>
			<returns>An initialized symbol, or null if it couldn't be created.</returns>
    </member>
		
	<member name="M:ShinobiCharts.SChartLegendSymbolColumnSeries.#ctor(MonoTouch.Foundation.NSCoder)">
      <summary>A constructor that initializes the object from the data stored in the unarchiver object.
      </summary>
	  <remarks>This constructor is provided to allow the class to be initialized from an unarchiver (for example, during NIB deserialization).</remarks>
	  <param name="coder">The unarchiver object</param>
    </member>
        
    <member name="M:ShinobiCharts.SChartLegendSymbolColumnSeries.#ctor(MonoTouch.Foundation.NSObjectFlag)">
      <summary>Constructor to call on derived classes to skip initialization and merely allocate the object.
      </summary>
	  <remarks>You should not invoke this method directly.</remarks>
	  <param name="t">Unused sentinel value</param>
    </member>
		
	<member name="M:ShinobiCharts.SChartLegendSymbolColumnSeries.#ctor(System.IntPtr)">
      <summary>A constructor used when creating managed representations of unmanaged objects.
      </summary>
	  <remarks>You should not invoke this method directly.</remarks>
	  <param name="handle">Handle of the unmanaged object</param>
    </member>

	<member name="P:ShinobiCharts.SChartLegendSymbolColumnSeries.ClassHandle">
      <summary>The handle for this class.
      </summary>
	  <remarks>Not normally used by application code</remarks>
    </member>
        
	<member name="M:ShinobiCharts.SChartLegendSymbolColumnSeries.Dispose(System.Boolean)">
      <summary> Releases unmanaged resources.
      </summary>
	  <remarks></remarks>
	  <param name="disposing">True if called by Dispose, false if called from a finalizer</param>
    </member>

      
    <member name="T:ShinobiCharts.SChartLegendSymbolDonutSeries">
      <summary>A symbol designed to represent a donut series in the chart legend.
      </summary>
		<remarks>This property allows you to query the style properties which have been used to create this legend symbol.
		</remarks>
    </member>
        
    <member name="P:ShinobiCharts.SChartLegendSymbolDonutSeries.Style">
      <summary>The style object for the series associated with this legend symbol.
      </summary>
		<remarks> This set of the Style properties enables the symbol to be customised. 
		</remarks>
    </member>
        
    <member name="M:ShinobiCharts.SChartLegendSymbolDonutSeries.#ctor(ShinobiCharts.SChartDonutSeries,System.Int32)">
      <summary>Initializes and returns a newly allocated symbol to represent the specified slice in the specified donut series.
      </summary>
		<remarks></remarks>
			<param name="donutSeries">The chart series which this symbol will be associated with.</param>
			<param name="index">The slice in the series which the symbol will represent.</param>
			<returns>An initialized symbol, or null if it couldn't be created.</returns>
    </member>
		
	<member name="M:ShinobiCharts.SChartLegendSymbolDonutSeries.#ctor(MonoTouch.Foundation.NSCoder)">
      <summary>A constructor that initializes the object from the data stored in the unarchiver object.
      </summary>
	  <remarks>This constructor is provided to allow the class to be initialized from an unarchiver (for example, during NIB deserialization).</remarks>
	  <param name="coder">The unarchiver object</param>
    </member>
        
    <member name="M:ShinobiCharts.SChartLegendSymbolDonutSeries.#ctor(MonoTouch.Foundation.NSObjectFlag)">
      <summary>Constructor to call on derived classes to skip initialization and merely allocate the object.
      </summary>
	  <remarks>You should not invoke this method directly.</remarks>
	  <param name="t">Unused sentinel value</param>
    </member>
		
	<member name="M:ShinobiCharts.SChartLegendSymbolDonutSeries.#ctor(System.IntPtr)">
      <summary>A constructor used when creating managed representations of unmanaged objects.
      </summary>
	  <remarks>You should not invoke this method directly.</remarks>
	  <param name="handle">Handle of the unmanaged object</param>
    </member>

	<member name="P:ShinobiCharts.SChartLegendSymbolDonutSeries.ClassHandle">
      <summary>The handle for this class.
      </summary>
	  <remarks>Not normally used by application code</remarks>
    </member>
        
	<member name="M:ShinobiCharts.SChartLegendSymbolDonutSeries.Dispose(System.Boolean)">
      <summary> Releases unmanaged resources.
      </summary>
	  <remarks></remarks>
	  <param name="disposing">True if called by Dispose, false if called from a finalizer</param>
    </member>

      
    <member name="T:ShinobiCharts.SChartLineSeries">
      <summary>A series that displays data as a line.</summary>
		<remarks>
				SChartLineSeries is a type of SChartSeries that uses the data points to construct a line series.
				The line series consists of a number of points which may or may not be marked, and which are connected by
				a line with an optional fill (ie: area series) between the line and the chart axis.
		</remarks>
    </member>

    <member name="M:ShinobiCharts.SChartLineSeries.#ctor">
      <summary>Default constructor
      </summary>
	 <remarks></remarks>
    </member>
		
	<member name="M:ShinobiCharts.SChartLineSeries.#ctor(MonoTouch.Foundation.NSCoder)">
      <summary>A constructor that initializes the object from the data stored in the unarchiver object.
      </summary>
	  <remarks>This constructor is provided to allow the class to be initialized from an unarchiver (for example, during NIB deserialization).</remarks>
	  <param name="coder">The unarchiver object</param>
    </member>
        
    <member name="M:ShinobiCharts.SChartLineSeries.#ctor(MonoTouch.Foundation.NSObjectFlag)">
      <summary>Constructor to call on derived classes to skip initialization and merely allocate the object.
      </summary>
	  <remarks>You should not invoke this method directly.</remarks>
	  <param name="t">Unused sentinel value</param>
    </member>
		
	<member name="M:ShinobiCharts.SChartLineSeries.#ctor(System.IntPtr)">
      <summary>A constructor used when creating managed representations of unmanaged objects.
      </summary>
	  <remarks>You should not invoke this method directly.</remarks>
	  <param name="handle">Handle of the unmanaged object</param>
    </member>

	<member name="P:ShinobiCharts.SChartLineSeries.ClassHandle">
      <summary>The handle for this class.
      </summary>
	  <remarks>Not normally used by application code</remarks>
    </member>
        
	<member name="M:ShinobiCharts.SChartLineSeries.Dispose(System.Boolean)">
      <summary> Releases unmanaged resources.
      </summary>
	  <remarks></remarks>
	  <param name="disposing">True if called by Dispose, false if called from a finalizer</param>
    </member>
        
    <member name="P:ShinobiCharts.SChartLineSeries.Style">
      <summary>Manages the appearance of the line series on the chart.
      </summary>
		<remarks>The default settings of the style are inherited from the chart theme.
				You can tweak the appearance of the series by modifying the style.
		</remarks>
    </member>
        
    <member name="P:ShinobiCharts.SChartLineSeries.SelectedStyle">
      <summary>Manages the appearance of the line series when it is selected.
      </summary>
		<remarks>
				Style settings in this object will be applied when the series is marked as selected (or a point is selected).
				The default settings of the style are inherited from the chart theme.
				You can tweak the appearance of the series by modifying the style.
			</remarks>
    </member>

		
    <member name="T:ShinobiCharts.SChartLineSeriesStyle">
      <summary>Manages the appearance of an instance of SChartLineSeries on a chart.
      </summary>
		<remarks></remarks>
    </member>

    <member name="M:ShinobiCharts.SChartLineSeriesStyle.#ctor">
      <summary>Default constructor
      </summary>
	 <remarks></remarks>
    </member>
		
	<member name="M:ShinobiCharts.SChartLineSeriesStyle.#ctor(MonoTouch.Foundation.NSCoder)">
      <summary>A constructor that initializes the object from the data stored in the unarchiver object.
      </summary>
	  <remarks>This constructor is provided to allow the class to be initialized from an unarchiver (for example, during NIB deserialization).</remarks>
	  <param name="coder">The unarchiver object</param>
    </member>
        
    <member name="M:ShinobiCharts.SChartLineSeriesStyle.#ctor(MonoTouch.Foundation.NSObjectFlag)">
      <summary>Constructor to call on derived classes to skip initialization and merely allocate the object.
      </summary>
	  <remarks>You should not invoke this method directly.</remarks>
	  <param name="t">Unused sentinel value</param>
    </member>
		
	<member name="M:ShinobiCharts.SChartLineSeriesStyle.#ctor(System.IntPtr)">
      <summary>A constructor used when creating managed representations of unmanaged objects.
      </summary>
	  <remarks>You should not invoke this method directly.</remarks>
	  <param name="handle">Handle of the unmanaged object</param>
    </member>

	<member name="P:ShinobiCharts.SChartLineSeriesStyle.ClassHandle">
      <summary>The handle for this class.
      </summary>
	  <remarks>Not normally used by application code</remarks>
    </member>
       
	<member name="M:ShinobiCharts.SChartLineSeriesStyle.Dispose(System.Boolean)">
      <summary> Releases unmanaged resources.
      </summary>
	  <remarks></remarks>
	  <param name="disposing">True if called by Dispose, false if called from a finalizer</param>
    </member>
        
    <member name="P:ShinobiCharts.SChartLineSeriesStyle.ShowFill">
      <summary>Defines whether the area between the line and the axis is filled.
      </summary>
			<remarks>The color of the area fill is defined by AreaColor or AreaColorBelowBaseline.</remarks>
    </member>
        
    <member name="P:ShinobiCharts.SChartLineSeriesStyle.ShowFillSet">
      <summary>DEPRECATED - This will be taken off the public API in a future commit.
      </summary>
		<remarks></remarks>
    </member>
        
    <member name="P:ShinobiCharts.SChartLineSeriesStyle.FillWithGradient">
      <summary>If ShowFill is set to <c>true</c>, this adds a gradient to the area fill.
      </summary>
		<remarks>The gradient starts at AreaColor and finishes at areaColorLowGradient.</remarks>
    </member>
        
    <member name="P:ShinobiCharts.SChartLineSeriesStyle.FillWithGradientSet">
      <summary>DEPRECATED - This will be taken off the public API in a future commit.
      </summary>
		<remarks></remarks>
    </member>
       
    <member name="P:ShinobiCharts.SChartLineSeriesStyle.LineColor">
      <summary> The Color of the line 
      </summary>
		<remarks>
			This property is used as long as <see cref="P:ShinobiCharts.SChartLineSeriesStyle.ShowFill" /> isn't set to <c>true</c>.
			If the area is filled, <see cref="P:ShinobiCharts.SChartLineSeriesStyle.AreaLineColor" /> is used instead.
		</remarks>
    </member>
        
    <member name="P:ShinobiCharts.SChartLineSeriesStyle.LineColorBelowBaseline">
      <summary> The Color of the line below the baseline 
      </summary>
		<remarks>
			This property is used as long as <see cref="P:ShinobiCharts.SChartLineSeriesStyle.ShowFill" /> isn't set to <c>true</c>.
			If the area is filled, <see cref="P:ShinobiCharts.SChartLineSeriesStyle.AreaLineColorBelowBaseline" /> is used instead.
		</remarks>
    </member>
        
    <member name="P:ShinobiCharts.SChartLineSeriesStyle.LineWidth">
      <summary> The Width of the line in pixels 
      </summary>
		<remarks>
			This property is used as long as <see cref="P:ShinobiCharts.SChartLineSeriesStyle.ShowFill" /> isn't set to <c>true</c>.
				If the area is filled, <see cref="P:ShinobiCharts.SChartLineSeriesStyle.AreaLineWidth" /> is used instead.
		</remarks>
    </member>
        
    <member name="P:ShinobiCharts.SChartLineSeriesStyle.AreaLineColor">
      <summary> The Color of the line if the area is filled
      </summary>
		<remarks>
			If the area isn't filled, <see cref="P:ShinobiCharts.SChartLineSeriesStyle.LineColor" /> is used instead.
		</remarks>
    </member>
        
    <member name="P:ShinobiCharts.SChartLineSeriesStyle.AreaLineColorBelowBaseline">
      <summary> The Color of the line below the baseline if the area is filled 
      </summary>
		<remarks>
			If the area isn't filled, <see cref="P:ShinobiCharts.SChartLineSeriesStyle.LineColorBelowBaseline" /> is used instead.
		</remarks>
    </member>
        
    <member name="P:ShinobiCharts.SChartLineSeriesStyle.AreaLineWidth">
      <summary> The Width of the line in pixels if the area is filled 
      </summary>
		<remarks>
			If the area isn't filled, <see cref="P:ShinobiCharts.SChartLineSeriesStyle.LineWidth" /> is used instead.
		</remarks>
    </member>
        
    <member name="P:ShinobiCharts.SChartLineSeriesStyle.AreaColor">
      <summary>The color of the area fill between the line and the axis.
      </summary>
		<remarks></remarks>
    </member>
        
    <member name="P:ShinobiCharts.SChartLineSeriesStyle.AreaColorLowGradient">
      <summary>The second color which is used to form a gradient area fill.
      </summary>
		<remarks></remarks>
    </member>
        
    <member name="P:ShinobiCharts.SChartLineSeriesStyle.AreaColorBelowBaseline">
      <summary>The color of the fill between the line and the axis, when the line goes below the series baseline.
      </summary>
		<remarks></remarks>
    </member>
        
    <member name="P:ShinobiCharts.SChartLineSeriesStyle.AreaColorGradientBelowBaseline">
      <summary>The second color which is used to form a gradient area fill when the line goes below the series baseline 
      </summary>
		<remarks></remarks>
    </member>
        
    <member name="P:ShinobiCharts.SChartLineSeriesStyle.LineCrosshairTraceStyle">
      <summary> The direction of the line data to allow the Crosshair to traverse it smoothly.
      </summary>
		<remarks> Line data points my be ordered from left to right (x-Value sorted) or top to bottom (y-Value sorted). 
				  This parameter lets the chart know to aid the tracing process.
		</remarks>
    </member>

    <member name="P:ShinobiCharts.SChartLineSeriesStyle.LineCrosshairTraceStyleSet">
      <summary>DEPRECATED - This will be taken off the public API in a future commit.
      </summary>
		<remarks></remarks>
    </member>
        
    <member name="M:ShinobiCharts.SChartLineSeriesStyle.SupplementStyle(ShinobiCharts.SChartLineSeriesStyle)">
      <summary>Updates this style object using the configuration of the passed in style. 
      </summary>
	  <remarks></remarks>
	  <param name="style">The new style with which to update this style object.</param>
    </member>

		
    <member name="T:ShinobiCharts.SChartLegendSymbolLineSeries">
      <summary>A symbol designed to represent a line series in the chart legend.
      </summary>
		<remarks>The symbol makes use of the series styling, in order to better represent it in the legend.
		</remarks>
    </member>
        
    <member name="P:ShinobiCharts.SChartLegendSymbolLineSeries.Style">
      <summary>The style object for the series associated with this legend symbol.
      </summary>
		<remarks>This property allows you to query the style properties which have been used to create this legend symbol.
		</remarks>
    </member>
        
    <member name="M:ShinobiCharts.SChartLegendSymbolLineSeries.#ctor(ShinobiCharts.SChartLineSeries)">
      <summary>Initializes and returns a newly allocated symbol to represent this line series.
      </summary>
		<remarks></remarks>
			<param name="series">The chart series which this symbol will represent in the chart legend.</param>
			<returns>An initialized symbol, or null if it couldn't be created.</returns>
    </member>
	
	<member name="M:ShinobiCharts.SChartLegendSymbolLineSeries.#ctor(MonoTouch.Foundation.NSCoder)">
      <summary>A constructor that initializes the object from the data stored in the unarchiver object.
      </summary>
	  <remarks>This constructor is provided to allow the class to be initialized from an unarchiver (for example, during NIB deserialization).</remarks>
	  <param name="coder">The unarchiver object</param>
    </member>
        
    <member name="M:ShinobiCharts.SChartLegendSymbolLineSeries.#ctor(MonoTouch.Foundation.NSObjectFlag)">
      <summary>Constructor to call on derived classes to skip initialization and merely allocate the object.
      </summary>
	  <remarks>You should not invoke this method directly.</remarks>
	  <param name="t">Unused sentinel value</param>
    </member>
		
	<member name="M:ShinobiCharts.SChartLegendSymbolLineSeries.#ctor(System.IntPtr)">
      <summary>A constructor used when creating managed representations of unmanaged objects.
      </summary>
	  <remarks>You should not invoke this method directly.</remarks>
	  <param name="handle">Handle of the unmanaged object</param>
    </member>

	<member name="P:ShinobiCharts.SChartLegendSymbolLineSeries.ClassHandle">
      <summary>The handle for this class.
      </summary>
	  <remarks>Not normally used by application code</remarks>
    </member>
        
	<member name="M:ShinobiCharts.SChartLegendSymbolLineSeries.Dispose(System.Boolean)">
      <summary> Releases unmanaged resources.
      </summary>
	  <remarks></remarks>
	  <param name="disposing">True if called by Dispose, false if called from a finalizer</param>
    </member>

		
		<member name="T:ShinobiCharts.SChartOHLCSeries">
			<summary>
				A type of SChartSeries which displays Open-High-Low-Close (OHLC) data on a chart.
			</summary>
			<remarks>
				<para>
					Each data point in an OHLC series is visualised as a line between the high and low values,
					with short perpendicular bars indicating the open and close positions.
				</para><para>
					Data points in an OHLC series will contain multiple values.
					This means that they will be instances of SChartMultiXDataPoint or SChartMultiYDataPoint,
					depending on the orientation of the series.
					The keys for the values in each data point will be SChartOHLCKeyOpen, SChartOHLCKeyHigh, SChartOHLCKeyLow
					and SChartOHLCKeyClose.
				</para><para>
					In order to provide the Open, High, Low, and Close values to the chart, the data points in the OHLC series
					should implement either the SChartData.GetXValue method or the SChartData.GetYValue method on the
					SChartData protocol, depending on the series orientation.
				</para><para>
					The series contains an instance of SChartOHLCSeriesStyle, which manages the appearance of the series on the chart.
				</para>
			</remarks>
		</member>

    <member name="M:ShinobiCharts.SChartOHLCSeries.#ctor">
      <summary>Default constructor
      </summary>
	 <remarks></remarks>
    </member>
		
	<member name="M:ShinobiCharts.SChartOHLCSeries.#ctor(MonoTouch.Foundation.NSCoder)">
      <summary>A constructor that initializes the object from the data stored in the unarchiver object.
      </summary>
	  <remarks>This constructor is provided to allow the class to be initialized from an unarchiver (for example, during NIB deserialization).</remarks>
	  <param name="coder">The unarchiver object</param>
    </member>
        
    <member name="M:ShinobiCharts.SChartOHLCSeries.#ctor(MonoTouch.Foundation.NSObjectFlag)">
      <summary>Constructor to call on derived classes to skip initialization and merely allocate the object.
      </summary>
	  <remarks>You should not invoke this method directly.</remarks>
	  <param name="t">Unused sentinel value</param>
    </member>
		
	<member name="M:ShinobiCharts.SChartOHLCSeries.#ctor(System.IntPtr)">
      <summary>A constructor used when creating managed representations of unmanaged objects.
      </summary>
	  <remarks>You should not invoke this method directly.</remarks>
	  <param name="handle">Handle of the unmanaged object</param>
    </member>

	<member name="P:ShinobiCharts.SChartOHLCSeries.ClassHandle">
      <summary>The handle for this class.
      </summary>
	  <remarks>Not normally used by application code</remarks>
    </member>
        
	<member name="M:ShinobiCharts.SChartOHLCSeries.Dispose(System.Boolean)">
      <summary> Releases unmanaged resources.
      </summary>
	  <remarks></remarks>
	  <param name="disposing">True if called by Dispose, false if called from a finalizer</param>
    </member>
        
    <member name="P:ShinobiCharts.SChartOHLCSeries.Style">
      <summary>Manages the appearance of the OHLC series on the chart.
      </summary>
		<remarks>The default settings of the style are inherited from the chart theme.
				You can tweak the appearance of the series by modifying the style.
		</remarks>
    </member>
		
    <member name="P:ShinobiCharts.SChartOHLCSeries.SelectedStyle">
      <summary>Manages the appearance of the OHLC series when it is selected.
      </summary>
			<remarks>
				Style settings in this object will be applied when the series is marked as selected (or a point is selected).
				The default settings of the style are inherited from the chart theme.
				You can tweak the appearance of the series by modifying the style.
			</remarks>
    </member>

		<member name="P:ShinobiCharts.SChartOHLCSeries.KeyClose">
			<summary></summary>
			<remarks></remarks>
		</member>

		<member name="P:ShinobiCharts.SChartOHLCSeries.KeyHigh">
			<summary></summary>
			<remarks></remarks>
		</member>

		<member name="P:ShinobiCharts.SChartOHLCSeries.KeyLow">
			<summary></summary>
			<remarks></remarks>
		</member>

		<member name="P:ShinobiCharts.SChartOHLCSeries.KeyOpen">
			<summary></summary>
			<remarks></remarks>
		</member>


    <member name="T:ShinobiCharts.SChartOHLCSeriesStyle">
      <summary>
				Manages the appearance of an instance of SChartOHLCSeries on the chart.
      </summary>
			<remarks>
				Each data point in an OHLC series is visualised as a line between the high and low values,
				with short perpendicular bars indicating the open and close positions.
				
				The colors used to represent each data point are different dependent on whether the data value is rising or falling.
				You can set the colors for both cases in this class.
				A gradient is applied to the colors in each data point, going from top to bottom if the series is horizontal,
				and from left to right if the series is vertical.
				See RisingColor, FallingColor, RisingColorGradient or FallingColorGradient for more information.
			</remarks>
    </member>
        
    <member name="M:ShinobiCharts.SChartOHLCSeriesStyle.#ctor">
      <summary>Default constructor
      </summary>
	 <remarks></remarks>
    </member>
		
	<member name="M:ShinobiCharts.SChartOHLCSeriesStyle.#ctor(MonoTouch.Foundation.NSCoder)">
      <summary>A constructor that initializes the object from the data stored in the unarchiver object.
      </summary>
	  <remarks>This constructor is provided to allow the class to be initialized from an unarchiver (for example, during NIB deserialization).</remarks>
	  <param name="coder">The unarchiver object</param>
    </member>
        
    <member name="M:ShinobiCharts.SChartOHLCSeriesStyle.#ctor(MonoTouch.Foundation.NSObjectFlag)">
      <summary>Constructor to call on derived classes to skip initialization and merely allocate the object.
      </summary>
	  <remarks>You should not invoke this method directly.</remarks>
	  <param name="t">Unused sentinel value</param>
    </member>
		
	<member name="M:ShinobiCharts.SChartOHLCSeriesStyle.#ctor(System.IntPtr)">
      <summary>A constructor used when creating managed representations of unmanaged objects.
      </summary>
	  <remarks>You should not invoke this method directly.</remarks>
	  <param name="handle">Handle of the unmanaged object</param>
    </member>

	<member name="P:ShinobiCharts.SChartOHLCSeriesStyle.ClassHandle">
      <summary>The handle for this class.
      </summary>
	  <remarks>Not normally used by application code</remarks>
    </member>
       
	<member name="M:ShinobiCharts.SChartOHLCSeriesStyle.Dispose(System.Boolean)">
      <summary> Releases unmanaged resources.
      </summary>
	  <remarks></remarks>
	  <param name="disposing">True if called by Dispose, false if called from a finalizer</param>
    </member>

    <member name="P:ShinobiCharts.SChartOHLCSeriesStyle.RisingColor">
      <summary>The Color of the body of the OHLC point if the point is rising.
      </summary>
		<remarks></remarks>
    </member>
        
    <member name="P:ShinobiCharts.SChartOHLCSeriesStyle.RisingColorGradient">
      <summary> The Gradient Color of the body of the OHLC point if the point is rising.
      </summary>
		<remarks></remarks>
    </member>
        
    <member name="P:ShinobiCharts.SChartOHLCSeriesStyle.FallingColor">
      <summary> The Color of the body of the OHLC point if the point is falling.
      </summary>
		<remarks></remarks>
    </member>
        
    <member name="P:ShinobiCharts.SChartOHLCSeriesStyle.FallingColorGradient">
      <summary> The Gradient Color of the body of the OHLC point if the point is falling.
      </summary>
		<remarks></remarks>
    </member>
        
    <member name="P:ShinobiCharts.SChartOHLCSeriesStyle.TrunkWidth">
      <summary>The width of the trunk of the OHLC point, in points.
      </summary>
		<remarks></remarks>
    </member>
        
    <member name="P:ShinobiCharts.SChartOHLCSeriesStyle.ArmWidth">
      <summary>The width of the arms of the OHLC point, in points.
      </summary>
		<remarks></remarks>
    </member>

    <member name="M:ShinobiCharts.SChartOHLCSeriesStyle.SupplementStyle(ShinobiCharts.SChartOHLCSeriesStyle)">
      <summary>Updates this style object using the specified style.
      </summary>
	  <remarks></remarks>
	  <param name="style">The new style with which to update this style object.</param>
    </member>
        
		
    <member name="T:ShinobiCharts.SChartLegendSymbolOHLCSeries">
      <summary>A symbol designed to represent an OHLC series in the chart legend.
      </summary>
		<remarks>The symbol makes use of the series styling, in order to better represent it in the legend.</remarks>
    </member>
        
    <member name="P:ShinobiCharts.SChartLegendSymbolOHLCSeries.Style">
      <summary>The style object for the series associated with this legend symbol.
      </summary>
		<remarks>This property allows you to query the style properties which have been used to create this legend symbol.
		</remarks>
    </member>
        
    <member name="M:ShinobiCharts.SChartLegendSymbolOHLCSeries.#ctor(ShinobiCharts.SChartOHLCSeries)">
      <summary>Initializes and returns a newly allocated symbol to represent this OHLC series.
      </summary>
		<remarks></remarks>
			<param name="series">The chart series which this symbol will represent in the chart legend.</param>
			<returns>An initialized symbol, or null if it couldn't be created.</returns>
    </member>

	<member name="M:ShinobiCharts.SChartLegendSymbolOHLCSeries.#ctor(MonoTouch.Foundation.NSCoder)">
      <summary>A constructor that initializes the object from the data stored in the unarchiver object.
      </summary>
	  <remarks>This constructor is provided to allow the class to be initialized from an unarchiver (for example, during NIB deserialization).</remarks>
	  <param name="coder">The unarchiver object</param>
    </member>
        
    <member name="M:ShinobiCharts.SChartLegendSymbolOHLCSeries.#ctor(MonoTouch.Foundation.NSObjectFlag)">
      <summary>Constructor to call on derived classes to skip initialization and merely allocate the object.
      </summary>
	  <remarks>You should not invoke this method directly.</remarks>
	  <param name="t">Unused sentinel value</param>
    </member>
		
	<member name="M:ShinobiCharts.SChartLegendSymbolOHLCSeries.#ctor(System.IntPtr)">
      <summary>A constructor used when creating managed representations of unmanaged objects.
      </summary>
	  <remarks>You should not invoke this method directly.</remarks>
	  <param name="handle">Handle of the unmanaged object</param>
    </member>		

	<member name="P:ShinobiCharts.SChartLegendSymbolOHLCSeries.ClassHandle">
      <summary>The handle for this class.
      </summary>
	  <remarks>Not normally used by application code</remarks>
    </member>
        
	<member name="M:ShinobiCharts.SChartLegendSymbolOHLCSeries.Dispose(System.Boolean)">
      <summary> Releases unmanaged resources.
      </summary>
	  <remarks></remarks>
	  <param name="disposing">True if called by Dispose, false if called from a finalizer</param>
    </member>

		
    <member name="T:ShinobiCharts.SChartLegendSymbolPieSeries">
      <summary>A symbol designed to represent a pie series in the chart legend.
      </summary>
		<remarks>The symbol makes use of the series styling, in order to better represent it in the legend.
		</remarks>
    </member>
		
	<member name="M:ShinobiCharts.SChartLegendSymbolPieSeries.#ctor(MonoTouch.Foundation.NSCoder)">
      <summary>A constructor that initializes the object from the data stored in the unarchiver object.
      </summary>
	  <remarks>This constructor is provided to allow the class to be initialized from an unarchiver (for example, during NIB deserialization).</remarks>
	  <param name="coder">The unarchiver object</param>
    </member>
        
    <member name="M:ShinobiCharts.SChartLegendSymbolPieSeries.#ctor(MonoTouch.Foundation.NSObjectFlag)">
      <summary>Constructor to call on derived classes to skip initialization and merely allocate the object.
      </summary>
	  <remarks>You should not invoke this method directly.</remarks>
	  <param name="t">Unused sentinel value</param>
    </member>
		
	<member name="M:ShinobiCharts.SChartLegendSymbolPieSeries.#ctor(System.IntPtr)">
      <summary>A constructor used when creating managed representations of unmanaged objects.
      </summary>
	  <remarks>You should not invoke this method directly.</remarks>
	  <param name="handle">Handle of the unmanaged object</param>
    </member>

		<member name="M:ShinobiCharts.SChartLegendSymbolPieSeries.#ctor(ShinobiCharts.SChartPieSeries,System.Int32)">
			<summary>See <see cref="C:ShinobiCharts.SChartLegendSymbolDonutSeries(ShinobiCharts.SChartDonutSeries,System.Int32)" />.</summary>
			<remarks></remarks>
		</member>

	<member name="P:ShinobiCharts.SChartLegendSymbolPieSeries.ClassHandle">
      <summary>The handle for this class.
      </summary>
	  <remarks>Not normally used by application code</remarks>
    </member>
        
	<member name="M:ShinobiCharts.SChartLegendSymbolPieSeries.Dispose(System.Boolean)">
      <summary> Releases unmanaged resources.
      </summary>
	  <remarks></remarks>
	  <param name="disposing">True if called by Dispose, false if called from a finalizer</param>
    </member>


    <member name="T:ShinobiCharts.SChartScatterSeries">
      <summary>A type of SChartSeries that uses its data points to construct a scatter series.</summary>
			<remarks>
				<para>
					A common use case for scatter series is to use images for your data points.
					In order to set a default image for each point in your scatter series, you can configure the series style.
					The following code shows how:
					<code>scatterSeries.Style.PointStyle.Texture = new UIImage("texture.png");</code>
				</para><para>
					In order to configure the radius of your data points, you can also configure the series style, as follows:
					<code>scatterSeries.Style.PointStyle.Radius = 10;</code>
				</para><para>
					Note that there is an SChartBubbleSeries that allows you to control the size of the bubbles via the data point
					objects returned from your data source.
				</para><para>
					Data points are rendered as an inner point and an outer point (the drawing of the outer points is handled by
					the superclass SChartPointSeries).
					In the case where you just wish to render a single image for your data point, rather than a larger image
					with a smaller image inside it, you would set the SChartPointStyle.InnerRadius property of the the series style to 0.
				</para><para>
					For more information on styling data points, see SChartPointStyle.
				</para><para>
					As well as setting default properties for the whole series, you can set properties for individual data points
					in your chart series.
				</para><para>
					You specify properties for individual data points in the chart's datasource (which will adopt the SChartDatasource
					protocol).
				</para><para>
					To set the radius of an individual data point in the series, you would implement the SChartDatasource.GetRadius
					method on the datasource, and provide the correct radius for each point.
				</para><para>
					To set an image to use for a particular data point in your series, you would implement the
					SChartDatasource.GetTexture method on the datasource.
				</para><para>
					You can also set the inner radius of individual points, by implementing the SChartDatasource.GetInnerRadius
					method on the datasource.
				</para>
			</remarks>
    </member>

    <member name="M:ShinobiCharts.SChartScatterSeries.#ctor">
      <summary>Default constructor
      </summary>
	  <remarks></remarks>
    </member>
		
	<member name="M:ShinobiCharts.SChartScatterSeries.#ctor(MonoTouch.Foundation.NSCoder)">
      <summary>A constructor that initializes the object from the data stored in the unarchiver object.
      </summary>
	  <remarks>This constructor is provided to allow the class to be initialized from an unarchiver (for example, during NIB deserialization).</remarks>
	  <param name="coder">The unarchiver object</param>
    </member>
        
    <member name="M:ShinobiCharts.SChartScatterSeries.#ctor(MonoTouch.Foundation.NSObjectFlag)">
      <summary>Constructor to call on derived classes to skip initialization and merely allocate the object.
      </summary>
	  <remarks>You should not invoke this method directly.</remarks>
	  <param name="t">Unused sentinel value</param>
    </member>
		
	<member name="M:ShinobiCharts.SChartScatterSeries.#ctor(System.IntPtr)">
      <summary>A constructor used when creating managed representations of unmanaged objects.
      </summary>
	  <remarks>You should not invoke this method directly.</remarks>
	  <param name="handle">Handle of the unmanaged object</param>
    </member>

	<member name="P:ShinobiCharts.SChartScatterSeries.ClassHandle">
      <summary>The handle for this class.
      </summary>
	  <remarks>Not normally used by application code</remarks>
    </member>
        
	<member name="M:ShinobiCharts.SChartScatterSeries.Dispose(System.Boolean)">
      <summary> Releases unmanaged resources.
      </summary>
	  <remarks></remarks>
	  <param name="disposing">True if called by Dispose, false if called from a finalizer</param>
    </member>
        
    <member name="P:ShinobiCharts.SChartScatterSeries.Style">
      <summary>Manages the appearance of the scatter series on the chart.
      </summary>
		<remarks>The default settings of the style are inherited from the chart theme.
				You can tweak the appearance of the series by modifying the style.
		</remarks>
    </member>
        
    <member name="P:ShinobiCharts.SChartScatterSeries.SelectedStyle">
      <summary>Manages the appearance of the scatter series when it is selected.
      </summary>
		<remarks>
				Style settings in this object will be applied when the series is marked as selected (or a point is selected).
				The default settings of the style are inherited from the chart theme.
				You can tweak the appearance of the series by modifying the style.
			</remarks>
    </member>

      
    <member name="T:ShinobiCharts.SChartScatterSeriesStyle">
      <summary>Manages the appearance of an instance of SChartScatterSeries on a chart.
      </summary>
		<remarks></remarks>
    </member>

    <member name="M:ShinobiCharts.SChartScatterSeriesStyle.#ctor">
      <summary>Default constructor
      </summary>
	 <remarks></remarks>
    </member>
		
	<member name="M:ShinobiCharts.SChartScatterSeriesStyle.#ctor(MonoTouch.Foundation.NSCoder)">
      <summary>A constructor that initializes the object from the data stored in the unarchiver object.
      </summary>
	  <remarks>This constructor is provided to allow the class to be initialized from an unarchiver (for example, during NIB deserialization).</remarks>
	  <param name="coder">The unarchiver object</param>
    </member>
        
    <member name="M:ShinobiCharts.SChartScatterSeriesStyle.#ctor(MonoTouch.Foundation.NSObjectFlag)">
      <summary>Constructor to call on derived classes to skip initialization and merely allocate the object.
      </summary>
	  <remarks>You should not invoke this method directly.</remarks>
	  <param name="t">Unused sentinel value</param>
    </member>
		
	<member name="M:ShinobiCharts.SChartScatterSeriesStyle.#ctor(System.IntPtr)">
      <summary>A constructor used when creating managed representations of unmanaged objects.
      </summary>
	  <remarks>You should not invoke this method directly.</remarks>
	  <param name="handle">Handle of the unmanaged object</param>
    </member>

	<member name="P:ShinobiCharts.SChartScatterSeriesStyle.ClassHandle">
      <summary>The handle for this class.
      </summary>
	  <remarks>Not normally used by application code</remarks>
    </member>
       
	<member name="M:ShinobiCharts.SChartScatterSeriesStyle.Dispose(System.Boolean)">
      <summary> Releases unmanaged resources.
      </summary>
	  <remarks></remarks>
	  <param name="disposing">True if called by Dispose, false if called from a finalizer</param>
    </member>
        
    <member name="P:ShinobiCharts.SChartScatterSeriesStyle.PointStyle">
      <summary>Manages the appearance of points that are not selected.
      </summary>
		<remarks></remarks>
    </member>
        
    <member name="P:ShinobiCharts.SChartScatterSeriesStyle.SelectedPointStyle">
      <summary>Manages the appearance of points that are selected.
      </summary>
		<remarks></remarks>
    </member>
        
    <member name="M:ShinobiCharts.SChartScatterSeriesStyle.SupplementStyle(ShinobiCharts.SChartScatterSeriesStyle)">
      <summary>Updates this style object using the configuration of the passed in style.
      </summary>
	  <remarks></remarks>
	  <param name="style">The new style with which to update this style object.</param>
    </member>

      
    <member name="T:ShinobiCharts.SChartLegendSymbolScatterSeries">
      <summary>A symbol designed to represent a scatter series in the chart legend.</summary>
		<remarks>The symbol makes use of the series styling, in order to better represent it in the legend.</remarks>
    </member>
        
	<member name="M:ShinobiCharts.SChartLegendSymbolScatterSeries.#ctor(MonoTouch.Foundation.NSCoder)">
      <summary>A constructor that initializes the object from the data stored in the unarchiver object.
      </summary>
	  <remarks>This constructor is provided to allow the class to be initialized from an unarchiver (for example, during NIB deserialization).</remarks>
	  <param name="coder">The unarchiver object</param>
    </member>
        
    <member name="M:ShinobiCharts.SChartLegendSymbolScatterSeries.#ctor(MonoTouch.Foundation.NSObjectFlag)">
      <summary>Constructor to call on derived classes to skip initialization and merely allocate the object.
      </summary>
	  <remarks>You should not invoke this method directly.</remarks>
	  <param name="t">Unused sentinel value</param>
    </member>
		
	<member name="M:ShinobiCharts.SChartLegendSymbolScatterSeries.#ctor(System.IntPtr)">
      <summary>A constructor used when creating managed representations of unmanaged objects.
      </summary>
	  <remarks>You should not invoke this method directly.</remarks>
	  <param name="handle">Handle of the unmanaged object</param>
    </member>		

	<member name="P:ShinobiCharts.SChartLegendSymbolScatterSeries.ClassHandle">
      <summary>The handle for this class.
      </summary>
	  <remarks>Not normally used by application code</remarks>
    </member>
        
	<member name="M:ShinobiCharts.SChartLegendSymbolScatterSeries.Dispose(System.Boolean)">
      <summary> Releases unmanaged resources.
      </summary>
	  <remarks></remarks>
	  <param name="disposing">True if called by Dispose, false if called from a finalizer</param>
    </member>

    <member name="P:ShinobiCharts.SChartLegendSymbolScatterSeries.Style">
      <summary>The style object for the series associated with this legend symbol.
      </summary>
		<remarks>This property allows you to query the style properties which have been used to create this legend symbol.
		</remarks>
    </member>
        
    <member name="M:ShinobiCharts.SChartLegendSymbolScatterSeries.#ctor(ShinobiCharts.SChartScatterSeries)">
      <summary>Initializes and returns a newly allocated symbol to represent this scatter series.
      </summary>
		<remarks></remarks>
			<param name="series">The chart series which this symbol will represent in the chart legend.</param>
			<returns>An initialized symbol, or null if it couldn't be created.</returns>
    </member>
		
	<member name="M:ShinobiCharts.SChartLegendSymbolScatterSeries.#ctor(MonoTouch.Foundation.NSCoder)">
      <summary>A constructor that initializes the object from the data stored in the unarchiver object.
      </summary>
	  <remarks>This constructor is provided to allow the class to be initialized from an unarchiver (for example, during NIB deserialization).</remarks>
	  <param name="coder">The unarchiver object</param>
    </member>

        
    <member name="M:ShinobiCharts.SChartLegendSymbolScatterSeries.#ctor(MonoTouch.Foundation.NSObjectFlag)">
      <summary>Constructor to call on derived classes to skip initialization and merely allocate the object.
      </summary>
	  <remarks>You should not invoke this method directly.</remarks>
	  <param name="t">Unused sentinel value</param>
    </member>
		
	<member name="M:ShinobiCharts.SChartLegendSymbolScatterSeries.#ctor(System.IntPtr)">
      <summary>A constructor used when creating managed representations of unmanaged objects.
      </summary>
	  <remarks>You should not invoke this method directly.</remarks>
	  <param name="handle">Handle of the unmanaged object</param>
    </member>	

      
    <member name="T:ShinobiCharts.SChartLogarithmicAxis">
      <summary> An axis that uses numeric data, displayed on a logarithmic scale (e.g. 1, 10, 100, 1000, equally spaced)
       </summary>
		<remarks> Unlike a 'standard' number axis, the distance between n and n+1 is not the same as the distance between n+7 and n+8.
 					Rather, the distance between Base^(n) and Base^(n+1) is the same as the distance between Base^(n+7) and Base^(n+8).
		</remarks>
    </member>
        
    <member name="M:ShinobiCharts.SChartLogarithmicAxis.#ctor">
      <summary>	Default constructor
      </summary>
	  <remarks></remarks>
    </member>
        
    <member name="M:ShinobiCharts.SChartLogarithmicAxis.#ctor(ShinobiCharts.SChartNumberRange)">
      <summary>	Initialize with a SChartNumberRange as the default range
      </summary>
	  <remarks></remarks>
	  <param name="range"></param>
    </member>
		
	<member name="M:ShinobiCharts.SChartLogarithmicAxis.#ctor(MonoTouch.Foundation.NSCoder)">
      <summary>A constructor that initializes the object from the data stored in the unarchiver object.
      </summary>
	  <remarks>This constructor is provided to allow the class to be initialized from an unarchiver (for example, during NIB deserialization).</remarks>
	  <param name="coder">The unarchiver object</param>
    </member>
        
    <member name="M:ShinobiCharts.SChartLogarithmicAxis.#ctor(MonoTouch.Foundation.NSObjectFlag)">
      <summary>Constructor to call on derived classes to skip initialization and merely allocate the object.
      </summary>
	  <remarks>You should not invoke this method directly.</remarks>
	  <param name="t">Unused sentinel value</param>
    </member>
		
	<member name="M:ShinobiCharts.SChartLogarithmicAxis.#ctor(System.IntPtr)">
      <summary>A constructor used when creating managed representations of unmanaged objects.
      </summary>
	  <remarks>You should not invoke this method directly.</remarks>
	  <param name="handle">Handle of the unmanaged object</param>
    </member>
        
	<member name="P:ShinobiCharts.SChartLogarithmicAxis.ClassHandle">
      <summary>The handle for this class.
      </summary>
	  <remarks>Not normally used by application code</remarks>
    </member>
       
	<member name="M:ShinobiCharts.SChartLogarithmicAxis.Dispose(System.Boolean)">
      <summary> Releases unmanaged resources.
      </summary>
	  <remarks></remarks>
	  <param name="disposing">True if called by Dispose, false if called from a finalizer</param>
    </member>
		
    <member name="P:ShinobiCharts.SChartLogarithmicAxis.Base">
      <summary> The Base of the logarithmic axis. 
      </summary>
	  <remarks></remarks>
    </member>


    <member name="T:ShinobiCharts.SChartDarkTheme">
      <summary>The SChartDarkTheme uses softer colors based on a dark background.</summary>
		<remarks>For a more detailed explanation of how themes work, see the documentation for the SChartTheme class.</remarks>
    </member>
        
    <member name="M:ShinobiCharts.SChartDarkTheme.#ctor">
      <summary> 
          Simple constructor, creates the Style object with settings.
	  </summary>
		<remarks></remarks>
    </member>
				
	<member name="M:ShinobiCharts.SChartDarkTheme.#ctor(MonoTouch.Foundation.NSCoder)">
     <summary>A constructor that initializes the object from the data stored in the unarchiver object.
      </summary>
	  <remarks>This constructor is provided to allow the class to be initialized from an unarchiver (for example, during NIB deserialization).</remarks>
	  <param name="coder">The unarchiver object</param>
    </member>
        
    <member name="M:ShinobiCharts.SChartDarkTheme.#ctor(MonoTouch.Foundation.NSObjectFlag)">
      <summary>Constructor to call on derived classes to skip initialization and merely allocate the object.
      </summary>
	  <remarks>You should not invoke this method directly.</remarks>
	  <param name="t">Unused sentinel value</param>
    </member>
		
	<member name="M:ShinobiCharts.SChartDarkTheme.#ctor(System.IntPtr)">
      <summary>A constructor used when creating managed representations of unmanaged objects.
      </summary>
	  <remarks>You should not invoke this method directly.</remarks>
	  <param name="handle">Handle of the unmanaged object</param>
    </member>

	<member name="P:ShinobiCharts.SChartDarkTheme.ClassHandle">
        <summary>
        The handle for this class.
        </summary>
	  <remarks>Not normally used by application code</remarks>
    </member>	

	<member name="M:ShinobiCharts.SChartDarkTheme.Dispose(System.Boolean)">
      <summary> Releases unmanaged resources.
      </summary>
	  <remarks></remarks>
	  <param name="disposing">True if called by Dispose, false if called from a finalizer</param>
    </member>

		
    <member name="T:ShinobiCharts.SChartLightTheme">
      <summary>The SChartLightTheme uses brighter colors based on a white background.</summary>
		<remarks>For a more detailed explanation of how themes work, see the documentation for the SChartTheme class.</remarks>
    </member>
        
    <member name="M:ShinobiCharts.SChartLightTheme.#ctor">
      <summary> 
          Simple constructor, creates the Style object with settings.
	  </summary>
		<remarks></remarks>
    </member>
				
	<member name="M:ShinobiCharts.SChartLightTheme.#ctor(MonoTouch.Foundation.NSCoder)">
     <summary>A constructor that initializes the object from the data stored in the unarchiver object.
      </summary>
	  <remarks>This constructor is provided to allow the class to be initialized from an unarchiver (for example, during NIB deserialization).</remarks>
	  <param name="coder">The unarchiver object</param>
    </member>
        
    <member name="M:ShinobiCharts.SChartLightTheme.#ctor(MonoTouch.Foundation.NSObjectFlag)">
      <summary>Constructor to call on derived classes to skip initialization and merely allocate the object.
      </summary>
	  <remarks>You should not invoke this method directly.</remarks>
	  <param name="t">Unused sentinel value</param>
    </member>
		
	<member name="M:ShinobiCharts.SChartLightTheme.#ctor(System.IntPtr)">
      <summary>A constructor used when creating managed representations of unmanaged objects.
      </summary>
	  <remarks>You should not invoke this method directly.</remarks>
	  <param name="handle">Handle of the unmanaged object</param>
    </member>

	<member name="P:ShinobiCharts.SChartLightTheme.ClassHandle">
        <summary>
        The handle for this class.
        </summary>
	  <remarks>Not normally used by application code</remarks>
    </member>	

	<member name="M:ShinobiCharts.SChartLightTheme.Dispose(System.Boolean)">
      <summary> Releases unmanaged resources.
      </summary>
	  <remarks></remarks>
	  <param name="disposing">True if called by Dispose, false if called from a finalizer</param>
    </member>

		
    <member name="T:ShinobiCharts.SChartMidnightTheme">
      <summary>The SChartMidnightTheme is based around a black background with lighter features.</summary>
		<remarks></remarks>
    </member>
        
    <member name="M:ShinobiCharts.SChartMidnightTheme.#ctor">
      <summary> 
          Simple constructor, creates the Style object with settings.
	  </summary>
		<remarks></remarks>
    </member>
				
	<member name="M:ShinobiCharts.SChartMidnightTheme.#ctor(MonoTouch.Foundation.NSCoder)">
     <summary>A constructor that initializes the object from the data stored in the unarchiver object.
      </summary>
	  <remarks>This constructor is provided to allow the class to be initialized from an unarchiver (for example, during NIB deserialization).</remarks>
	  <param name="coder">The unarchiver object</param>
    </member>
        
    <member name="M:ShinobiCharts.SChartMidnightTheme.#ctor(MonoTouch.Foundation.NSObjectFlag)">
      <summary>Constructor to call on derived classes to skip initialization and merely allocate the object.
      </summary>
	  <remarks>You should not invoke this method directly.</remarks>
	  <param name="t">Unused sentinel value</param>
    </member>
		
	<member name="M:ShinobiCharts.SChartMidnightTheme.#ctor(System.IntPtr)">
      <summary>A constructor used when creating managed representations of unmanaged objects.
      </summary>
	  <remarks>You should not invoke this method directly.</remarks>
	  <param name="handle">Handle of the unmanaged object</param>
    </member>

	<member name="P:ShinobiCharts.SChartMidnightTheme.ClassHandle">
        <summary>
        The handle for this class.
        </summary>
	  <remarks>Not normally used by application code</remarks>
    </member>	

	<member name="M:ShinobiCharts.SChartMidnightTheme.Dispose(System.Boolean)">
      <summary> Releases unmanaged resources.
      </summary>
	  <remarks></remarks>
	  <param name="disposing">True if called by Dispose, false if called from a finalizer</param>
    </member>

    <member name="P:ShinobiCharts.SChartMidnightTheme.Midnight_greyColor">
      <summary>  Gray palette Color 
      </summary>
			<remarks>
				This is used for:
				<list type="bullet">
					<item><term>The axis lines and tick marks on the chart axes.</term></item>
					<item><term>Crosshair lines.</term></item>
					<item><term>Tracking lines on box gestures.</term></item>
				</list>
			</remarks>
    </member>
        
    <member name="P:ShinobiCharts.SChartMidnightTheme.Midnight_greyColorLowAlpha">
      <summary>Gray palette color with reduced alpha.
      </summary>
		<remarks>This is used for major grid lines on the chart.</remarks>
    </member>
        
    <member name="P:ShinobiCharts.SChartMidnightTheme.Midnight_greyColorLabel">
      <summary>Gray palette color for text labels.
      </summary>
		<remarks>
				This is used for:
				<list type="bullet">
					<item><term>The chart title.</term></item>
					<item><term>The axis titles.</term></item>
					<item><term>Labels on the chart axes.</term></item>
					<item><term>The text in the chart legend.</term></item>
				</list>
			</remarks>
    </member>
        
    <member name="P:ShinobiCharts.SChartMidnightTheme.Midnight_blueColorDark">
      <summary>DEPRECATED - use SChartTheme.BlueColorDark instead.
      </summary>
		<remarks></remarks>
    </member>
        
    <member name="P:ShinobiCharts.SChartMidnightTheme.Midnight_blueColorLight">
      <summary>DEPRECATED - use SChartTheme.BlueColorLight instead.
      </summary>
		<remarks></remarks>
    </member>
       
    <member name="P:ShinobiCharts.SChartMidnightTheme.Midnight_greenColorDark">
      <summary> DEPRECATED - use SChartTheme.GreenColorDark instead.
      </summary>
		<remarks></remarks>
    </member>
        
    <member name="P:ShinobiCharts.SChartMidnightTheme.Midnight_greenColorLight">
      <summary>DEPRECATED - use SChartTheme.GreenColorLight instead.
      </summary>
		<remarks></remarks>
    </member>
        
    <member name="P:ShinobiCharts.SChartMidnightTheme.Midnight_purpleColorDark">
      <summary>DEPRECATED - use SChartTheme.PurpleColorDark instead.
      </summary>
		<remarks></remarks>
    </member>
        
    <member name="P:ShinobiCharts.SChartMidnightTheme.Midnight_purpleColorLight">
      <summary>DEPRECATED - use SChartTheme.PurpleColorLight instead.
      </summary>
		<remarks></remarks>
    </member>
        
    <member name="P:ShinobiCharts.SChartMidnightTheme.Midnight_orangeColorDark">
      <summary>DEPRECATED - use SChartTheme.OrangeColorDark instead.
      </summary>
		<remarks></remarks>
    </member>
        
    <member name="P:ShinobiCharts.SChartMidnightTheme.Midnight_orangeColorLight">
      <summary>DEPRECATED - use SChartTheme.OrangeColorLight instead.
      </summary>
		<remarks></remarks>
    </member>
        
    <member name="P:ShinobiCharts.SChartMidnightTheme.Midnight_yellowColorDark">
      <summary>DEPRECATED - use SChartTheme.YellowColorDark instead.
      </summary>
		<remarks></remarks>
    </member>
        
    <member name="P:ShinobiCharts.SChartMidnightTheme.Midnight_yellowColorLight">
      <summary>DEPRECATED - use SChartTheme.YellowColorLight instead.
      </summary>
		<remarks></remarks>
    </member>
        
    <member name="P:ShinobiCharts.SChartMidnightTheme.Midnight_brownColorDark">
      <summary> Brown palette Color.
      </summary>
		<remarks>
				This is used for:
				<list type="bullet">
					<item><term>The area fill underneath the sixth line series on the chart.</term></item>
					<item><term>The sixth bar/column series on the chart.</term></item>
					<item><term>The sixth scatter series on the chart.</term></item>
				</list>
			</remarks>
    </member>
        
    <member name="P:ShinobiCharts.SChartMidnightTheme.Midnight_brownColorLight">
      <summary> Brown palette Color with increased brightness.
      </summary>
		<remarks>
				This is used for:
				<list type="bullet">
					<item><term>The sixth line series on the chart.</term></item>
					<item><term>The sixth bar/column series on the chart.</term></item>
				</list>
			</remarks>
    </member>
        
    <member name="P:ShinobiCharts.SChartMidnightTheme.Midnight_pinkColor">
      <summary>DEPRECATED - This color is no longer used.  It has been left on the API for backwards compatibility only.
      </summary>
		<remarks></remarks>
    </member>
        
    <member name="P:ShinobiCharts.SChartMidnightTheme.Midnight_pinkColorLowAlpha">
      <summary>DEPRECATED - This color is no longer used.  It has been left on the API for backwards compatibility only.
      </summary>
		<remarks></remarks>
    </member>
        
    <member name="P:ShinobiCharts.SChartMidnightTheme.Midnight_textShadowColor">
      <summary>Shadow palette color for labels.
      </summary>
		<remarks>
				This is used for:
				<list type="bullet">
					<item><term>Shadow on text in axis labels.</term></item>
				</list>
			</remarks>
    </member>

      
    <member name="T:ShinobiCharts.SChartMultiXDataPoint">
      <summary>Represents cartesian data points which have multiple x values.
      </summary>
		<remarks>
				Examples of series which could have multiple x values for each data point are:
				<list type="bullet">
					<item><term><see cref="T:ShinobiCharts.SChartBandSeries" /></term></item>
					<item><term><see cref="T:ShinobiCharts.SChartCandlestickSeries" /></term></item>
					<item><term><see cref="T:ShinobiCharts.SChartOHLCSeries" /></term></item>
				</list>
			</remarks>
    </member>

    <member name="M:ShinobiCharts.SChartMultiXDataPoint.#ctor">
      <summary>Default constructor
      </summary>
		<remarks></remarks>
    </member>
        
	<member name="M:ShinobiCharts.SChartMultiXDataPoint.#ctor(MonoTouch.Foundation.NSCoder)">
      <summary>A constructor that initializes the object from the data stored in the unarchiver object.
      </summary>
	  <remarks>This constructor is provided to allow the class to be initialized from an unarchiver (for example, during NIB deserialization).</remarks>
	  <param name="coder">The unarchiver object</param>
    </member>
        
    <member name="M:ShinobiCharts.SChartMultiXDataPoint.#ctor(MonoTouch.Foundation.NSObjectFlag)">
      <summary>Constructor to call on derived classes to skip initialization and merely allocate the object.
      </summary>
	  <remarks>You should not invoke this method directly.</remarks>
	  <param name="t">Unused sentinel value</param>
    </member>
		
	<member name="M:ShinobiCharts.SChartMultiXDataPoint.#ctor(System.IntPtr)">
      <summary>A constructor used when creating managed representations of unmanaged objects.
      </summary>
	  <remarks>You should not invoke this method directly.</remarks>
	  <param name="handle">Handle of the unmanaged object</param>
    </member>
        
	<member name="M:ShinobiCharts.SChartMultiXDataPoint.ConformsToProtocol(System.IntPtr)">
      <summary>Internal - checks whether this object conforms to a protocol.
      </summary>
	  <remarks>Not normally called from application code - used by the Shinobi framework.</remarks>
	  <param name="protocol">The protocol</param>
	  <returns>True if the object conforms to the protocol</returns>
    </member>

	<member name="P:ShinobiCharts.SChartMultiXDataPoint.ClassHandle">
        <summary>
        The handle for this class.
        </summary>
	  <remarks>Not normally used by application code</remarks>
    </member>	

	<member name="M:ShinobiCharts.SChartMultiXDataPoint.Dispose(System.Boolean)">
      <summary> Releases unmanaged resources.
      </summary>
	  <remarks></remarks>
	  <param name="disposing">True if called by Dispose, false if called from a finalizer</param>
    </member>

    <member name="P:ShinobiCharts.SChartMultiXDataPoint.XValue">
      <summary>  A single x value representation of this data point 
      </summary>
		<remarks></remarks>
    </member>
        
    <member name="P:ShinobiCharts.SChartMultiXDataPoint.YValue">
      <summary> The y value of this data point. 
      </summary>
		<remarks></remarks>
    </member>
        
    <member name="P:ShinobiCharts.SChartMultiXDataPoint.XValues">
      <summary> A dictionary of values for this data point. 
      </summary>
		<remarks>
				In order to query the values at a point, you can use <see cref="P:ShinobiCharts.SChartDataSeries.XValueKeys" />.
				Using the set of keys returned by this property, you are able to iterate through a set of SChartMultiXDataPoint objects,
				and get the value corresponding to the relevant key.
			</remarks>
    </member>
        
    <member name="P:ShinobiCharts.SChartMultiXDataPoint.Selected">
      <summary>  Is this point Selected.
      </summary>
		<remarks> When set to true this data point will adopt a Selected state. One effect Based on this state is the Style, 
				  the series will apply the Selected Style to a Selected point. 
		</remarks>
    </member>

      
    <member name="T:ShinobiCharts.SChartMultiYDataPoint">
      <summary>Represents cartesian data points which have multiple y values.
      </summary>
		<remarks>
				Examples of series which could have multiple y values for each data point are:
				<list type="bullet">
					<item><term><see cref="T:ShinobiCharts.SChartBandSeries" /></term></item>
					<item><term><see cref="T:ShinobiCharts.SChartCandlestickSeries" /></term></item>
					<item><term><see cref="T:ShinobiCharts.SChartOHLCSeries" /></term></item>
				</list>
			</remarks>
    </member>

    <member name="M:ShinobiCharts.SChartMultiYDataPoint.#ctor">
      <summary>Default constructor
      </summary>
		<remarks></remarks>
    </member>
        
	<member name="M:ShinobiCharts.SChartMultiYDataPoint.#ctor(MonoTouch.Foundation.NSCoder)">
      <summary>A constructor that initializes the object from the data stored in the unarchiver object.
      </summary>
	  <remarks>This constructor is provided to allow the class to be initialized from an unarchiver (for example, during NIB deserialization).</remarks>
	  <param name="coder">The unarchiver object</param>
    </member>
        
    <member name="M:ShinobiCharts.SChartMultiYDataPoint.#ctor(MonoTouch.Foundation.NSObjectFlag)">
      <summary>Constructor to call on derived classes to skip initialization and merely allocate the object.
      </summary>
	  <remarks>You should not invoke this method directly.</remarks>
	  <param name="t">Unused sentinel value</param>
    </member>
		
	<member name="M:ShinobiCharts.SChartMultiYDataPoint.#ctor(System.IntPtr)">
      <summary>A constructor used when creating managed representations of unmanaged objects.
      </summary>
	  <remarks>You should not invoke this method directly.</remarks>
	  <param name="handle">Handle of the unmanaged object</param>
    </member>
        
	<member name="M:ShinobiCharts.SChartMultiYDataPoint.ConformsToProtocol(System.IntPtr)">
      <summary>Internal - checks whether this object conforms to a protocol.
      </summary>
	  <remarks>Not normally called from application code - used by the Shinobi framework.</remarks>
	  <param name="protocol">The protocol</param>
	  <returns>True if the object conforms to the protocol</returns>
    </member>

	<member name="P:ShinobiCharts.SChartMultiYDataPoint.ClassHandle">
        <summary>
        The handle for this class.
        </summary>
	  <remarks>Not normally used by application code</remarks>
    </member>	

	<member name="M:ShinobiCharts.SChartMultiYDataPoint.Dispose(System.Boolean)">
      <summary> Releases unmanaged resources.
      </summary>
	  <remarks></remarks>
	  <param name="disposing">True if called by Dispose, false if called from a finalizer</param>
    </member>

    <member name="P:ShinobiCharts.SChartMultiYDataPoint.XValue">
      <summary>  The x value for this data point 
      </summary>
		<remarks></remarks>
    </member>

        
    <member name="P:ShinobiCharts.SChartMultiYDataPoint.YValue">
      <summary> A single y value representation of this data point. 
      </summary>
		<remarks></remarks>
    </member>

        
    <member name="P:ShinobiCharts.SChartMultiYDataPoint.YValues">
      <summary> A dictionary of values for this data point. 
      </summary>
		<remarks>
				In order to query the values at a point, you can use <see cref="P:ShinobiCharts.SChartDataSeries.YValueKeys" />.
				Using the set of keys returned by this property, you are able to iterate through a set of SChartMultiYDataPoint
				objects, and get the value corresponding to the relevant key.
			</remarks>
    </member>

        
    <member name="P:ShinobiCharts.SChartMultiYDataPoint.Selected">
      <summary>  Is this point Selected.
      </summary>
		<remarks> When set to true this data point will adopt a Selected state. One effect Based on this state is the Style, 
				  the series will apply the Selected Style to a Selected point. 
		</remarks>
    </member>

      
    <member name="T:ShinobiCharts.SChartNumberAxis">
      <summary>An axis that works with numeric data points</summary>
		<remarks>
				<para>When mapping coordinates it will cast each object to an NSNumber. </para>
			<para>The frequency values for tick marks are expected to be NSNumber objects.</para>
		</remarks>
    </member>

    <member name="M:ShinobiCharts.SChartNumberAxis.#ctor">
      <summary>	Default constructor
      </summary>
	  <remarks></remarks>
    </member>
        
    <member name="M:ShinobiCharts.SChartNumberAxis.#ctor(ShinobiCharts.SChartNumberRange)">
      <summary>	Initialize with a SChartNumberRange as the default range
      </summary>
	  <remarks></remarks>
	  <param name="range"></param>
    </member>
		
	<member name="M:ShinobiCharts.SChartNumberAxis.#ctor(MonoTouch.Foundation.NSCoder)">
      <summary>A constructor that initializes the object from the data stored in the unarchiver object.
      </summary>
	  <remarks>This constructor is provided to allow the class to be initialized from an unarchiver (for example, during NIB deserialization).</remarks>
	  <param name="coder">The unarchiver object</param>
    </member>
        
    <member name="M:ShinobiCharts.SChartNumberAxis.#ctor(MonoTouch.Foundation.NSObjectFlag)">
      <summary>Constructor to call on derived classes to skip initialization and merely allocate the object.
      </summary>
	  <remarks>You should not invoke this method directly.</remarks>
	  <param name="t">Unused sentinel value</param>
    </member>
		
	<member name="M:ShinobiCharts.SChartNumberAxis.#ctor(System.IntPtr)">
      <summary>A constructor used when creating managed representations of unmanaged objects.
      </summary>
	  <remarks>You should not invoke this method directly.</remarks>
	  <param name="handle">Handle of the unmanaged object</param>
    </member>
        
	<member name="P:ShinobiCharts.SChartNumberAxis.ClassHandle">
      <summary>The handle for this class.
      </summary>
	  <remarks>Not normally used by application code</remarks>
    </member>
       
	<member name="P:ShinobiCharts.SChartNumberAxis.ZoomInLimit">
      <summary>The maximum zoom level relative to the maxRange
      </summary>
	  <remarks>The value should be within the range 1 &gt; ZoomInLimit &gt;= 10^13</remarks>
    </member>
       
	<member name="P:ShinobiCharts.SChartNumberAxis.ZoomOutLimit">
      <summary>The minimum zoom level relative to the maxRange
      </summary>
	  <remarks>The value should be within the range 0 &gt; ZoomOutLimit &gt;= 1</remarks>
    </member>
       
	<member name="M:ShinobiCharts.SChartNumberAxis.Dispose(System.Boolean)">
      <summary> Releases unmanaged resources.
      </summary>
	  <remarks></remarks>
	  <param name="disposing">True if called by Dispose, false if called from a finalizer</param>
    </member>
        
    <member name="M:ShinobiCharts.SChartNumberAxis.CalcPrecision(System.Double)">
      <summary>DEPRECATED - this will be removed from the API soon.
      </summary>
	  <remarks></remarks>
	  <param name="value"></param>
	  <returns></returns>
    </member>

      
    <member name="T:ShinobiCharts.SChartPieSeriesStyle">
      <summary>Visual style properties for pie series.
      </summary>
		<remarks>
		</remarks>
    </member>

    <member name="M:ShinobiCharts.SChartPieSeriesStyle.#ctor">
      <summary>Default constructor
      </summary>
	 <remarks></remarks>
    </member>
		
	<member name="M:ShinobiCharts.SChartPieSeriesStyle.#ctor(MonoTouch.Foundation.NSCoder)">
      <summary>A constructor that initializes the object from the data stored in the unarchiver object.
      </summary>
	  <remarks>This constructor is provided to allow the class to be initialized from an unarchiver (for example, during NIB deserialization).</remarks>
	  <param name="coder">The unarchiver object</param>
    </member>
        
    <member name="M:ShinobiCharts.SChartPieSeriesStyle.#ctor(MonoTouch.Foundation.NSObjectFlag)">
      <summary>Constructor to call on derived classes to skip initialization and merely allocate the object.
      </summary>
	  <remarks>You should not invoke this method directly.</remarks>
	  <param name="t">Unused sentinel value</param>
    </member>
		
	<member name="M:ShinobiCharts.SChartPieSeriesStyle.#ctor(System.IntPtr)">
      <summary>A constructor used when creating managed representations of unmanaged objects.
      </summary>
	  <remarks>You should not invoke this method directly.</remarks>
	  <param name="handle">Handle of the unmanaged object</param>
    </member>

	<member name="P:ShinobiCharts.SChartPieSeriesStyle.ClassHandle">
      <summary>The handle for this class.
      </summary>
	  <remarks>Not normally used by application code</remarks>
    </member>
       
	<member name="M:ShinobiCharts.SChartPieSeriesStyle.Dispose(System.Boolean)">
      <summary> Releases unmanaged resources.
      </summary>
	  <remarks></remarks>
	  <param name="disposing">True if called by Dispose, false if called from a finalizer</param>
    </member>

		
    <member name="T:ShinobiCharts.SChartPieSeries">
      <summary>A series that displays magnitude data on the chart - the larger the value of the datapoint, the larger the slice representing that datapoint.
      </summary>
		<remarks>
				<para>
					SChartPieSeries inherits most of its behavior from its parent SChartDonutSeries.
					Have a look at the SChartDonutSeries API documentation for more information on the common behavior.
				</para><para>
					One way in which pie series differ from donut series is with regard to styling.
					A pie series contains an instance of SChartPieSeriesStyle, which manages its appearance.
				</para>
		</remarks>
    </member>

    <member name="M:ShinobiCharts.SChartPieSeries.#ctor">
      <summary>Default constructor
      </summary>
	 <remarks></remarks>
    </member>
		
	<member name="M:ShinobiCharts.SChartPieSeries.#ctor(MonoTouch.Foundation.NSCoder)">
      <summary>A constructor that initializes the object from the data stored in the unarchiver object.
      </summary>
	  <remarks>This constructor is provided to allow the class to be initialized from an unarchiver (for example, during NIB deserialization).</remarks>
	  <param name="coder">The unarchiver object</param>
    </member>
        
    <member name="M:ShinobiCharts.SChartPieSeries.#ctor(MonoTouch.Foundation.NSObjectFlag)">
      <summary>Constructor to call on derived classes to skip initialization and merely allocate the object.
      </summary>
	  <remarks>You should not invoke this method directly.</remarks>
	  <param name="t">Unused sentinel value</param>
    </member>
		
	<member name="M:ShinobiCharts.SChartPieSeries.#ctor(System.IntPtr)">
      <summary>A constructor used when creating managed representations of unmanaged objects.
      </summary>
	  <remarks>You should not invoke this method directly.</remarks>
	  <param name="handle">Handle of the unmanaged object</param>
    </member>

	<member name="P:ShinobiCharts.SChartPieSeries.ClassHandle">
      <summary>The handle for this class.
      </summary>
	  <remarks>Not normally used by application code</remarks>
    </member>
        
	<member name="M:ShinobiCharts.SChartPieSeries.Dispose(System.Boolean)">
      <summary> Releases unmanaged resources.
      </summary>
	  <remarks></remarks>
	  <param name="disposing">True if called by Dispose, false if called from a finalizer</param>
    </member>
		
    <member name="P:ShinobiCharts.SChartPieSeries.Style">
      <summary>Manages the appearance of the pie series on the chart.
      </summary>
		<remarks>The default settings of the style are inherited from the chart theme.
				You can tweak the appearance of the series by modifying the style.
		</remarks>
    </member>

    <member name="P:ShinobiCharts.SChartPieSeries.SelectedStyle">
      <summary>Manages the appearance of the pie series when it is selected.
      </summary>
		<remarks>
				Style settings in this object will be applied when the series is marked as selected (or a slice is selected).
				The default settings of the style are inherited from the chart theme.
				You can tweak the appearance of the series by modifying the style.
			</remarks>
    </member>

    <member name="P:ShinobiCharts.SChartPieSeries.PieCenter">
      <summary>This returns the center point of the pie, within the chart frame.
      </summary>
	  <remarks>Identical to SChartDonutSeries.GetDonutCenter.</remarks>
    </member>

      
    <member name="T:ShinobiCharts.SChartSeriesStyle">
      <summary>SChartSeriesStyle is the base class for all series styles in ShinobiCharts.
      </summary>
			<remarks>
				Series style objects manage the appearance of series on a chart.
				SChartSeriesStyle allows you to modify the representation of the series in the chart legend.
				In order to tweak properties on a series style object which are specific to that kind of series, you should look
				at the documentation for the concrete series styles which are available.  These are:
				<list type="bullet">
					<item><term><see cref="T:ShinobiCharts.SChartBarSeriesStyle" /> - manages the appearance of bar series.</term></item>
					<item><term><see cref="T:ShinobiCharts.SChartColumnSeriesStyle" /> - manages the appearance of column series.</term></item>
					<item><term><see cref="T:ShinobiCharts.SChartCandlestickSeriesStyle" /> - manages the appearance of candlestick series.</term></item>
					<item><term><see cref="T:ShinobiCharts.SChartDonutSeriesStyle" /> - manages the appearance of donut series.</term></item>
					<item><term><see cref="T:ShinobiCharts.SChartLineSeriesStyle" /> - manages the appearance of line series.</term></item>
					<item><term><see cref="T:ShinobiCharts.SChartBandSeriesStyle" /> - manages the appearance of band series.</term></item>
					<item><term><see cref="T:ShinobiCharts.SChartOHLCSeriesStyle" /> - manages the appearance of Open-High-Low-Closed (OHLC) series.</term></item>
					<item><term><see cref="T:ShinobiCharts.SChartPieSeriesStyle" /> - manages the appearance of pie series.</term></item>
					<item><term><see cref="T:ShinobiCharts.SChartScatterSeriesStyle" /> - manages the appearance of scatter series.</term></item>
				</list>
			</remarks>
    </member>

    <member name="M:ShinobiCharts.SChartSeriesStyle.#ctor">
      <summary>Default constructor
      </summary>
	 <remarks></remarks>
    </member>
		
	<member name="M:ShinobiCharts.SChartSeriesStyle.#ctor(MonoTouch.Foundation.NSCoder)">
      <summary>A constructor that initializes the object from the data stored in the unarchiver object.
      </summary>
	  <remarks>This constructor is provided to allow the class to be initialized from an unarchiver (for example, during NIB deserialization).</remarks>
	  <param name="coder">The unarchiver object</param>
    </member>
        
    <member name="M:ShinobiCharts.SChartSeriesStyle.#ctor(MonoTouch.Foundation.NSObjectFlag)">
      <summary>Constructor to call on derived classes to skip initialization and merely allocate the object.
      </summary>
	  <remarks>You should not invoke this method directly.</remarks>
	  <param name="t">Unused sentinel value</param>
    </member>
		
	<member name="M:ShinobiCharts.SChartSeriesStyle.#ctor(System.IntPtr)">
      <summary>A constructor used when creating managed representations of unmanaged objects.
      </summary>
	  <remarks>You should not invoke this method directly.</remarks>
	  <param name="handle">Handle of the unmanaged object</param>
    </member>

	<member name="P:ShinobiCharts.SChartSeriesStyle.ClassHandle">
      <summary>The handle for this class.
      </summary>
	  <remarks>Not normally used by application code</remarks>
    </member>
       
	<member name="M:ShinobiCharts.SChartSeriesStyle.Dispose(System.Boolean)">
      <summary> Releases unmanaged resources.
      </summary>
	  <remarks></remarks>
	  <param name="disposing">True if called by Dispose, false if called from a finalizer</param>
    </member>
        
    <member name="M:ShinobiCharts.SChartSeriesStyle.SupplementStyle(ShinobiCharts.SChartSeriesStyle)">
      <summary>Updates this style object using the configuration of the passed in style.
      </summary>
	  <remarks></remarks>
	  <param name="style">The new style with which to update this style object.</param>
    </member>

    <member name="P:ShinobiCharts.SChartSeriesStyle.UseSeriesSymbols">
      <summary>Defines whether the chart legend will display a symbolic representation of the series.
			</summary>
	  <remarks>
				If this is set to true, the legend will display symbols.
				If this is set to false, the series will be represented by a solid block of color.
			</remarks>
    </member>

		
    <member name="T:ShinobiCharts.SChartStepLineSeries">
      <summary>A type of SChartLineSeries that uses its data points to construct a step line series.
      </summary>
			<remarks>
				The step line series consists of a number of points which may or may not be marked, that are connected by
				a stepping line with an optional fill (i.e. an area series) between the line and the axis.
			</remarks>
    </member>
		
    <member name="M:ShinobiCharts.SChartStepLineSeries.#ctor">
      <summary>Default constructor
      </summary>
	 <remarks></remarks>
    </member>
		
	<member name="M:ShinobiCharts.SChartStepLineSeries.#ctor(MonoTouch.Foundation.NSCoder)">
      <summary>A constructor that initializes the object from the data stored in the unarchiver object.
      </summary>
	  <remarks>This constructor is provided to allow the class to be initialized from an unarchiver (for example, during NIB deserialization).</remarks>
	  <param name="coder">The unarchiver object</param>
    </member>
        
    <member name="M:ShinobiCharts.SChartStepLineSeries.#ctor(MonoTouch.Foundation.NSObjectFlag)">
      <summary>Constructor to call on derived classes to skip initialization and merely allocate the object.
      </summary>
	  <remarks>You should not invoke this method directly.</remarks>
	  <param name="t">Unused sentinel value</param>
    </member>
		
	<member name="M:ShinobiCharts.SChartStepLineSeries.#ctor(System.IntPtr)">
      <summary>A constructor used when creating managed representations of unmanaged objects.
      </summary>
	  <remarks>You should not invoke this method directly.</remarks>
	  <param name="handle">Handle of the unmanaged object</param>
    </member>

	<member name="P:ShinobiCharts.SChartStepLineSeries.ClassHandle">
      <summary>The handle for this class.
      </summary>
	  <remarks>Not normally used by application code</remarks>
    </member>
        

    <member name="T:ShinobiCharts.SChartStyle">
      <summary>Responsible for managing the overall look of the chart.
      </summary>
			<remarks>
				<para>
					A look of a chart is managed by an instance of SChartTheme or one of its sub-classes.
					Themes contain a set of style objects, each of which are responsible for managing the look of a particular
					aspect of the chart.
				</para><para>
					The SChartStyle class is responsible for managing the overall look of the chart.
					This includes things like:
					<list type="bullet">
						<item><term>The background color of the chart.</term></item>
						<item><term>The color and width of the chart border.</term></item>
						<item><term>The background color of the chart plot area.</term></item>
						<item><term>The color and width of the chart plot area border.</term></item>
					</list>
				</para>
			</remarks>
    </member>
		
    <member name="M:ShinobiCharts.SChartStyle.#ctor">
      <summary>Default constructor
      </summary>
	 <remarks></remarks>
    </member>
		
	<member name="M:ShinobiCharts.SChartStyle.#ctor(MonoTouch.Foundation.NSCoder)">
      <summary>A constructor that initializes the object from the data stored in the unarchiver object.
      </summary>
	  <remarks>This constructor is provided to allow the class to be initialized from an unarchiver (for example, during NIB deserialization).</remarks>
	  <param name="coder">The unarchiver object</param>
    </member>
        
    <member name="M:ShinobiCharts.SChartStyle.#ctor(MonoTouch.Foundation.NSObjectFlag)">
      <summary>Constructor to call on derived classes to skip initialization and merely allocate the object.
      </summary>
	  <remarks>You should not invoke this method directly.</remarks>
	  <param name="t">Unused sentinel value</param>
    </member>
		
	<member name="M:ShinobiCharts.SChartStyle.#ctor(System.IntPtr)">
      <summary>A constructor used when creating managed representations of unmanaged objects.
      </summary>
	  <remarks>You should not invoke this method directly.</remarks>
	  <param name="handle">Handle of the unmanaged object</param>
    </member>

	<member name="P:ShinobiCharts.SChartStyle.ClassHandle">
      <summary>The handle for this class.
      </summary>
	  <remarks>Not normally used by application code</remarks>
    </member>
        
	<member name="M:ShinobiCharts.SChartStyle.ConformsToProtocol(System.IntPtr)">
      <summary>Internal - checks whether this object conforms to a protocol.
      </summary>
	  <remarks>Not normally called from application code - used by the Shinobi framework.</remarks>
	  <param name="protocol">The protocol</param>
	  <returns>True if the object conforms to the protocol</returns>
    </member>

	<member name="M:ShinobiCharts.SChartStyle.Dispose(System.Boolean)">
      <summary> Releases unmanaged resources.
      </summary>
	  <remarks></remarks>
	  <param name="disposing">True if called by Dispose, false if called from a finalizer</param>
    </member>
        
    <member name="P:ShinobiCharts.SChartStyle.BackgroundColor">
      <summary>The background color of the chart. 
      </summary>
		<remarks></remarks>
    </member>
        
    <member name="P:ShinobiCharts.SChartStyle.BackgroundColorGradient">
      <summary>The secondary background color of the chart.
      </summary>
		<remarks>
				This is used when the chart background has a gradient between two colors.
				The gradient runs from backgroundColor to backgroundColorGradient.
			</remarks>
    </member>
        
    <member name="P:ShinobiCharts.SChartStyle.BorderColor">
      <summary>The border color of the chart.
      </summary>
			<remarks>
				The chart border runs around the edge of the chart canvas.
				This includes the plot area and the chart axes.
			</remarks>
    </member>
        
    <member name="P:ShinobiCharts.SChartStyle.BorderWidth">
      <summary>The width of the chart border, in points.
      </summary>
			<remarks>
				The chart border runs around the edge of the chart canvas.
				This includes the plot area and the chart axes.
			</remarks>
    </member>
        
    <member name="P:ShinobiCharts.SChartStyle.PlotAreaBackgroundColor">
      <summary>The background color of the chart plot area.
      </summary>
			<remarks>
				The plot area is the region of the chart which is bounded by the chart axes
			</remarks>
    </member>
        
    <member name="P:ShinobiCharts.SChartStyle.PlotAreaBorderColor">
      <summary>The border color of the chart plot area.
      </summary>
			<remarks>
				The plot area is the region of the chart which is bounded by the chart axes.
			</remarks>
    </member>
        
    <member name="P:ShinobiCharts.SChartStyle.PlotAreaBorderWidth">
      <summary>The line width for the border of the chart plot area, in points.
      </summary>
			<remarks>
				The plot area is the region of the chart which is bounded by the axes.
			</remarks>
    </member>
        
    <member name="P:ShinobiCharts.SChartStyle.CanvasBackgroundColor">
      <summary>The background color of the chart canvas area.
      </summary>
			<remarks>
				The canvas area includes the chart plot area and the chart axes.
			</remarks>
    </member>
		
		<member name="P:ShinobiCharts.SChartStyle.LoadingDataIndicatorColor">
			<summary>
				The color of the indicator which is displayed when data is loaded in the background.
			</summary>
			<remarks></remarks>
		</member>

		
    <member name="T:ShinobiCharts.SChartTitleStyle">
      <summary>Manages the look of the titles on the chart.
      </summary>
			<remarks>
				<para>
					The look of a chart is managed by an instance of SChartTheme or one of its sub-classes.
					Themes contain a set of style objects, each of which are responsible for managing the look of a particular aspect of the chart.
					You'll find instances of this class or a subclass on the theme for axes titles and for the chart title.
				</para><para>
					The SChartTitleStyle class is responsible for managing the look of the titles on the chart.
					This includes things like:
					<list type="bullet">
						<item><term>The title color.</term></item>
						<item><term>The title font.</term></item>
						<item><term>The minimum font size for the title.</term></item>
						<item><term>The background color of the title label.</term></item>
						<item><term>The position of the title.</term></item>
					</list>
				</para><para>
					There are two subclasses of SChartTitleStyle.
					SChartAxisTitleStyle is used for the titles on the chart axes.
					SChartMainTitleStyle is used for the main title on the chart.
				</para>
			</remarks>
    </member>
        
    <member name="M:ShinobiCharts.SChartTitleStyle.#ctor">
      <summary>Default constructor
      </summary>
	 <remarks></remarks>
    </member>
		
	<member name="M:ShinobiCharts.SChartTitleStyle.#ctor(MonoTouch.Foundation.NSCoder)">
      <summary>A constructor that initializes the object from the data stored in the unarchiver object.
      </summary>
	  <remarks>This constructor is provided to allow the class to be initialized from an unarchiver (for example, during NIB deserialization).</remarks>
	  <param name="coder">The unarchiver object</param>
    </member>
        
    <member name="M:ShinobiCharts.SChartTitleStyle.#ctor(MonoTouch.Foundation.NSObjectFlag)">
      <summary>Constructor to call on derived classes to skip initialization and merely allocate the object.
      </summary>
	  <remarks>You should not invoke this method directly.</remarks>
	  <param name="t">Unused sentinel value</param>
    </member>
		
	<member name="M:ShinobiCharts.SChartTitleStyle.#ctor(System.IntPtr)">
      <summary>A constructor used when creating managed representations of unmanaged objects.
      </summary>
	  <remarks>You should not invoke this method directly.</remarks>
	  <param name="handle">Handle of the unmanaged object</param>
    </member>

	<member name="P:ShinobiCharts.SChartTitleStyle.ClassHandle">
      <summary>The handle for this class.
      </summary>
	  <remarks>Not normally used by application code</remarks>
    </member>
        
	<member name="M:ShinobiCharts.SChartTitleStyle.Dispose(System.Boolean)">
      <summary> Releases unmanaged resources.
      </summary>
	  <remarks></remarks>
	  <param name="disposing">True if called by Dispose, false if called from a finalizer</param>
    </member>

	<member name="M:ShinobiCharts.SChartTitleStyle.ConformsToProtocol(System.IntPtr)">
      <summary>Internal - checks whether this object conforms to a protocol.
      </summary>
	  <remarks>Not normally called from application code - used by the Shinobi framework.</remarks>
	  <param name="protocol">The protocol</param>
	  <returns>True if the object conforms to the protocol</returns>
    </member>

    <member name="P:ShinobiCharts.SChartTitleStyle.TextColor">
      <summary> The Color of the text for the chart title.
      </summary>
		<remarks></remarks>
    </member>
        
    <member name="P:ShinobiCharts.SChartTitleStyle.Font">
      <summary>The font for the title text.</summary>
		<remarks></remarks>
    </member>

		<member name="P:ShinobiCharts.SChartTitleStyle.MinimumFontSize">
			<summary>Deprecated - Use <see cref="P:ShinobiCharts.SChartTitleStyle.MinimumScaleFactor" /> instead.</summary>
			<remarks>The minimum font size for the title text. Functions in the same way as the UILabel equivalent property.</remarks>
		</member>

		<member name="P:ShinobiCharts.SChartTitleStyle.MinimumScaleFactor">
			<summary>
				The minimum scale factor for the title text.
			</summary>
			<remarks>
				Functions in the same way as the UILabel equivalent property.
			</remarks>
		</member>

    <member name="P:ShinobiCharts.SChartTitleStyle.TextAlign">
      <summary>The text alignment of the title.
      </summary>
		<remarks></remarks>
    </member>
        
    <member name="P:ShinobiCharts.SChartTitleStyle.BackgroundColor">
      <summary> The background Color of the title label.
      </summary>
		<remarks></remarks>
    </member>
        
    <member name="P:ShinobiCharts.SChartTitleStyle.Position">
      <summary>Where the title will appear relative to the chart or axis.</summary>
		<remarks></remarks>
    </member>

  
    <member name="T:ShinobiCharts.SChartDataSource">
      <summary>Abstract base class for your class that links your data to your chart</summary>
	  <remarks>
				<para>You must create a SChartDataSource-derived object and assign it to the <see cref="P:ShinobiCharts.Shinobichart.DataSource"/> property on your chart.</para>
				<para>The data source provides the chart with the information it needs to construct the chart object. In general, 
				styling and event response is handled by objects subclassing <see cref="T:ShinobiCharts.SChartDelegate"/> - the data source 
				has minimal impact on the look and feel of the chart.</para>
				<para>The required methods provide the chart with information about all of the series to be displayed on that chart - 
				and the data for those series. The relevant chart object is always returned - to support the option of using a 
				single object as the data source for multiple charts.</para></remarks>
    </member>
		
    <member name="M:ShinobiCharts.SChartDataSource.#ctor">
      <summary>Default constructor
      </summary>
		<remarks></remarks>
    </member>
        
	<member name="M:ShinobiCharts.SChartDataSource.#ctor(MonoTouch.Foundation.NSCoder)">
      <summary>A constructor that initializes the object from the data stored in the unarchiver object.
      </summary>
	  <remarks>This constructor is provided to allow the class to be initialized from an unarchiver (for example, during NIB deserialization).</remarks>
	  <param name="coder">The unarchiver object</param>
    </member>
        
    <member name="M:ShinobiCharts.SChartDataSource.#ctor(MonoTouch.Foundation.NSObjectFlag)">
      <summary>Constructor to call on derived classes to skip initialization and merely allocate the object.
      </summary>
	  <remarks>You should not invoke this method directly.</remarks>
	  <param name="t">Unused sentinel value</param>
    </member>
		
	<member name="M:ShinobiCharts.SChartDataSource.#ctor(System.IntPtr)">
      <summary>A constructor used when creating managed representations of unmanaged objects.
      </summary>
	  <remarks>You should not invoke this method directly.</remarks>
	  <param name="handle">Handle of the unmanaged object</param>
    </member>
        
	<member name="M:ShinobiCharts.SChartDataSource.ConformsToProtocol(System.IntPtr)">
      <summary>Internal - checks whether this object conforms to a protocol.
      </summary>
	  <remarks>Not normally called from application code - used by the Shinobi framework.</remarks>
	  <param name="protocol">The protocol</param>
	  <returns>True if the object conforms to the protocol</returns>
    </member>

    <member name="M:ShinobiCharts.SChartDataSource.GetNumberOfSeries(ShinobiCharts.ShinobiChart)">
      <summary>Returns the number of series in the given chart.
      </summary>
			<remarks>
				The chart can display multiple series, and can display series of different types at the same time.
				For each of these series, the chart will expect to receive a SChartSeries object from the datasource, through
				the <see cref="M:ShinobiCharts.SChartDataSource.GetSeries(ShinobiCharts.ShinobiChart,System.Int32)" /> method.
			</remarks>
			<param name="chart">The chart</param>
    </member>
        
    <member name="M:ShinobiCharts.SChartDataSource.GetSeries(ShinobiCharts.ShinobiChart,System.Int32)">
      <summary>Returns the SChartSeries object at the given index in the specified chart.
       </summary>
			<remarks>
				<para>
					The number of SChartSeries in the chart are specified by the
					<see cref="M:ShinobiCharts.SChartDataSource.GetNumberOfSeries(ShinobiCharts.ShinobiChart)" /> method.
				</para><para>
					The order is important for some series layouts - lower index series are placed on the chart first and will be behind
					subsequent series.
				</para><para>
					One of the concrete subclasses of SChartSeries will be returned here.
					The available types are:
					<list type="bullet">
						<item><term><see cref="T:ShinobiCharts.SChartBarSeries" /></term></item>
						<item><term><see cref="T:ShinobiCharts.SChartColumnSeries" /></term></item>
						<item><term><see cref="T:ShinobiCharts.SChartLineSeries" /></term></item>
						<item><term><see cref="T:ShinobiCharts.SChartStepLineSeries" /></term></item>
						<item><term><see cref="T:ShinobiCharts.SChartBandSeries" /></term></item>
						<item><term><see cref="T:ShinobiCharts.SChartScatterSeries" /></term></item>
						<item><term><see cref="T:ShinobiCharts.SChartCandlestickSeries" /></term></item>
						<item><term><see cref="T:ShinobiCharts.SChartOHLCSeries" /></term></item>
						<item><term><see cref="T:ShinobiCharts.SChartDonutSeries" /></term></item>
						<item><term><see cref="T:ShinobiCharts.SChartPieSeries" /></term></item>
					</list>
					When you reload data on a chart, <see cref="M:ShinobiCharts.SChartSeries.ResetForReuse()" /> is called on its chart series.
					If you are persisting your chart series between data reloads, you should take this into account.
					<see cref="M:ShinobiCharts.SChartSeries.ResetForReuse()" /> clears the data points on the chart series, while leaving styling, animation
					and other series properties intact.
				</para>
			</remarks>
			<param name="chart">The chart on which the series will be displayed.</param>
			<param name="dataSeriesIndex">The index of the given series in the chart.</param>
    </member>
       
    <member name="M:ShinobiCharts.SChartDataSource.GetNumberOfDataPoints(ShinobiCharts.ShinobiChart,System.Int32)">
      <summary>Returns the number of data points in the specified series.
       </summary>
		<remarks>
				For each of the data points in the series, the chart will expect to receive an object that adopts the SChartData protocol.
				Data points will be provided to the chart either via the 
				<see cref="M:ShinobiCharts.SChartDataSource.GetDataPoint(ShinobiCharts.ShinobiChart,System.Int32,System.Int32)" /> method, or via the
				<see cref="M:ShinobiCharts.SChartDataSource.GetDataPoints(ShinobiCharts.ShinobiChart,System.Int32)" /> method.
		</remarks>
			<param name="chart">The chart on which the series will be displayed.</param>
			<param name="dataSeriesIndex">The index of the given series in the chart, which will contain the data points.</param>
    </member>
        
    <member name="M:ShinobiCharts.SChartDataSource.GetDataPoint(ShinobiCharts.ShinobiChart,System.Int32,System.Int32)">
      <summary>Returns the object that represents the data point at the given index in the specified chart series.
      </summary>
		<remarks>
				<para>
					The number of points in each series is set by the
					<see cref="M:ShinobiCharts.SChartDataSource.GetNumberOfDataPoints(ShinobiCharts.ShinobiChart,System.Int32)" /> method.
				</para><para>
					The data point can be any object that implements the SChartData protocol.
					We provide a set of data point classes which can be used.
					These are:
					<list type="bullet">
						<item><term><see cref="T:ShinobiCharts.SChartDataPoint" /> - used for simple cartesian data points.</term></item>
						<item><term><see cref="T:ShinobiCharts.SChartRadialDataPoint" /> - used for radial data points.</term></item>
						<item><term><see cref="T:ShinobiCharts.SChartMultiYDataPoint" /> - used for cartesian data points with multiple y values.</term></item>
						<item><term><see cref="T:ShinobiCharts.SChartMultiXDataPoint" /> - used for cartesian data points with multiple x values.</term></item>
					</list>
				</para>
		</remarks>
			<param name="chart">The chart on which the data point will be drawn.</param>
			<param name="dataIndex">The index of the data point in the chart series which contains it.</param>
			<param name="dataSeriesIndex">The index of the series which contains the data point, in the chart.</param>
    </member>
		
	<member name="M:ShinobiCharts.SChartDataSource.GetDataPoints(ShinobiCharts.ShinobiChart,System.Int32)">
      <summary>Returns an array containing the data points for the series at the given index.
      </summary>
			<remarks>
				You can pre-create and cache the data points in an array, and present this array to the chart using this method.
				This is more efficient than querying the datasource for its data points one at a time.
			</remarks>
			<param name="chart">The chart which will display the data points.</param>
			<param name="dataSeriesIndex">The index of the series in the chart.</param>
    </member>
        
    <member name="M:ShinobiCharts.SChartDataSource.GetMajorTickValues(ShinobiCharts.ShinobiChart,ShinobiCharts.SChartAxis)">
      <summary>Returns an array of major tick mark values, to be used by the given chart axis.
      </summary>
		<remarks>
				If this method is implemented, the major tick marks on the axis will be fixed as the values in the array.
				No other values will be calculated or interpolated.
				Objects in the array should be instances of the NSNumber class.
		</remarks>
			<param name="chart">The chart containing the axis.</param>
			<param name="axis">The axis for which we are setting the major tick values.</param>
    </member>
        
    <member name="M:ShinobiCharts.SChartDataSource.GetTexture(ShinobiCharts.ShinobiChart,System.Int32,System.Int32)">
      <summary>Returns an image to be displayed for the specified data point in the chart.
      </summary>
		<remarks>
				If you implement this method, and it returns a non-null image for the specified data point, that image will be displayed
				for the data point in the chart.
		</remarks>
			<param name="chart">The chart containing the data point.</param>
			<param name="dataIndex">The index of the data point within the series which contains it.</param>
			<param name="dataSeriesIndex">The index of the series in the chart which contains the data point.</param>
    </member>
        
    <member name="M:ShinobiCharts.SChartDataSource.GetRadius(ShinobiCharts.ShinobiChart,System.Int32,System.Int32)">
      <summary>Returns the radius of the given data point, in points.
      </summary>
	  <remarks>
				By default, data points on the chart are displayed as two circles, one inside the other.
				The radius of a data point defines the radius of the outer circle in its representation on the chart.
				If you implement this method, and it returns a positive, non-zero value, that radius is used for the given data point in
				the specified series on the chart.
	  </remarks>
			<param name="chart">The chart containing the data point.</param>
			<param name="dataIndex">The index of the data point in the series which contains it.</param>
			<param name="dataSeriesIndex">The index of the series in the chart which contains the data point.</param>
    </member>
        
    <member name="M:ShinobiCharts.SChartDataSource.GetInnerRadius(ShinobiCharts.ShinobiChart,System.Int32,System.Int32)">
      <summary>Returns the inner radius of the given data point, in points.
      </summary>
	  <remarks>
				By default, data points on the chart are displayed as two circles, one inside the other.
				The inner radius of a data point defines the radius of the inner circle in its representation on the chart.
				If you implement this method, and it returns a positive, non-zero value, that radius is used for the inner circle on the
				given data point in the specified series on the chart.
	  </remarks>
			<param name="chart">The chart containing the data point.</param>
			<param name="dataIndex">The index of the data point in the series which contains it.</param>
			<param name="dataSeriesIndex">The index of the series in the chart which contains the data point.</param>
    </member>
        
    <member name="M:ShinobiCharts.SChartDataSource.GetLabelForSlice(ShinobiCharts.ShinobiChart,System.Int32,ShinobiCharts.SChartRadialSeries)">
      <summary>Returns a UILabel corresponding to a 'slice' of a radial chart series.
      </summary>
	  <remarks>
				If this method is implemented and a non-nil UILabel is returned for the given 'slice' in the radial chart series,
				that UILabel will be added to the chart. 
	  </remarks>
			<param name="chart">The chart containing the radial series.</param>
	  		<param name="sliceIndex">The index of the slice of interest within the specified chart series.</param>
			<param name="dataSeriesIndex">The chart series which contains the slice of interest.</param>
    </member>

    <member name="M:ShinobiCharts.SChartDataSource.GetXAxis(ShinobiCharts.ShinobiChart,System.Int32)">
      <summary>Returns the x axis for this series on the chart.
       </summary>
		<remarks><para>If this method is implemented the chart will look here for which axis to use when representing this series, otherwise this series 
 				 will default to using the primary xaxis on the chart.</para>
 
				 <para>Hint: This is only needed on charts with multiple axes.</para>
				 
				 <para>Note: The SChartAxis returned should be referenced from an existing chart axis and not a new object. eg: return chart.XAxis</para>
				 
				 <para>To specify an axis for some series and not for others, returning null for a series index will revert to the default behaviour for that series.</para>
		</remarks>
			<param name="chart">The chart containing the axis.</param>
			<param name="dataSeriesIndex">The index of the chart series within the chart.</param>
    </member>
        
    <member name="M:ShinobiCharts.SChartDataSource.GetYAxis(ShinobiCharts.ShinobiChart,System.Int32)">
      <summary>Returns the y axis for this series on the chart.
      </summary>
		<remarks><para>If this method is implemented the chart will look here for which axis to use when representing this series, otherwise this series 
				  will default to using the primary y axis on the chart.</para>
				 
				 <para>Hint: This is only needed on charts with multiple axes.</para>
				 
				 <para>Note: The SChartAxis returned should be referenced from an existing chart axis and not a new object. eg: return chart.YAxis</para>
				 
				 <para>To specifiy an axis for some series and not for others, returning null for a series index will revert to the default behaviour for that series.</para>
		</remarks>
			<param name="chart">The chart containing the axis.</param>
			<param name="dataSeriesIndex">The index of the chart series within the chart.</param>
    </member>

      
    <member name="T:ShinobiCharts.SChartDelegate">
      <summary>Abstract base class for your (optional) class that accepts notifications from the ShinobiChart
      </summary>
	  <remarks>
				The delegate of a ShinobiChart object must adopt the SChartDelegate protocol.
				Optional methods of the protocol allow the delegate to respond to the following types of events:
				<list type="bullet">
					<item><term>Zooming.</term></item>
					<item><term>Panning.</term></item>
					<item><term>Selection on the chart.</term></item>
					<item><term>Chart rendering.</term></item>
					<item><term>Data loading.</term></item>
					<item><term>Chart series animations.</term></item>
					<item><term>Crosshair tracking.</term></item>
				</list>
				As well as methods to respond to events on the chart, the protocol also provides methods to allow the delegate to manage
				the chart axes, by altering tick marks on the axes, or by setting tick frequencies.
	  </remarks>
    </member>

    <member name="M:ShinobiCharts.SChartDelegate.#ctor">
      <summary>Default constructor
      </summary>
		<remarks></remarks>
    </member>
        
	<member name="M:ShinobiCharts.SChartDelegate.#ctor(MonoTouch.Foundation.NSCoder)">
      <summary>A constructor that initializes the object from the data stored in the unarchiver object.
      </summary>
	  <remarks>This constructor is provided to allow the class to be initialized from an unarchiver (for example, during NIB deserialization).</remarks>
	  <param name="coder">The unarchiver object</param>
    </member>
        
    <member name="M:ShinobiCharts.SChartDelegate.#ctor(MonoTouch.Foundation.NSObjectFlag)">
      <summary>Constructor to call on derived classes to skip initialization and merely allocate the object.
      </summary>
	  <remarks>You should not invoke this method directly.</remarks>
	  <param name="t">Unused sentinel value</param>
    </member>
		
	<member name="M:ShinobiCharts.SChartDelegate.#ctor(System.IntPtr)">
      <summary>A constructor used when creating managed representations of unmanaged objects.
      </summary>
	  <remarks>You should not invoke this method directly.</remarks>
	  <param name="handle">Handle of the unmanaged object</param>
    </member>
        
	<member name="M:ShinobiCharts.SChartDelegate.ConformsToProtocol(System.IntPtr)">
      <summary>Internal - checks whether this object conforms to a protocol.
      </summary>
	  <remarks>Not normally called from application code - used by the Shinobi framework.</remarks>
	  <param name="protocol">The protocol</param>
	  <returns>True if the object conforms to the protocol</returns>
    </member>

    <member name="M:ShinobiCharts.SChartDelegate.OnStartedZooming(ShinobiCharts.ShinobiChart)">
      <summary> A notification that the chart object has started a Zoom operation.
      </summary>
		<remarks>This method is called once at the start of a Zoom gesture by the user. Each axis maintains its own Zoom level, 
 				 which is available through the SChartAxis.Zoom property etc. To monitor the progress of the Zoom gesture as it happens, implement the method 'OnZooming'.
		</remarks>
	  <param name="chart">The chart which is zooming.</param>
    </member>
        
    <member name="M:ShinobiCharts.SChartDelegate.OnFinishedZooming(ShinobiCharts.ShinobiChart)">
      <summary> A notification that the chart object has finished a Zoom operation.
      </summary>
		<remarks>The resulting zoom level is available for each axis object, via the SChartAxis.Zoom property.
		</remarks>
	  <param name="chart">The chart which finished zooming.</param>
    </member>
        
    <member name="M:ShinobiCharts.SChartDelegate.OnResetZoom(ShinobiCharts.ShinobiChart)">
      <summary> A notification that the chart object has reset the Zoom level.
      </summary>
		<remarks>
				The zoom level on an axis can be reset to the default range.
				Implement this method to be notified when the chart has reset to the default zoom level.
		</remarks>
	  <param name="chart">The chart which reset its zoom to the default level.</param>
    </member>
        
    <member name="M:ShinobiCharts.SChartDelegate.OnZooming(ShinobiCharts.ShinobiChart)">
      <summary> A notification that the chart object is Zooming.
      </summary>
		<remarks>
				This method will be continually called during a zoom operation and is particularly useful to keep multiple charts synchronised.
				The current zoom level is available on the axis object, and other charts may be programatically zoomed to respond. 
		</remarks>
	  <param name="chart">The chart which is zooming.</param>
    </member>
        
    <member name="M:ShinobiCharts.SChartDelegate.OnZooming(ShinobiCharts.ShinobiChart,ShinobiCharts.SChartMovementInformation)">
      <summary> A notification that the chart object is Zooming, with additional data.
      </summary>
		<remarks>
				This method is similar to <see cref="M:ShinobiCharts.SChartDelegate.OnZooming(ShinobiCharts.ShinobiChart)" />,
				however extra data describing the zoom is given as an argument.
				The other difference is that this method is called during deceleration, if an axis has momentum zooming enabled.
				<see cref="M:ShinobiCharts.SChartDelegate.OnZooming(ShinobiCharts.ShinobiChart)" /> is not.
		</remarks>
	  <param name="chart">The chart which is zooming</param>
	  <param name="information">Extra information describing the zoom.</param>
    </member>
        
    <member name="M:ShinobiCharts.SChartDelegate.OnDidBoxZoom(ShinobiCharts.ShinobiChart)">
      <summary> A notification that the chart has adjusted its Zoom level using the box feature. 
      </summary>
			<remarks>
				The box gesture can be enabled on the chart by setting ShinobiChart.GesturePanType to SChartGesturePanTypeBoxDraw.
				In this case, panning on the chart will cause a box to be drawn on the chart.
				When the user finishes panning, the chart zooms to the limits of the box.
			</remarks>
	  <param name="chart">The chart which is zooming.</param>
    </member>
        
    <member name="M:ShinobiCharts.SChartDelegate.OnStartedPanning(ShinobiCharts.ShinobiChart)">
      <summary> A notification that the chart object has started a panning operation.
       </summary>
		<remarks></remarks>
	  <param name="chart">The chart which has started panning.</param>
    </member>
        
    <member name="M:ShinobiCharts.SChartDelegate.OnFinishedPanning(ShinobiCharts.ShinobiChart)">
      <summary> A notification that the chart object has finished a panning operation.
      </summary>
		<remarks>After a pan operation, the axis will have a new range available, which you can query via the SChartAxis.AxisRange property.
		</remarks>
	  <param name="chart">The chart which finished panning.</param>
    </member>
        
    <member name="M:ShinobiCharts.SChartDelegate.OnPanning(ShinobiCharts.ShinobiChart)">
      <summary> A notification that the chart object is panning.
      </summary>
		<remarks>
				The range for each axis is updated as the user pans the chart.
				You can query the axis range via the SChartAxis.AxisRange property.
				This method is called continually during the pan gesture.
		</remarks>
	  <param name="chart">The chart which is panning.</param>
    </member>
        
    <member name="M:ShinobiCharts.SChartDelegate.OnPanning(ShinobiCharts.ShinobiChart,ShinobiCharts.SChartMovementInformation)">
    	<summary> A notification that the chart object is panning, with additional data.</summary>
			<remarks>
				This method is similar to <see cref="M:ShinobiCharts.SChartDelegate.OnPanning(ShinobiCharts.ShinobiChart)" />,
				however extra data describing the pan is given as an argument.
			</remarks>
	  	<param name="chart">The chart which is panning.</param>
			<param name="information">Extra information regarding the pan.</param>
    </member>
        
    <member name="M:ShinobiCharts.SChartDelegate.OnToggledSelection(ShinobiCharts.ShinobiChart,ShinobiCharts.SChartDataPoint,ShinobiCharts.SChartSeries,System.Drawing.PointF)">
      <summary>A notification that a data point has been selected or de-selected.
      </summary>
		<remarks>
				A touch gesture has resulted in the Selected property of the data point changing.
				The data point is passed into the method along with the current pixel coordinates of that point and the series that it belongs to.
		</remarks>
	  <param name="chart">The chart on which the selection has occurred.</param>
	  <param name="dataPoint">The data point which was selected or de-selected.</param>
	  <param name="series">The chart series which contains that data point.</param>
	  <param name="pixelPoint">The pixel coordinates of that data point.</param>
    </member>
        
    <member name="M:ShinobiCharts.SChartDelegate.OnToggledSelection(ShinobiCharts.ShinobiChart,ShinobiCharts.SChartRadialDataPoint,ShinobiCharts.SChartRadialSeries,System.Drawing.PointF)">
		<summary>
			A notification that a data point on a radial (pie or donut, etc) chart has changed state to 'selected' from 'deselected' or vice versa.
		</summary>
		<remarks>
				The Selected property of the data point has changed.
				This could be as a result of a tap gesture on the chart, or of programmatically selecting the point (SChartDonutSeries.SetSliceAsSelected).
				The data point is returned along with the series that it belongs to and the pixel coordinates of the tap, if any.
		</remarks>
	  <param name="chart">The chart on which the selection has occurred.</param>
	  <param name="dataPoint">The data point which was selected or de-selected.</param>
	  <param name="series">The chart series which contains that data point.</param>
	  <param name="pixelPoint">The pixel coordinates of that data point.</param>
    </member>
        
    <member name="M:ShinobiCharts.SChartDelegate.OnToggledSelection(ShinobiCharts.ShinobiChart,ShinobiCharts.SChartSeries,ShinobiCharts.SChartDataPoint,System.Drawing.PointF)">
      <summary>A notification that a series has been selected or de-selected.
      </summary>
		<remarks>
				A touch gesture has resulted in the Selected property of the series changing.
				The nearest data point is passed into the method along with the current pixel coordinates of that point.
		</remarks>
	  <param name="chart">The chart on which the selection has occurred.</param>
	  <param name="series">The series which has been selected or de-selected.</param>
	  <param name="dataPoint">The nearest data point on that series to the point on the screen which was touched.</param>
	  <param name="pixelPoint">The pixel coordinates of that data point.</param>
    </member>
        
    <member name="M:ShinobiCharts.SChartDelegate.OnCrosshairMoved(ShinobiCharts.ShinobiChart,MonoTouch.Foundation.NSObject,MonoTouch.Foundation.NSObject)">
      <summary>Notifies the user when the crosshair moves.
      </summary>
		<remarks>
				When the crosshair is panned, the new values at the crosshair point are passed into this method.
				For a line series, the values will be interpolated if they lie between actual data points.
				On a category axis - or bar/column series - the crosshair will snap to the discrete values.
		</remarks>
	  <param name="chart">The chart containing the crosshair.</param>
	  <param name="x">The x value of the current crosshair position.</param>
	  <param name="y">The y value of the current crosshair position.</param>
    </member>
        
    <member name="M:ShinobiCharts.SChartDelegate.OnRenderStarted(ShinobiCharts.ShinobiChart,System.Boolean)">
      <summary>A notification that the chart object has started rendering.
      </summary>
	  <remarks>
				This is called before the chart starts rendering its data.
				At this point, the chart axes will be up to date with your data, so a common use case of this method would be to update
				the chart axes before they are rendered, for example to modify the axis title or range.
			</remarks>
	  <param name="chart">The chart which has started rendering.</param>
	  <param name="fullRedraw">If the chart is carrying out a full redraw, this argument is set to true.</param>
    </member>
        
    <member name="M:ShinobiCharts.SChartDelegate.OnRenderFinished(ShinobiCharts.ShinobiChart)">
      <summary>A notification that the chart object has finished rendering.
      </summary>
			<remarks>
				This is called once the chart has finished rendering its data.
				A common use case for this method would be to display the crosshair on the chart after it has rendered, or to add
				annotations onto the chart.
				You could also update other UI elements in your application so that they reflect the new state of the chart.
				You shouldnât modify the chart plot area or its axes here, as any changes wonât be visualized until the next time that
				the chart is rendered.
			</remarks>
	  <param name="chart">The chart which has finished rendering.</param>
    </member>

    <member name="M:ShinobiCharts.SChartDelegate.OnAddingTickMark(ShinobiCharts.ShinobiChart,ShinobiCharts.SChartTickMark,ShinobiCharts.SChartAxis)">
      <summary>Alter a tick mark before it is added to an axis on the chart.
      </summary>
	  <remarks>
				This method gives you each tick mark just before it is added to its axis.
				Use this to set colors, borders, or even move the tickmark's label elsewhere.
			</remarks>
	  <param name="chart">The chart containing the tick marks.</param>
	  <param name="tickMark">The tick mark which will be added to its axis.</param>
	  <param name="axis">The axis on the chart to which the tick mark will be added.</param>
    </member>

    <member name="M:ShinobiCharts.SChartDelegate.OnAddingRadialLabel(ShinobiCharts.ShinobiChart,MonoTouch.UIKit.UILabel,ShinobiCharts.SChartRadialDataPoint,System.Int32,ShinobiCharts.SChartRadialSeries)">
      <summary>Alter a radial label before it is added to the chart.
			</summary>
			<remarks>
				This method gives you each label for each radial series before it is added to the chart.
				Use this to set colors, borders, or reposition the label.
			</remarks>
	  <param name="chart">The chart containing the radial label.</param>
	  <param name="label">The radial label being added to the chart.</param>
	  <param name="dataPoint">The data point on the chart to which the label applies.</param>
	  <param name="index">The index of the data point in its radial series.</param>
	  <param name="series">The radial series containing the data point.</param>
    </member>

    <member name="M:ShinobiCharts.SChartDelegate.OnGeneratingTickMarks(ShinobiCharts.ShinobiChart,MonoTouch.Foundation.NSObject@,MonoTouch.Foundation.NSObject@,ShinobiCharts.SChartAxis)">
      <summary>Set the major and minor tick frequencies for an axis.
      </summary>
			<remarks>
				<para>
					Implement this method to customize your major and minor tick frequencies depending on the state of the axis.
				</para><para>
					Set the majorTickFrequency and minorTickFrequency pointers to objects of your choosing.
				</para><para>
					Not setting the minorTickFrequency, or setting it to nil, will result in minor ticks not being displayed.
					You should set frequencies of the correct type to match the axis - for example, SChartDateFrequency for SChartDateTimeAxis,
					or NSNumber for SChartNumberAxis.
				</para>
			</remarks>
	  <param name="chart">The chart containing the axis.</param>
	  <param name="majorTickFrequency">A pointer to the major tick frequency on the axis. If you set this value, the axis will update to use the new value.</param>
	  <param name="minorTickFrequency">A pointer to the minor tick frequency on the axis. If you set this value, the axis will update to use the new value.</param>
	  <param name="axis">The axis for which we are setting the tick frequencies.</param>
    </member>
      
    <member name="M:ShinobiCharts.SChartDelegate.LongestLabelStringOnAxis(ShinobiCharts.ShinobiChart,ShinobiCharts.SChartAxis)">
      <summary>Assist the chart in calculating tick label lengths.</summary>
	  <remarks>
				This is useful when you provide an implementation for OnGeneratingTickMarks.
				For example, if you lengthen the tick label strings in alterTickMark, you should hint to the axis that extra room will be
				required by implementing this method.
				The actual contents of this string are ignored, only its size with the current tick-label font is used.
				For example, if you are using a currency format, a string like <c>"$#.##"</c> will ensure sufficient room is calculated.
				Return null for the chart to use automatically calculated values for the tick label lengths.
			</remarks>
	  <param name="chart">The chart containing the axis.</param>
	  <param name="axis">The axis for which we are returning the longest tick label string.</param>
			<returns>A string of the right size, from which the axis can deduce the maximum amount of space that tick mark labels will require.</returns>
    </member>
		
		<member name="M:ShinobiCharts.SChartDelegate.SChartRadialSeriesDidStartPanning(ShinobiCharts.ShinobiChart,ShinobiCharts.SChartRadialSeries)">
			<summary>
				A notification that we have started panning on a radial series.
			</summary>
			<remarks></remarks>
			<param name="radial">The chart containing the radial series which has started panning.</param>
			<param name="radialSeries">The radial series being panned.</param>
		</member>

    <member name="M:ShinobiCharts.SChartDelegate.OnRadialSeriesIsPanning(ShinobiCharts.ShinobiChart,ShinobiCharts.SChartRadialSeries)">
      <summary>A notification that a radial series is being panned.</summary>
			<remarks>
				The rotation of the series is updated as the user pans the chart.
				You can query the current rotation of the series using the SChartDonutSeries.Rotation property.
			</remarks>
	  <param name="chart">The chart containing the radial series.</param>
	  <param name="radialSeries">The radial series being panned.</param>
    </member>

    <member name="M:ShinobiCharts.SChartDelegate.OnRadialSeriesWillBeginDecelerating(ShinobiCharts.ShinobiChart,ShinobiCharts.SChartRadialSeries)">
      <summary>A notification that a panning gesture on a radial series has ended, and the series will begin to decelerate.</summary>
	  <remarks></remarks>
	  <param name="chart">The chart containing the radial series.</param>
	  <param name="radialSeries">The radial series which has started to decelerate.</param>
    </member>

    <member name="M:ShinobiCharts.SChartDelegate.OnRadialSeriesDidEndDecelerating(ShinobiCharts.ShinobiChart,ShinobiCharts.SChartRadialSeries)">
      <summary>A notification that a radial series has come to a halt after being panned + released.</summary>
	  <remarks></remarks>
	  <param name="chart">The chart containing the radial series.</param>
	  <param name="radialSeries">The radial series which has finished panning.</param>
    </member>

    <member name="M:ShinobiCharts.SChartDelegate.OnAnimationDidFinish(ShinobiCharts.SChartSeries,ShinobiCharts.SChartAnimation)">
      <summary>A notification that an animation of a chart series has ended.</summary>
	  <remarks>Note that this callback will still be called should one animation be interrupted by another and the series continues to be animated by the second animation.</remarks>
	  <param name="series">The chart series which has finished animating.</param>
	  <param name="animation">The animation which finished.</param>
    </member>

    <member name="M:ShinobiCharts.SChartDelegate.OnWillStartLoadingData(ShinobiCharts.ShinobiChart)">
      <summary>A notification that the chart will start loading its data.</summary>
			<remarks>
				At this point, the chart has been created, but it either doesn't contain any data, or it is about to reload its data.
				You shouldn't do anything with chart axes at this point, as they will be out of date with the new data.
				A common use case for this method would be to pop up an activity indicator if you think the data will take a long time to load.
			</remarks>
	  <param name="chart">The chart which started loading its data.</param>
    </member>

    <member name="M:ShinobiCharts.SChartDelegate.OnDidFinishLoadingData(ShinobiCharts.ShinobiChart)">
      <summary>A notification that the chart has finished loading its data.</summary>
			<remarks>
				This is called once the chart has finished loading its data, and before it starts rendering its plot area and axes.
				A common use of this method would be to close the activity indicator if you popped one up during loading.
				At this point, the chart axes will have been refreshed from the new data, so you could update the chart axes here before
				they are rendered.
				It is important to note that this method is only called when we load data, rather than each time the chart is rendered.
			</remarks>
	  <param name="chart">The chart which finished loading its data.</param>
    </member>

      
		<member name="T:ShinobiCharts.SChartData">
			<summary>The SChartData protocol allows any object to act as a datapoint within a series on a ShinobiChart.
			</summary>
			<remarks>
				<para>
					The <see cref="M:ShinobiCharts.SChartDataSource.GetDataPoint(ShinobiCharts.ShinobiChart,System.Int32,System.Int32)" />
					method returns an object that implements this protocol.
					It can be your own object or an instance of the SChartDataPoint class that we supply.
				</para><para>
					The protocol has two required methods, which return the x and y values for the object.
					Radial data points return the name of the data point as the x value, and the value of the data point as the y value.
				</para><para>
					It also has a set of optional methods and properties, which allow you to:
					<list type="bullet">
						<item>
							<term>
								Handle selection.
							</term>
						</item>
						<item>
							<term>
								Return x or y values for a given key.
								This is used for multi-value data points.
								Examples of these are SChartMultiXDataPoint and SChartMultiYDataPoint.
							</term>
						</item>
						<item>
							<term>
								Return the index of the data point within the instance of SChartSeries which contains it.
							</term>
						</item>
					</list>
				</para>
			</remarks>
		</member>

    <member name="M:ShinobiCharts.SChartData.#ctor">
      <summary>Default constructor
      </summary>
	 <remarks></remarks>
    </member>
		
	<member name="M:ShinobiCharts.SChartData.#ctor(MonoTouch.Foundation.NSCoder)">
      <summary>A constructor that initializes the object from the data stored in the unarchiver object.
      </summary>
	  <remarks>This constructor is provided to allow the class to be initialized from an unarchiver (for example, during NIB deserialization).</remarks>
	  <param name="coder">The unarchiver object</param>
    </member>
        
    <member name="M:ShinobiCharts.SChartData.#ctor(MonoTouch.Foundation.NSObjectFlag)">
      <summary>Constructor to call on derived classes to skip initialization and merely allocate the object.
      </summary>
	  <remarks>You should not invoke this method directly.</remarks>
	  <param name="t">Unused sentinel value</param>
    </member>
		
	<member name="M:ShinobiCharts.SChartData.#ctor(System.IntPtr)">
      <summary>A constructor used when creating managed representations of unmanaged objects.
      </summary>
	  <remarks>You should not invoke this method directly.</remarks>
	  <param name="handle">Handle of the unmanaged object</param>
    </member>

	<member name="M:ShinobiCharts.SChartData.ConformsToProtocol(System.IntPtr)">
      <summary>Internal - checks whether this object conforms to a protocol.
      </summary>
	  <remarks>Not normally called from application code - used by the Shinobi framework.</remarks>
	  <param name="protocol">The protocol</param>
	  <returns>True if the object conforms to the protocol</returns>
    </member>		
        
    <member name="P:ShinobiCharts.SChartData.DataPointIndex">
      <summary>Returns the index of this data point in the chart series which contains it.
      </summary>
	  <remarks></remarks>
    </member>
        
    <member name="P:ShinobiCharts.SChartData.XValue">
      <summary>Returns the x value of the data point.
      </summary>
			<remarks>
				This is used for series that require only a single x value.
				Series that require multiple x values should implement GetXValue and check the specific series class for the required keys.
			</remarks>
    </member>
        
    <member name="P:ShinobiCharts.SChartData.YValue">
      <summary>Returns the y value of the data point.
      </summary>
		<remarks>
				This is used for series that require only a single y value.
				Series that require multiple y values should implement GetYValue and check the specific series class for the required keys.
			</remarks>
    </member>
        
    <member name="M:ShinobiCharts.SChartData.GetValue(System.String)">
      <summary>This is used for series that require data values which are independent of the axes.
      </summary>
		<remarks>
				The expected keys can be found on the series that is trying to render the data point.
				An example of this is SChartBubbleDataPoint which has a third data value relating to the size of the bubbles.
		</remarks>
    </member>
        
    <member name="M:ShinobiCharts.SChartData.GetXValue(System.String)">
      <summary>Returns the x value corresponding to the provided key.
      </summary>
		<remarks> This is only required for series with more than one x value and keys are specified on the series type.
				For example, OHLC keys include "low", "high", etc.
				For series with just a single x value, use XValue instead.
		</remarks>
    </member>
        
    <member name="M:ShinobiCharts.SChartData.GetYValue(System.String)">
      <summary>Returns the y value corresponding to the provided key.
      </summary>
		<remarks> This is only required for series with more than one y value and keys are specified on the series type.
				For example, OHLC keys include "low", "high", etc.
				For series with just a single y value, use XValue instead.
		</remarks>
    </member>
		
	<member name="M:ShinobiCharts.SChartData.IsSelected">
      <summary>Returns true if this data point is selected.
      </summary>
		<remarks></remarks>
    </member>
		
      
    <member name="T:ShinobiCharts.SChartLegendItem">
    	<summary>Specifies the interface required by the legend to display chart series.</summary>
			<remarks>
				A series should adopt this protocol if it wishes to specify how it is represented in the legend. 
				The SChartSeries base class adopts this protocol and therefore any subclasses can specify their representation in
				the legend by overriding the methods here.
				All the series types provided by ShinobiCharts already provide their own implementation of these methods, so you should
				only need to implement them yourself if you are looking for custom behavior.
			</remarks>
    </member>
		
    <member name="M:ShinobiCharts.SChartLegendItem.#ctor">
      <summary>Default constructor
      </summary>
	 <remarks></remarks>
    </member>
		
	<member name="M:ShinobiCharts.SChartLegendItem.#ctor(MonoTouch.Foundation.NSCoder)">
      <summary>A constructor that initializes the object from the data stored in the unarchiver object.
      </summary>
	  <remarks>This constructor is provided to allow the class to be initialized from an unarchiver (for example, during NIB deserialization).</remarks>
	  <param name="coder">The unarchiver object</param>
    </member>
        
    <member name="M:ShinobiCharts.SChartLegendItem.#ctor(MonoTouch.Foundation.NSObjectFlag)">
      <summary>Constructor to call on derived classes to skip initialization and merely allocate the object.
      </summary>
	  <remarks>You should not invoke this method directly.</remarks>
	  <param name="t">Unused sentinel value</param>
    </member>
		
	<member name="M:ShinobiCharts.SChartLegendItem.#ctor(System.IntPtr)">
      <summary>A constructor used when creating managed representations of unmanaged objects.
      </summary>
	  <remarks>You should not invoke this method directly.</remarks>
	  <param name="handle">Handle of the unmanaged object</param>
    </member>

	<member name="M:ShinobiCharts.SChartLegendItem.ConformsToProtocol(System.IntPtr)">
      <summary>Internal - checks whether this object conforms to a protocol.
      </summary>
	  <remarks>Not normally called from application code - used by the Shinobi framework.</remarks>
	  <param name="protocol">The protocol</param>
	  <returns>True if the object conforms to the protocol</returns>
    </member>	
        
    <member name="P:ShinobiCharts.SChartLegendItem.TitleForSeries">
      <summary>Returns the text displayed in the legend for the series. 
      </summary>
			<remarks>
				This is relevant for cartesian series, but is not used for radial series.
				For radial series, use GetTitleForSlice.
			</remarks>
    </member>
        
    <member name="M:ShinobiCharts.SChartLegendItem.GetTitleForSlice(System.Int32)">
      <summary>Returns the text displayed in the legend for the slice at the given index in the first series on the chart.
      </summary>
			<remarks>
				This is only relevant for radial series.
				This method will be called for each of the slices in the first series in the chart.
				If this is implemented, SymbolForSeries will not be called.
				Instead of displaying a symbol for each series, we will display more detailed information about the first series in the chart.
			</remarks>
	  <param name="index">The index of the relevant slice in the first chart series.</param>
    </member>
        
    <member name="P:ShinobiCharts.SChartLegendItem.SymbolForSeries">
      <summary>Returns the symbol representing a cartesian series in the legend.
      </summary>
			<remarks>
				All of the series types provided by ShinobiCharts return an appropriate symbol to represent them in the legend.
				If you would like to use a custom symbol, you can subclass one of the series types, and override this method.
				For radial series, you should use GetSymbolForSlice instead.
			</remarks>
    </member>
        
    <member name="P:ShinobiCharts.SChartLegendItem.BlockSymbolForSeries">
      <summary>Returns a solid block of color representing a cartesian series in the legend.
      </summary>
	  <remarks></remarks>
    </member>
        
    <member name="P:ShinobiCharts.SChartLegendItem.TextColorForSeriesTitle">
      <summary>Returns the text color used for series titles in the legend.
      </summary>
			<remarks>
				By default, the text color is taken from the chart theme.
				If you implement this method yourself, the value it returns takes precedence.
			</remarks>
    </member>
        
    <member name="M:ShinobiCharts.SChartLegendItem.GetSymbolForSlice(System.Int32)">
      <summary>Returns the symbol representing a slice in the first radial series on the chart.
      </summary>
			<remarks>
				All of the series types provided by ShinobiCharts return an appropriate symbol type to be used in the legend.
				If you would like to use a custom symbol, you can subclass one of the series types, and override this method.
				For cartesian series, you should use SymbolForSeries instead.
			</remarks>
    </member>


    <member name="T:ShinobiCharts.SChartTimePeriod">
      <summary>Represents a period of time.
      </summary>
			<remarks>
				It starts at a point in time, and has a length defined by an instance of SChartDateFrequency.
				Instances of SChartTimePeriod are used by the discontinuous date/time axis (defined in SChartDiscontinuousDateTimeAxis).
				The axis defines periods of time over which it will skip.
			</remarks>
    </member>

    <member name="M:ShinobiCharts.SChartTimePeriod.#ctor">
      <summary>Default constructor.
      </summary>
		<remarks></remarks>
    </member>
        
	<member name="M:ShinobiCharts.SChartTimePeriod.#ctor(MonoTouch.Foundation.NSCoder)">
      <summary>A constructor that initializes the object from the data stored in the unarchiver object.
      </summary>
	  <remarks>This constructor is provided to allow the class to be initialized from an unarchiver (for example, during NIB deserialization).</remarks>
	  <param name="coder">The unarchiver object</param>
    </member>
        
    <member name="M:ShinobiCharts.SChartTimePeriod.#ctor(MonoTouch.Foundation.NSObjectFlag)">
      <summary>Constructor to call on derived classes to skip initialization and merely allocate the object.
      </summary>
	  <remarks>You should not invoke this method directly.</remarks>
	  <param name="t">Unused sentinel value</param>
    </member>
		
	<member name="M:ShinobiCharts.SChartTimePeriod.#ctor(System.IntPtr)">
      <summary>A constructor used when creating managed representations of unmanaged objects.
      </summary>
	  <remarks>You should not invoke this method directly.</remarks>
	  <param name="handle">Handle of the unmanaged object</param>
    </member>
        
    <member name="M:ShinobiCharts.SChartTimePeriod.#ctor(MonoTouch.Foundation.NSDate,ShinobiCharts.SChartDateFrequency)">
      	<summary>Initializes and returns a newly allocated time period object, starting at the specified start date and running for the specified amount of time.</summary>
		<remarks></remarks>
			<param name="start">The start date of the new time period.</param>
			<param name="length">The length of the time period, expressed as a SChartDateFrequency.</param>
			<returns>An initialized time period object, or null if the object couldn't be created.</returns>
    </member>
        
	<member name="P:ShinobiCharts.SChartTimePeriod.ClassHandle">
        <summary>The handle for this class.
        </summary>
	  <remarks>Not normally used by application code</remarks>
    </member>
        
	<member name="M:ShinobiCharts.SChartTimePeriod.Dispose(System.Boolean)">
      <summary> Releases unmanaged resources.
      </summary>
	  <remarks></remarks>
	  <param name="disposing">True if called by Dispose, false if called from a finalizer</param>
    </member>

	<member name="P:ShinobiCharts.SChartTimePeriod.PeriodStart">
        <summary>The starting point of the time period, as a NSDate object.</summary>
	  <remarks></remarks>
    </member>
        
	<member name="P:ShinobiCharts.SChartTimePeriod.PeriodLength">
        <summary>The length of the time period, expressed as a SChartDateFrequency object.</summary>
	  <remarks></remarks>
    </member>
        
		
    <member name="T:ShinobiCharts.SChartRepeatedTimePeriod">
      <summary>A SChartRepeatedTimePeriod represents a repeated period of time, starting at a particular point in time.
      </summary>
	  <remarks>
				Each period has a length, and the periods repeat at a given frequency.
				The length of each period, and the frequency at which they repeat, are expressed as instances of SChartDateFrequency.
				
				Instances of SChartRepeatedTimePeriod are used by the discontinuous date/time axis (defined in
				SChartDiscontinuousDateTimeAxis).
				The axis uses SChartRepeatedTimePeriod to define repeated periods of time over which it will skip.
			</remarks>
    </member>

    <member name="M:ShinobiCharts.SChartRepeatedTimePeriod.#ctor">
      <summary>Default constructor.
      </summary>
		<remarks></remarks>
    </member>
        
	<member name="M:ShinobiCharts.SChartRepeatedTimePeriod.#ctor(MonoTouch.Foundation.NSCoder)">
      <summary>A constructor that initializes the object from the data stored in the unarchiver object.
      </summary>
	  <remarks>This constructor is provided to allow the class to be initialized from an unarchiver (for example, during NIB deserialization).</remarks>
	  <param name="coder">The unarchiver object</param>
    </member>
        
    <member name="M:ShinobiCharts.SChartRepeatedTimePeriod.#ctor(MonoTouch.Foundation.NSObjectFlag)">
      <summary>Constructor to call on derived classes to skip initialization and merely allocate the object.
      </summary>
	  <remarks>You should not invoke this method directly.</remarks>
	  <param name="t">Unused sentinel value</param>
    </member>
		
	<member name="M:ShinobiCharts.SChartRepeatedTimePeriod.#ctor(System.IntPtr)">
      <summary>A constructor used when creating managed representations of unmanaged objects.
      </summary>
	  <remarks>You should not invoke this method directly.</remarks>
	  <param name="handle">Handle of the unmanaged object</param>
    </member>
        
    <member name="M:ShinobiCharts.SChartRepeatedTimePeriod.#ctor(MonoTouch.Foundation.NSDate,ShinobiCharts.SChartDateFrequency,ShinobiCharts.SChartDateFrequency)">
      	<summary>Initializes and returns a newly allocated repeated time period object.</summary>
			<remarks>
				The new object will start at the specified start date.
				Each of its periods will have the length defined by `length`, and the periods will repeat at the specified frequency.
			</remarks>
			<param name="start">The start date of the new time period.</param>
			<param name="length">The length of the time period, expressed as a SChartDateFrequency.</param>
			<param name="frequency">The frequency at which the time periods will repeat, expressed as a SChartDateFrequency.</param>
			<returns>An initialized repeated time period object, or null if the object couldn't be created.</returns>
    </member>
        
	<member name="P:ShinobiCharts.SChartRepeatedTimePeriod.ClassHandle">
        <summary>The handle for this class.
        </summary>
	  <remarks>Not normally used by application code</remarks>
    </member>
        
	<member name="M:ShinobiCharts.SChartRepeatedTimePeriod.Dispose(System.Boolean)">
      <summary> Releases unmanaged resources.
      </summary>
	  <remarks></remarks>
	  <param name="disposing">True if called by Dispose, false if called from a finalizer</param>
    </member>

	<member name="P:ShinobiCharts.SChartRepeatedTimePeriod.Frequency">
        <summary>Returns the frequency at which the periods will repeat, expressed as a SChartDateFrequency object.</summary>
	  <remarks></remarks>
    </member>


		<member name="T:ShinobiCharts.SChartDiscontinuousDateTimeAxis">
			<summary>A date-time axis that skips over specified time periods.</summary>
			<remarks></remarks>
		</member>

		<member name="M:ShinobiCharts.SChartDiscontinuousDateTimeAxis.#ctor">
			<summary>Default constructor.</summary>
			<remarks></remarks>
		</member>

		<member name="M:ShinobiCharts.SChartDiscontinuousDateTimeAxis.#ctor(ShinobiCharts.SChartDateRange)">
			<summary> Initialize with an NSDate specific range.</summary>
			<remarks></remarks>
			<param name="range"></param>
		</member>

		<member name="M:ShinobiCharts.SChartDiscontinuousDateTimeAxis.#ctor(MonoTouch.Foundation.NSCoder)">
			<summary>A constructor that initializes the object from the data stored in the unarchiver object.</summary>
			<remarks>This constructor is provided to allow the class to be initialized from an unarchiver (for example, during NIB deserialization).</remarks>
			<param name="coder">The unarchiver object</param>
		</member>

		<member name="M:ShinobiCharts.SChartDiscontinuousDateTimeAxis.#ctor(MonoTouch.Foundation.NSObjectFlag)">
			<summary>Constructor to call on derived classes to skip initialization and merely allocate the object.</summary>
			<remarks>You should not invoke this method directly.</remarks>
			<param name="t">Unused sentinel value</param>
		</member>

		<member name="M:ShinobiCharts.SChartDiscontinuousDateTimeAxis.#ctor(System.IntPtr)">
			<summary>A constructor used when creating managed representations of unmanaged objects.</summary>
			<remarks>You should not invoke this method directly.</remarks>
			<param name="handle">Handle of the unmanaged object</param>
		</member>

		<member name="P:ShinobiCharts.SChartDiscontinuousDateTimeAxis.ClassHandle">
			<summary>The handle for this class.</summary>
			<remarks>Not normally used by application code</remarks>
		</member>

		<member name="M:ShinobiCharts.SChartDiscontinuousDateTimeAxis.Dispose(System.Boolean)">
			<summary> Releases unmanaged resources.</summary>
			<remarks></remarks>
			<param name="disposing">True if called by Dispose, false if called from a finalizer</param>
		</member>

		<member name="M:ShinobiCharts.SChartDiscontinuousDateTimeAxis.AddExcludedTimePeriod(ShinobiCharts.SChartTimePeriod)">
			<summary>Adds a period to the list of date-periods to skip over.</summary>
			<remarks>You must reload the chart when new skips are added.</remarks>
			<param name="period">A new time period to exclude</param>
		</member>

		<member name="M:ShinobiCharts.SChartDiscontinuousDateTimeAxis.AddExcludedRepeatedTimePeriod(ShinobiCharts.SChartRepeatedTimePeriod)">
			<summary>Adds a period to the skipping algorithm.</summary>
			<remarks>
				<para>This causes the axis to skip over a time period repeatedly, anchored at a certain starting point.</para>
				<para>This starting date may be anywhere, including outside the current axis range. The axis will calculate the correct in-range start for you.</para>
				<para>You must reload the chart when new skips are added.</para>
			</remarks>
			<param name="period">A new repeat-time period to exclude</param>
		</member>

		<member name="M:ShinobiCharts.SChartDiscontinuousDateTimeAxis.RemoveExcludedTimePeriod(ShinobiCharts.SChartTimePeriod)">
			<summary>Removes a single, previously added, skip period.</summary>
			<remarks>You must reload the chart when skips are removed.</remarks>
			<param name="period">The same, or an equivalent time period to remove from the exclusions</param>
		</member>

		<member name="M:ShinobiCharts.SChartDiscontinuousDateTimeAxis.RemoveExcludedRepeatedTimePeriod(ShinobiCharts.SChartRepeatedTimePeriod)">
			<summary>Removes a repeated time period/the multiple skips caused by one repeated time period.</summary>
			<remarks>You must reload the chart when skips are removed.</remarks>
			<param name="period">The same, or an equivalent repeat-time period to remove from the exclusions</param>
		</member>

		<member name="P:ShinobiCharts.SChartDiscontinuousDateTimeAxis.ExcludedTimePeriods">
			<summary>Returns an array of the skipping time periods previously given to the axis.</summary>
			<remarks>Note that you must copy this array if you wish to iterate over it and call any of the single-add or single-remove methods mentioned in this class.</remarks>
		</member>

		<member name="P:ShinobiCharts.SChartDiscontinuousDateTimeAxis.ExcludedRepeatedTimePeriods">
			<summary>Returns an array of the repeat-skip time periods previously given to the axis.</summary>
			<remarks>Note that you must copy this array if you wish to iterate over it and call any of the repeat-add or repeat-remove methods mentioned in this class.</remarks>
		</member>

		<member name="M:ShinobiCharts.SChartDiscontinuousDateTimeAxis.GetCacheCount">
			<summary>Returns the cache count for time-skips.</summary>
			<remarks>
				<para>
					Called when a new cache is required, for example, on a new zoom level.
				</para><para>
					This may be overridden if you wish to trade memory for time or vice-versa when the axis is calculating tick labels.
					For a faster axis, return a large value (e.g. 1,000), for lower memory usage, return a small value (e.g. 50 - 100).
				</para><para>
					Defaults to 400.
				</para>
			</remarks>
		</member>


    <member name="T:ShinobiCharts.SChartDiscontinuousNumberAxis">
      <summary>A number axis that skips over specified ranges.</summary>
	  <remarks></remarks>
    </member>

    <member name="M:ShinobiCharts.SChartDiscontinuousNumberAxis.#ctor">
      <summary>Default constructor.
      </summary>
		<remarks></remarks>
    </member>
        
	<member name="M:ShinobiCharts.SChartDiscontinuousNumberAxis.#ctor(ShinobiCharts.SChartNumberRange)">
      <summary> Initialize with an NSDate specific range.
      </summary>
		<remarks></remarks>
			<param name="range"></param>
    </member>
		
	<member name="M:ShinobiCharts.SChartDiscontinuousNumberAxis.#ctor(MonoTouch.Foundation.NSCoder)">
      <summary>A constructor that initializes the object from the data stored in the unarchiver object.
      </summary>
	  <remarks>This constructor is provided to allow the class to be initialized from an unarchiver (for example, during NIB deserialization).</remarks>
	  <param name="coder">The unarchiver object</param>
    </member>
        
    <member name="M:ShinobiCharts.SChartDiscontinuousNumberAxis.#ctor(MonoTouch.Foundation.NSObjectFlag)">
      <summary>Constructor to call on derived classes to skip initialization and merely allocate the object.
      </summary>
	  <remarks>You should not invoke this method directly.</remarks>
	  <param name="t">Unused sentinel value</param>
    </member>
		
	<member name="M:ShinobiCharts.SChartDiscontinuousNumberAxis.#ctor(System.IntPtr)">
      <summary>A constructor used when creating managed representations of unmanaged objects.
      </summary>
	  <remarks>You should not invoke this method directly.</remarks>
	  <param name="handle">Handle of the unmanaged object</param>
    </member>
        
	<member name="P:ShinobiCharts.SChartDiscontinuousNumberAxis.ClassHandle">
        <summary>The handle for this class.
        </summary>
	  <remarks>Not normally used by application code</remarks>
    </member>
        
	<member name="M:ShinobiCharts.SChartDiscontinuousNumberAxis.Dispose(System.Boolean)">
      <summary> Releases unmanaged resources.
      </summary>
	  <remarks></remarks>
	  <param name="disposing">True if called by Dispose, false if called from a finalizer</param>
    </member>

	<member name="M:ShinobiCharts.SChartDiscontinuousNumberAxis.AddSkip(ShinobiCharts.SChartNumberSkip)">
        <summary>Add an SChartNumberSkip with a start and end, to the list of ranges to skip</summary>
	  <remarks>You must reload the chart when adding new skips.</remarks>
			<param name="skip">The SChartNumberSkip to add to the exclusions</param>
    </member>
        
	<member name="M:ShinobiCharts.SChartDiscontinuousNumberAxis.RemoveSkip(ShinobiCharts.SChartNumberSkip)">
        <summary>Remove a previously added SChartNumberSkip from the list of ranges to skip.</summary>
	  <remarks>You must reload the chart when removing skips.</remarks>
			<param name="skip">The SChartNumberSkip to be removed from the exclusions</param>
    </member>
        
	<member name="P:ShinobiCharts.SChartDiscontinuousNumberAxis.Skips">
        <summary>The current set of skips</summary>
	  <remarks></remarks>
    </member>
        
		
    <member name="T:ShinobiCharts.SChartLegendSymbolBlock">
      <summary>A split colored block on a legend</summary>
	  <remarks></remarks>
    </member>

    <member name="M:ShinobiCharts.SChartLegendSymbolBlock.#ctor">
      <summary>Default constructor.
      </summary>
		<remarks></remarks>
    </member>
        
    <member name="M:ShinobiCharts.SChartLegendSymbolBlock.#ctor(MonoTouch.UIKit.UIColor,MonoTouch.UIKit.UIColor)">
      <summary>Constructor.
      </summary>
		<remarks></remarks>
			<param name="areaColor"></param>
			<param name="outlineColor"></param>
    </member>
        
	<member name="M:ShinobiCharts.SChartLegendSymbolBlock.#ctor(MonoTouch.Foundation.NSCoder)">
      <summary>A constructor that initializes the object from the data stored in the unarchiver object.
      </summary>
	  <remarks>This constructor is provided to allow the class to be initialized from an unarchiver (for example, during NIB deserialization).</remarks>
	  <param name="coder">The unarchiver object</param>
    </member>
        
    <member name="M:ShinobiCharts.SChartLegendSymbolBlock.#ctor(MonoTouch.Foundation.NSObjectFlag)">
      <summary>Constructor to call on derived classes to skip initialization and merely allocate the object.
      </summary>
	  <remarks>You should not invoke this method directly.</remarks>
	  <param name="t">Unused sentinel value</param>
    </member>
		
	<member name="M:ShinobiCharts.SChartLegendSymbolBlock.#ctor(System.IntPtr)">
      <summary>A constructor used when creating managed representations of unmanaged objects.
      </summary>
	  <remarks>You should not invoke this method directly.</remarks>
	  <param name="handle">Handle of the unmanaged object</param>
    </member>
        
	<member name="P:ShinobiCharts.SChartLegendSymbolBlock.ClassHandle">
        <summary>The handle for this class.
        </summary>
	  <remarks>Not normally used by application code</remarks>
    </member>
        
	<member name="M:ShinobiCharts.SChartLegendSymbolBlock.Dispose(System.Boolean)">
      <summary> Releases unmanaged resources.
      </summary>
	  <remarks></remarks>
	  <param name="disposing">True if called by Dispose, false if called from a finalizer</param>
    </member>

	<member name="P:ShinobiCharts.SChartLegendSymbolBlock.AreaColor">
        <summary>Area color</summary>
	  <remarks></remarks>
    </member>
        
	<member name="P:ShinobiCharts.SChartLegendSymbolBlock.OutlineColor">
        <summary>Outline color</summary>
	  <remarks></remarks>
    </member>
        
		
    <member name="T:ShinobiCharts.SChartLegendSymbolBlockSplit">
      <summary>A split colored block on a legend</summary>
	  <remarks></remarks>
    </member>

    <member name="M:ShinobiCharts.SChartLegendSymbolBlockSplit.#ctor">
      <summary>Default constructor.
      </summary>
		<remarks></remarks>
    </member>
        
    <member name="M:ShinobiCharts.SChartLegendSymbolBlockSplit.#ctor(MonoTouch.UIKit.UIColor,MonoTouch.UIKit.UIColor,MonoTouch.UIKit.UIColor)">
      <summary>Constructor.
      </summary>
		<remarks></remarks>
			<param name="areaColor"></param>
			<param name="outlineColor"></param>
			<param name="lowColor"></param>
    </member>
        
	<member name="M:ShinobiCharts.SChartLegendSymbolBlockSplit.#ctor(MonoTouch.Foundation.NSCoder)">
      <summary>A constructor that initializes the object from the data stored in the unarchiver object.
      </summary>
	  <remarks>This constructor is provided to allow the class to be initialized from an unarchiver (for example, during NIB deserialization).</remarks>
	  <param name="coder">The unarchiver object</param>
    </member>
        
    <member name="M:ShinobiCharts.SChartLegendSymbolBlockSplit.#ctor(MonoTouch.Foundation.NSObjectFlag)">
      <summary>Constructor to call on derived classes to skip initialization and merely allocate the object.
      </summary>
	  <remarks>You should not invoke this method directly.</remarks>
	  <param name="t">Unused sentinel value</param>
    </member>
		
	<member name="M:ShinobiCharts.SChartLegendSymbolBlockSplit.#ctor(System.IntPtr)">
      <summary>A constructor used when creating managed representations of unmanaged objects.
      </summary>
	  <remarks>You should not invoke this method directly.</remarks>
	  <param name="handle">Handle of the unmanaged object</param>
    </member>
        
	<member name="P:ShinobiCharts.SChartLegendSymbolBlockSplit.ClassHandle">
        <summary>The handle for this class.
        </summary>
	  <remarks>Not normally used by application code</remarks>
    </member>
        
	<member name="M:ShinobiCharts.SChartLegendSymbolBlockSplit.Dispose(System.Boolean)">
      <summary> Releases unmanaged resources.
      </summary>
	  <remarks></remarks>
	  <param name="disposing">True if called by Dispose, false if called from a finalizer</param>
    </member>

	<member name="P:ShinobiCharts.SChartLegendSymbolBlockSplit.Skips">
        <summary>The current set of skips</summary>
	  <remarks></remarks>
    </member>
        
	<member name="P:ShinobiCharts.SChartLegendSymbolBlockSplit.AreaColor">
        <summary>Area color</summary>
	  <remarks></remarks>
    </member>
        
	<member name="P:ShinobiCharts.SChartLegendSymbolBlockSplit.OutlineColor">
        <summary>Outline color</summary>
	  <remarks></remarks>
    </member>
        
	<member name="P:ShinobiCharts.SChartLegendSymbolBlockSplit.LowColor">
        <summary>Low color</summary>
	  <remarks></remarks>
    </member>
        
		
    <member name="T:ShinobiCharts.SChartMainTitleStyle">
      <summary>Manages the look of the main chart title.</summary>
	  <remarks>As well as the properties it inherits from SChartTitleStyle, it also allows you to specify the chart element
			on which the title should center, and whether the title should overlap with the chart canvas.</remarks>
    </member>

    <member name="M:ShinobiCharts.SChartMainTitleStyle.#ctor">
      <summary>Default constructor.
      </summary>
		<remarks></remarks>
    </member>
        
	<member name="M:ShinobiCharts.SChartMainTitleStyle.#ctor(MonoTouch.Foundation.NSCoder)">
      <summary>A constructor that initializes the object from the data stored in the unarchiver object.
      </summary>
	  <remarks>This constructor is provided to allow the class to be initialized from an unarchiver (for example, during NIB deserialization).</remarks>
	  <param name="coder">The unarchiver object</param>
    </member>
        
    <member name="M:ShinobiCharts.SChartMainTitleStyle.#ctor(MonoTouch.Foundation.NSObjectFlag)">
      <summary>Constructor to call on derived classes to skip initialization and merely allocate the object.
      </summary>
	  <remarks>You should not invoke this method directly.</remarks>
	  <param name="t">Unused sentinel value</param>
    </member>
		
	<member name="M:ShinobiCharts.SChartMainTitleStyle.#ctor(System.IntPtr)">
      <summary>A constructor used when creating managed representations of unmanaged objects.
      </summary>
	  <remarks>You should not invoke this method directly.</remarks>
	  <param name="handle">Handle of the unmanaged object</param>
    </member>
        
	<member name="P:ShinobiCharts.SChartMainTitleStyle.ClassHandle">
        <summary>The handle for this class.
        </summary>
	  <remarks>Not normally used by application code</remarks>
    </member>
        
	<member name="M:ShinobiCharts.SChartMainTitleStyle.Dispose(System.Boolean)">
      <summary> Releases unmanaged resources.
      </summary>
	  <remarks></remarks>
	  <param name="disposing">True if called by Dispose, false if called from a finalizer</param>
    </member>

	<member name="P:ShinobiCharts.SChartMainTitleStyle.TitleCentresOn">
        <summary>Specifies whether the title centers on the full chart view, the plot area, or the canvas.</summary>
	  <remarks></remarks>
    </member>
        
	<member name="P:ShinobiCharts.SChartMainTitleStyle.OverlapChartTitle">
        <summary>Indicates whether space should be reserved at the top of the chart for the title, or whether it should overlap with the canvas.</summary>
	  <remarks>Setting this property true will allow the UILabel to appear over the chart canvas.
			Setting it false will push the canvas area down and reserve space obove the chart plots for the title.
			CalculateTargetBounds controls the space reserved for chart objects outside of the canvas area.</remarks>
    </member>
        
		
		<member name="T:ShinobiCharts.SChartBasePointStyle">
			<summary>This is an abstract base class for other point style classes.</summary>
			<remarks>
				This abstract style corresponds to the abstract series SChartPointSeries.
			</remarks>
		</member>
		
		<member name="M:ShinobiCharts.SChartBasePointStyle.#ctor">
			<summary>Default constructor.</summary>
			<remarks></remarks>
		</member>
		
		<member name="M:ShinobiCharts.SChartBasePointStyle.#ctor(MonoTouch.Foundation.NSCoder)">
			<summary>
				A constructor that initializes the object from the data stored in the unarchiver object.
			</summary>
			<remarks>
				This constructor is provided to allow the class to be initialized from an unarchiver (for example, during NIB deserialization).
			</remarks>
			<param name="coder">
				The unarchiver object
			</param>
		</member>
		
		<member name="M:ShinobiCharts.SChartBasePointStyle.#ctor(System.IntPtr)">
			<summary>
				A constructor used when creating managed representations of unmanaged objects.
			</summary>
			<remarks>
				You should not invoke this method directly.
			</remarks>
			<param name="handle">
				Handle of the unmanaged object
			</param>
		</member>
		
		<member name="M:ShinobiCharts.SChartBasePointStyle.#ctor(MonoTouch.Foundation.NSObjectFlag)">
			<summary>
				Constructor to call on derived classes to skip initialization and merely allocate the object.
			</summary>
			<remarks>
				You should not invoke this method directly.
			</remarks>
			<param name="t">
				Unused sentinel value
			</param>
		</member>
		
		<member name="P:ShinobiCharts.SChartBasePointStyle.ClassHandle">
			<summary>
				The handle for this class.
			</summary>
			<remarks></remarks>
		</member>
		
		<member name="M:ShinobiCharts.SChartBasePointStyle.Dispose(System.Boolean)">
			<summary>Releases unmanaged resources.</summary>
			<remarks></remarks>
			<param name="disposing">True if called by Dispose, false if called from a finalizer</param>
		</member>
		
		<member name="P:ShinobiCharts.SChartBasePointStyle.ShowPoints">
			<summary>
				Defines whether points should be displayed on our chart series.
			</summary>
			<remarks></remarks>
		</member>
		
		<member name="P:ShinobiCharts.SChartBasePointStyle.Color">
			<summary>
				The color of the data points.
			</summary>
			<remarks></remarks>
		</member>
		
		<member name="P:ShinobiCharts.SChartBasePointStyle.ColorBelowBaseline">
			<summary>
				The color of the data points when the chart series goes below its baseline.
			</summary>
			<remarks></remarks>
		</member>
		
		<member name="P:ShinobiCharts.SChartBasePointStyle.Radius">
			<summary>
				The radius of the outer section of a data point.
			</summary>
			<remarks></remarks>
		</member>
		
		<member name="P:ShinobiCharts.SChartBasePointStyle.Gradient">
			<summary>
				The gradient of the point, starting from the centre.
			</summary>
			<remarks>
				This describes how rapidly the alpha fades.
				A value of 1.0 means that the edge is fully transparent, a value of 0.0 means that the edge has the same alpha as the center.
			</remarks>
		</member>
		
		<member name="P:ShinobiCharts.SChartBasePointStyle.Texture">
			<summary>
				An image to be used for each data point.
			</summary>
			<remarks>
				If this property is set, the image will displayed rather than the default of an inner and outer circle.
			</remarks>
		</member>
		
		<member name="M:ShinobiCharts.SChartBasePointStyle.SupplementStyleFromStyle(ShinobiCharts.SChartBasePointStyle)">
			<summary>
				Supplements this style object by taking styles this object doesn't have, from the argument, style
			</summary>
			<remarks></remarks>
		</member>
		
		
		<member name="T:ShinobiCharts.SChartBubbleDataPoint">
			<summary></summary>
			<remarks></remarks>
		</member>
		
		<member name="M:ShinobiCharts.SChartBubbleDataPoint.#ctor">
			<summary>Default constructor.</summary>
			<remarks></remarks>
		</member>
		
		<member name="M:ShinobiCharts.SChartBubbleDataPoint.#ctor(MonoTouch.Foundation.NSCoder)">
			<summary>
				A constructor that initializes the object from the data stored in the unarchiver object.
			</summary>
			<remarks>
				This constructor is provided to allow the class to be initialized from an unarchiver (for example, during NIB deserialization).
			</remarks>
			<param name="coder">
				The unarchiver object
			</param>
		</member>
		
		<member name="M:ShinobiCharts.SChartBubbleDataPoint.#ctor(System.IntPtr)">
			<summary>
				A constructor used when creating managed representations of unmanaged objects.
			</summary>
			<remarks>
				You should not invoke this method directly.
			</remarks>
			<param name="handle">
				Handle of the unmanaged object
			</param>
		</member>
		
		<member name="M:ShinobiCharts.SChartBubbleDataPoint.#ctor(MonoTouch.Foundation.NSObjectFlag)">
			<summary>
				Constructor to call on derived classes to skip initialization and merely allocate the object.
			</summary>
			<remarks>
				You should not invoke this method directly.
			</remarks>
			<param name="t">
				Unused sentinel value
			</param>
		</member>
		
		<member name="P:ShinobiCharts.SChartBubbleDataPoint.ClassHandle">
			<summary>
				The handle for this class.
			</summary>
			<remarks></remarks>
		</member>
		
		<member name="P:ShinobiCharts.SChartBubbleDataPoint.Area">
			<summary>
				The value of the bubble for the data point.
			</summary>
			<remarks> 
				The area of the the bubble representing this point will be proportional to this value and be scaled by SChartBubbleSeries.Scale.
			</remarks>
		</member>
		
		
		<member name="T:ShinobiCharts.SChartBubblePointStyle">
			<summary></summary>
			<remarks></remarks>
		</member>
		
		<member name="M:ShinobiCharts.SChartBubblePointStyle.#ctor">
			<summary>Default constructor.</summary>
			<remarks></remarks>
		</member>
		
		<member name="M:ShinobiCharts.SChartBubblePointStyle.#ctor(MonoTouch.Foundation.NSCoder)">
			<summary>
				A constructor that initializes the object from the data stored in the unarchiver object.
			</summary>
			<remarks>
				This constructor is provided to allow the class to be initialized from an unarchiver (for example, during NIB deserialization).
			</remarks>
			<param name="coder">
				The unarchiver object
			</param>
		</member>
		
		<member name="M:ShinobiCharts.SChartBubblePointStyle.#ctor(System.IntPtr)">
			<summary>
				A constructor used when creating managed representations of unmanaged objects.
			</summary>
			<remarks>
				You should not invoke this method directly.
			</remarks>
			<param name="handle">
				Handle of the unmanaged object
			</param>
		</member>
		
		<member name="M:ShinobiCharts.SChartBubblePointStyle.#ctor(MonoTouch.Foundation.NSObjectFlag)">
			<summary>
				Constructor to call on derived classes to skip initialization and merely allocate the object.
			</summary>
			<remarks>
				You should not invoke this method directly.
			</remarks>
			<param name="t">
				Unused sentinel value
			</param>
		</member>
		
		<member name="P:ShinobiCharts.SChartBubblePointStyle.ClassHandle">
			<summary>
				The handle for this class.
			</summary>
			<remarks></remarks>
		</member>
		
		
		<member name="T:ShinobiCharts.SChartBubbleSeries">
			<summary>
				A type of SChartSeries that uses its data points to construct a bubble series.
			</summary>
			<remarks>
				<para>
					This type of series focuses on allowing bubble sizes to be controlled via the use of data point objects of type
					SChartBubbleDataPoint.
					As such this series ignores attempts to set the size/radius of its data points in any other way.
				</para><para>
					The size of the bubbles in this series are independent of any axes that the series might be linked to.
					This makes the concept of a scale that alters the size of all bubbles in the series useful.
					You can supply your own Scale or let the series be scaled via an auto-calculated value such that the largest bubble in
					the series matches some chosen diameter (see AutoScalingBiggestBubbleDiameter).
				</para><para>
					This series has the corresponding series and point styles SChartBubbleSeriesStyle and SChartBubblePointStyle respectively.
				</para>
			</remarks>
		</member>
		
		<member name="M:ShinobiCharts.SChartBubbleSeries.#ctor">
			<summary>Default constructor.</summary>
			<remarks></remarks>
		</member>
		
		<member name="M:ShinobiCharts.SChartBubbleSeries.#ctor(MonoTouch.Foundation.NSCoder)">
			<summary>
				A constructor that initializes the object from the data stored in the unarchiver object.
			</summary>
			<remarks>
				This constructor is provided to allow the class to be initialized from an unarchiver (for example, during NIB deserialization).
			</remarks>
			<param name="coder">
				The unarchiver object
			</param>
		</member>
		
		<member name="M:ShinobiCharts.SChartBubbleSeries.#ctor(System.IntPtr)">
			<summary>
				A constructor used when creating managed representations of unmanaged objects.
			</summary>
			<remarks>
				You should not invoke this method directly.
			</remarks>
			<param name="handle">
				Handle of the unmanaged object
			</param>
		</member>
		
		<member name="M:ShinobiCharts.SChartBubbleSeries.#ctor(MonoTouch.Foundation.NSObjectFlag)">
			<summary>
				Constructor to call on derived classes to skip initialization and merely allocate the object.
			</summary>
			<remarks>
				You should not invoke this method directly.
			</remarks>
			<param name="t">
				Unused sentinel value
			</param>
		</member>
		
		<member name="P:ShinobiCharts.SChartBubbleSeries.ClassHandle">
			<summary>
				The handle for this class.
			</summary>
			<remarks></remarks>
		</member>
		
		<member name="M:ShinobiCharts.SChartBubbleSeries.Dispose(System.Boolean)">
			<summary>Releases unmanaged resources.</summary>
			<remarks></remarks>
			<param name="disposing">True if called by Dispose, false if called from a finalizer</param>
		</member>
		
		<member name="P:ShinobiCharts.SChartBubbleSeries.Scale">
			<summary>
				The value that will be used to scale the rendered bubbles for this series.
			</summary>
			<remarks>
				<para>
					A value of null will result in the series auto-calculating an appropriate scale to use.
					The auto-calculated scale is based on AutoScalingBiggestBubbleDiameter.
				</para><para>
					The default value of this property is null.
				</para>
			</remarks>
		</member>
		
		<member name="P:ShinobiCharts.SChartBubbleSeries.AutoScalingBiggestBubbleDiameter">
			<summary>
				This property is used to calculate an appropriate auto-scale that results in the biggest bubble in the series being AutoScalingBiggestBubbleDiameter.DoubleValue points in diameter.
			</summary>
			<remarks>
				<para>
					If this property is null then a default value of half of the current smallest canvas dimension will be used instead.
				</para><para>
					The default value for this property is null.
				</para>
			</remarks>
		</member>
		
		<member name="M:ShinobiCharts.SChartBubbleSeries.CurrentScale">
			<summary>
				The current scale being used to render the bubble series.
			</summary>
			<remarks>
				<para>
					If you have set Scale then this will be returned, otherwise an automatically calculated scale will be returned.
				</para><para>
					Note that if no Scale has been set and no auto-caulculated value exists that null will be returned.
				</para>
			</remarks>
		</member>
		
		<member name="P:ShinobiCharts.SChartBubbleSeries.Style">
			<summary>
				Manages the appearance of the bubble series on the chart.
			</summary>
			<remarks>
				<para>
					The default settings of the style are inherited from the chart theme.
					You can tweak the appearance of the series by modifying the style.
				</para>
			</remarks>
		</member>
		
		<member name="P:ShinobiCharts.SChartBubbleSeries.SelectedStyle">
			<summary>
				Manages the appearance of the bubble series when it is selected.
			</summary>
			<remarks>
				<para>
					Style settings in this object will be applied when the series is marked as selected (or a point is selected).
				</para><para>
					The default settings of the style are inherited from the chart theme.
					You can tweak the appearance of the series by modifying the style.
				</para>
			</remarks>
		</member>
		
		
		<member name="T:ShinobiCharts.SChartBubbleSeriesStyle">
			<summary></summary>
			<remarks></remarks>
		</member>
		
		<member name="M:ShinobiCharts.SChartBubbleSeriesStyle.#ctor">
			<summary>Default constructor.</summary>
			<remarks></remarks>
		</member>
		
		<member name="M:ShinobiCharts.SChartBubbleSeriesStyle.#ctor(MonoTouch.Foundation.NSCoder)">
			<summary>
				A constructor that initializes the object from the data stored in the unarchiver object.
			</summary>
			<remarks>
				This constructor is provided to allow the class to be initialized from an unarchiver (for example, during NIB deserialization).
			</remarks>
			<param name="coder">
				The unarchiver object
			</param>
		</member>
		
		<member name="M:ShinobiCharts.SChartBubbleSeriesStyle.#ctor(System.IntPtr)">
			<summary>
				A constructor used when creating managed representations of unmanaged objects.
			</summary>
			<remarks>
				You should not invoke this method directly.
			</remarks>
			<param name="handle">
				Handle of the unmanaged object
			</param>
		</member>
		
		<member name="M:ShinobiCharts.SChartBubbleSeriesStyle.#ctor(MonoTouch.Foundation.NSObjectFlag)">
			<summary>
				Constructor to call on derived classes to skip initialization and merely allocate the object.
			</summary>
			<remarks>
				You should not invoke this method directly.
			</remarks>
			<param name="t">
				Unused sentinel value
			</param>
		</member>
		
		<member name="P:ShinobiCharts.SChartBubbleSeriesStyle.ClassHandle">
			<summary>
				The handle for this class.
			</summary>
			<remarks></remarks>
		</member>
		
		<member name="M:ShinobiCharts.SChartBubbleSeriesStyle.Dispose(System.Boolean)">
			<summary>Releases unmanaged resources.</summary>
			<remarks></remarks>
			<param name="disposing">True if called by Dispose, false if called from a finalizer</param>
		</member>
		
		<member name="P:ShinobiCharts.SChartBubbleSeriesStyle.PointStyle">
			<summary>
				Manages the appearance of unselected points/bubbles on a bubble series.
			</summary>
			<remarks>
				<para>
					The default settings of the style are inherited from the chart theme.
					You can tweak the appearance of the series by modifying the style.
				</para>
			</remarks>
		</member>
		
		<member name="P:ShinobiCharts.SChartBubbleSeriesStyle.SelectedPointStyle">
			<summary>
				Manages the appearance of selected points/bubbles on a bubble series.
			</summary>
			<remarks>
				<para>
					Style settings in this object will be applied when the point is marked as selected.
				</para><para>
					The default settings of the style are inherited from the chart theme.
					You can tweak the appearance of the series by modifying the style.
				</para>
			</remarks>
		</member>
		
		<member name="M:ShinobiCharts.SChartBubbleSeriesStyle.SupplementStyleFromStyle(ShinobiCharts.SChartBubbleSeriesStyle)">
			<summary>
				Supplements this style object by taking styles this object doesn't have, from the argument, style
			</summary>
			<remarks></remarks>
		</member>
		
		
		<member name="T:ShinobiCharts.SChartLegendSymbolPointSeries">
			<summary>A symbol designed to represent a point series in the chart legend.</summary>
			<remarks>
				The symbol makes use of the series styling, in order to better represent it in the legend.
			</remarks>
		</member>
		
		<member name="M:ShinobiCharts.SChartLegendSymbolPointSeries.#ctor">
			<summary>Default constructor.</summary>
			<remarks></remarks>
		</member>
		
		<member name="M:ShinobiCharts.SChartLegendSymbolPointSeries.#ctor(MonoTouch.Foundation.NSCoder)">
			<summary>
				A constructor that initializes the object from the data stored in the unarchiver object.
			</summary>
			<remarks>
				This constructor is provided to allow the class to be initialized from an unarchiver (for example, during NIB deserialization).
			</remarks>
			<param name="coder">
				The unarchiver object
			</param>
		</member>
		
		<member name="M:ShinobiCharts.SChartLegendSymbolPointSeries.#ctor(System.IntPtr)">
			<summary>
				A constructor used when creating managed representations of unmanaged objects.
			</summary>
			<remarks>
				You should not invoke this method directly.
			</remarks>
			<param name="handle">
				Handle of the unmanaged object
			</param>
		</member>
		
		<member name="M:ShinobiCharts.SChartLegendSymbolPointSeries.#ctor(MonoTouch.Foundation.NSObjectFlag)">
			<summary>
				Constructor to call on derived classes to skip initialization and merely allocate the object.
			</summary>
			<remarks>
				You should not invoke this method directly.
			</remarks>
			<param name="t">
				Unused sentinel value
			</param>
		</member>
		
		<member name="M:ShinobiCharts.SChartLegendSymbolPointSeries.#ctor(ShinobiCharts.SChartPointSeries)">
			<summary>
				Initializes and returns a newly allocated symbol to represent this point series.
			</summary>
			<remarks></remarks>
			<param name="series">
				The chart series which this symbol will represent in the chart legend.
			</param>
			<returns>
				An initialized symbol, or null if it couldn't be created.
			</returns>
		</member>
		
		<member name="P:ShinobiCharts.SChartLegendSymbolPointSeries.ClassHandle">
			<summary>
				The handle for this class.
			</summary>
			<remarks></remarks>
		</member>
		
		<member name="M:ShinobiCharts.SChartLegendSymbolPointSeries.Dispose(System.Boolean)">
			<summary>Releases unmanaged resources.</summary>
			<remarks></remarks>
			<param name="disposing">True if called by Dispose, false if called from a finalizer</param>
		</member>
		
		<member name="P:ShinobiCharts.SChartLegendSymbolPointSeries.Style">
			<summary>
				The style object for the series associated with this legend symbol.
			</summary>
			<remarks>
				This property allows you to query the style properties which have been used to create this legend symbol.
			</remarks>
		</member>
		
		
		<member name="T:ShinobiCharts.SChartMultiValueDataPoint">
			<summary>Represents a data point that has values that are not related to any axes.</summary>
			<remarks>
				An example of a series that uses such values is the SChartBubbleSeries.
			</remarks>
		</member>
		
		<member name="M:ShinobiCharts.SChartMultiValueDataPoint.#ctor">
			<summary>Default constructor.</summary>
			<remarks></remarks>
		</member>
		
		<member name="M:ShinobiCharts.SChartMultiValueDataPoint.#ctor(MonoTouch.Foundation.NSCoder)">
			<summary>
				A constructor that initializes the object from the data stored in the unarchiver object.
			</summary>
			<remarks>
				This constructor is provided to allow the class to be initialized from an unarchiver (for example, during NIB deserialization).
			</remarks>
			<param name="coder">
				The unarchiver object
			</param>
		</member>
		
		<member name="M:ShinobiCharts.SChartMultiValueDataPoint.#ctor(System.IntPtr)">
			<summary>
				A constructor used when creating managed representations of unmanaged objects.
			</summary>
			<remarks>
				You should not invoke this method directly.
			</remarks>
			<param name="handle">
				Handle of the unmanaged object
			</param>
		</member>
		
		<member name="M:ShinobiCharts.SChartMultiValueDataPoint.#ctor(MonoTouch.Foundation.NSObjectFlag)">
			<summary>
				Constructor to call on derived classes to skip initialization and merely allocate the object.
			</summary>
			<remarks>
				You should not invoke this method directly.
			</remarks>
			<param name="t">
				Unused sentinel value
			</param>
		</member>
		
		<member name="P:ShinobiCharts.SChartMultiValueDataPoint.ClassHandle">
			<summary>
				The handle for this class.
			</summary>
			<remarks></remarks>
		</member>
		
		<member name="M:ShinobiCharts.SChartMultiValueDataPoint.Dispose(System.Boolean)">
			<summary>Releases unmanaged resources.</summary>
			<remarks></remarks>
			<param name="disposing">True if called by Dispose, false if called from a finalizer</param>
		</member>
		
		<member name="P:ShinobiCharts.SChartMultiValueDataPoint.Values">
			<summary>
				A dictionary of axis independent values for this data point.
			</summary>
			<remarks>
				In order to query the values at a point, you can use the SChartDataSeries.ValueKeys property.
			</remarks>
		</member>
		
		
		<member name="T:ShinobiCharts.SChartPointSeries">
			<summary>
				An SChartPointSeries acts as the base class for both SChartScatterSeries and SChartBubbleSeries and concerns itself with drawing data points.
			</summary>
			<remarks>
				SChartScatterSeries adds the drawing of inner points, whereas SChartBubbleSeries adds the ability to control the drawn
				datapoint size via SChartBubbleDataPoints.
				It is therefore unlikely that you will ever want to directly instantiate a series of this type, but should you wish to
				do so note that the corresponding point style is SChartBasePointStyle.
			</remarks>
		</member>
		
		<member name="M:ShinobiCharts.SChartPointSeries.#ctor">
			<summary>Default constructor.</summary>
			<remarks></remarks>
		</member>
		
		<member name="M:ShinobiCharts.SChartPointSeries.#ctor(MonoTouch.Foundation.NSCoder)">
			<summary>
				A constructor that initializes the object from the data stored in the unarchiver object.
			</summary>
			<remarks>
				This constructor is provided to allow the class to be initialized from an unarchiver (for example, during NIB deserialization).
			</remarks>
			<param name="coder">
				The unarchiver object
			</param>
		</member>
		
		<member name="M:ShinobiCharts.SChartPointSeries.#ctor(System.IntPtr)">
			<summary>
				A constructor used when creating managed representations of unmanaged objects.
			</summary>
			<remarks>
				You should not invoke this method directly.
			</remarks>
			<param name="handle">
				Handle of the unmanaged object
			</param>
		</member>
		
		<member name="M:ShinobiCharts.SChartPointSeries.#ctor(MonoTouch.Foundation.NSObjectFlag)">
			<summary>
				Constructor to call on derived classes to skip initialization and merely allocate the object.
			</summary>
			<remarks>
				You should not invoke this method directly.
			</remarks>
			<param name="t">
				Unused sentinel value
			</param>
		</member>
		
		<member name="P:ShinobiCharts.SChartPointSeries.ClassHandle">
			<summary>
				The handle for this class.
			</summary>
			<remarks></remarks>
		</member>
		
		<member name="M:ShinobiCharts.SChartPointSeries.Dispose(System.Boolean)">
			<summary>Releases unmanaged resources.</summary>
			<remarks></remarks>
			<param name="disposing">True if called by Dispose, false if called from a finalizer</param>
		</member>
		
		<member name="P:ShinobiCharts.SChartPointSeries.Style">
			<summary>
				Override any default settings or theme settings on a per series basis by editing the values in these style objects.
			</summary>
			<remarks>
				<para>
					The SChartScatterSeriesStyle contains all of the objects relevant to styling a scatter series.
				</para>
			</remarks>
		</member>
		
		<member name="P:ShinobiCharts.SChartPointSeries.SelectedStyle">
			<summary>
				Style settings in this object will be applied when the series is marked as selected (or a datapoint is selected).
			</summary>
			<remarks></remarks>
		</member>
		
		
		<member name="T:ShinobiCharts.SChartPointSeriesStyle">
			<summary></summary>
			<remarks></remarks>
		</member>
		
		<member name="M:ShinobiCharts.SChartPointSeriesStyle.#ctor">
			<summary>Default constructor.</summary>
			<remarks></remarks>
		</member>
		
		<member name="M:ShinobiCharts.SChartPointSeriesStyle.#ctor(MonoTouch.Foundation.NSCoder)">
			<summary>
				A constructor that initializes the object from the data stored in the unarchiver object.
			</summary>
			<remarks>
				This constructor is provided to allow the class to be initialized from an unarchiver (for example, during NIB deserialization).
			</remarks>
			<param name="coder">
				The unarchiver object
			</param>
		</member>
		
		<member name="M:ShinobiCharts.SChartPointSeriesStyle.#ctor(System.IntPtr)">
			<summary>
				A constructor used when creating managed representations of unmanaged objects.
			</summary>
			<remarks>
				You should not invoke this method directly.
			</remarks>
			<param name="handle">
				Handle of the unmanaged object
			</param>
		</member>
		
		<member name="M:ShinobiCharts.SChartPointSeriesStyle.#ctor(MonoTouch.Foundation.NSObjectFlag)">
			<summary>
				Constructor to call on derived classes to skip initialization and merely allocate the object.
			</summary>
			<remarks>
				You should not invoke this method directly.
			</remarks>
			<param name="t">
				Unused sentinel value
			</param>
		</member>
		
		<member name="P:ShinobiCharts.SChartPointSeriesStyle.ClassHandle">
			<summary>
				The handle for this class.
			</summary>
			<remarks></remarks>
		</member>
		
		<member name="M:ShinobiCharts.SChartPointSeriesStyle.Dispose(System.Boolean)">
			<summary>Releases unmanaged resources.</summary>
			<remarks></remarks>
			<param name="disposing">True if called by Dispose, false if called from a finalizer</param>
		</member>
		
		<member name="P:ShinobiCharts.SChartPointSeriesStyle.PointStyle">
			<summary>
				The style of points that are not selected
			</summary>
			<remarks></remarks>
		</member>
		
		<member name="P:ShinobiCharts.SChartPointSeriesStyle.SelectedPointStyle">
			<summary>
				The style of points that are selected
			</summary>
			<remarks></remarks>
		</member>
		
		<member name="M:ShinobiCharts.SChartPointSeriesStyle.SupplementStyleFromStyle(ShinobiCharts.SChartPointSeriesStyle)">
			<summary>
				Supplements this style object by taking styles this object doesn't have, from the argument, style
			</summary>
			<remarks></remarks>
		</member>
		
		
		<member name="T:ShinobiCharts.SChartDiscontinuousTickLabelClipping">
			<summary>
				Controls discontinuous tick label clipping.
			</summary>
		</member>
		
		
		<member name="T:ShinobiCharts.SChartCanvas">
			<summary>
				For each ShinobiChart, one single SChartCanvas will exist to contain the drawing of all of the axes and series.
			</summary>
			<remarks>
				<para>
					Titles, legends and other chart level objects appear outside of this area in the ShinobiChart view.
					The canvas is responsible for managing the layers that make up the axis and series.
				</para><para>
					The canvas itself has no objects drawn directly onto it.
					The canvas decides how much space it will need to draw any axis and their labels.
					The plot area view is then sized and laid down to draw the series.
					This is followed by the SChartCanvasOverlay layer that is used to draw the axes at the highest level.
				</para><para>
					You should never need to modify this object directly.
					We've included information on this class as we refer to the chart canvas at various points in our documentation.
				</para>
			</remarks>
		</member>
		
		<member name="M:ShinobiCharts.SChartCanvas.#ctor(MonoTouch.Foundation.NSCoder)">
			<summary>
				A constructor that initializes the object from the data stored in the unarchiver object.
			</summary>
			<remarks>
				This constructor is provided to allow the class to be initialized from an unarchiver (for example, during NIB deserialization).
			</remarks>
			<param name="coder">
				The unarchiver object
			</param>
		</member>
		
		<member name="M:ShinobiCharts.SChartCanvas.#ctor(System.IntPtr)">
			<summary>
				A constructor used when creating managed representations of unmanaged objects.
			</summary>
			<remarks>
				You should not invoke this method directly.
			</remarks>
			<param name="handle">
				Handle of the unmanaged object
			</param>
		</member>
		
		<member name="M:ShinobiCharts.SChartCanvas.#ctor(MonoTouch.Foundation.NSObjectFlag)">
			<summary>
				Constructor to call on derived classes to skip initialization and merely allocate the object.
			</summary>
			<remarks>
				You should not invoke this method directly.
			</remarks>
			<param name="t">
				Unused sentinel value
			</param>
		</member>
		
		<member name="M:ShinobiCharts.SChartCanvas.#ctor(System.Drawing.RectangleF,ShinobiCharts.ShinobiChart)">
			<summary>
				DEPRECATED - This should be moved into a private header.
			</summary>
			<remarks>
				<para>
					Initializes and returns a newly allocated canvas object with the specified frame rectangle.
				</para>
			</remarks>
			<param name="frame">The frame rectangle for the canvas, measured in points.</param>
			<param name="parentChart">The chart which will contain the new canvas.</param>
			<return>An initialized canvas object, or null if the object couldn't be created.</return>
		</member>
		
		<member name="P:ShinobiCharts.SChartCanvas.ClassHandle">
			<summary>
				The handle for this class.
			</summary>
			<remarks></remarks>
		</member>

		<member name="M:ShinobiCharts.SChartCanvas.Dispose(System.Boolean)">
			<summary>Releases unmanaged resources.</summary>
			<param name="disposing">True if called by Dispose, false if called from a finalizer</param>
		</member>

		<member name="P:ShinobiCharts.SChartCanvas.Chart">
			<summary>
				The chart which contains this canvas
			</summary>
			<remarks></remarks>
		</member>
		
		<member name="P:ShinobiCharts.SChartCanvas.Underlay">
			<summary>
				The underlay is the layer upon which we draw all of our axes.
			</summary>
			<remarks>
				We use pixel based coordinates on the underlay.
			</remarks>
		</member>
		
		<member name="P:ShinobiCharts.SChartCanvas.UnderlayForAnnotations">
			<summary>
				This is the layer where we draw all of our annotation views that are visualised under our data
			</summary>
			<remarks></remarks>
		</member>
		
		<member name="P:ShinobiCharts.SChartCanvas.GLView">
			<summary>
				This is the layer upon which we draw all of our chart series and also any chart annotations.
			</summary>
			<remarks>
				This layer is rendered using openGL and therefore uses GL based coordinates.
			</remarks>
		</member>
		
		<member name="P:ShinobiCharts.SChartCanvas.Overlay">
			<summary>
				This is the layer where we render things like the crosshair.
			</summary>
			<remarks></remarks>
		</member>
		
		<member name="P:ShinobiCharts.SChartCanvas.RedrawGL">
			<summary>
				DEPRECATED - This should be moved into a private header.
			</summary>
			<remarks>
				If this property is set to true, we will refresh the canvas in the next draw cycle.
				We set this property to true when we call ShinobiChart.RedrawChart and pass true in as the argument.
			</remarks>
		</member>
		
		<member name="P:ShinobiCharts.SChartCanvas.ReloadedData">
			<summary>
				DEPRECATED - This should be moved into a private header.
			</summary>
			<remarks>
				We set this property to true when we reload data in the chart.
			</remarks>
		</member>
		
		<member name="P:ShinobiCharts.SChartCanvas.OrientationChanged">
			<summary>
				DEPRECATED - This should be moved into a private header.
			</summary>
			<remarks>
				We set this property to true if the chart responds to device rotations, and we rotate the device.
			</remarks>
		</member>
		
		<member name="M:ShinobiCharts.SChartCanvas.EnablePanning(System.Boolean)">
			<summary>
				DEPRECATED - This should be moved into a private header.
			</summary>
			<remarks>
				<para>
					Sets whether panning is enabled on the chart canvas.
				</para>
			</remarks>
			<param name="enable">If set to true, panning will be enabled on the canvas.</param>
		</member>
		
		
		<member name="T:ShinobiCharts.SChartCanvasOverlay">
			<summary>
				The canvas overlay is responsible for drawing objects that appear over the plot area - such as crosshairs.
			</summary>
			<remarks>
				It's a transparent layer that is rendered above the openGL layer.
			</remarks>
		</member>
		
		<member name="M:ShinobiCharts.SChartCanvasOverlay.#ctor(MonoTouch.Foundation.NSCoder)">
			<summary>
				A constructor that initializes the object from the data stored in the unarchiver object.
			</summary>
			<remarks>
				This constructor is provided to allow the class to be initialized from an unarchiver (for example, during NIB deserialization).
			</remarks>
			<param name="coder">
				The unarchiver object
			</param>
		</member>
		
		<member name="M:ShinobiCharts.SChartCanvasOverlay.#ctor(System.IntPtr)">
			<summary>
				A constructor used when creating managed representations of unmanaged objects.
			</summary>
			<remarks>
				You should not invoke this method directly.
			</remarks>
			<param name="handle">
				Handle of the unmanaged object
			</param>
		</member>
		
		<member name="M:ShinobiCharts.SChartCanvasOverlay.#ctor(MonoTouch.Foundation.NSObjectFlag)">
			<summary>
				Constructor to call on derived classes to skip initialization and merely allocate the object.
			</summary>
			<remarks>
				You should not invoke this method directly.
			</remarks>
			<param name="t">
				Unused sentinel value
			</param>
		</member>
		
		<member name="M:ShinobiCharts.SChartCanvasOverlay.#ctor(System.Drawing.RectangleF,ShinobiCharts.ShinobiChart,ShinobiCharts.SChartCanvas)">
			<summary>
				Create our drawing layer - we must know where the openGL layer is for drawing
			</summary>
			<remarks></remarks>
		</member>
		
		<member name="P:ShinobiCharts.SChartCanvasOverlay.ClassHandle">
			<summary>
				The handle for this class.
			</summary>
			<remarks></remarks>
		</member>

		<member name="M:ShinobiCharts.SChartCanvasOverlay.Dispose(System.Boolean)">
			<summary>Releases unmanaged resources.</summary>
			<param name="disposing">True if called by Dispose, false if called from a finalizer</param>
		</member>

		<member name="P:ShinobiCharts.SChartCanvasOverlay.Chart">
			<summary>
				The chart owner  - available to let us access the chart objects when we need
			</summary>
			<remarks></remarks>
		</member>
		
		<member name="P:ShinobiCharts.SChartCanvasOverlay.Crosshair">
			<summary>
				The crosshair object
			</summary>
			<remarks></remarks>
		</member>
		
		<member name="P:ShinobiCharts.SChartCanvasOverlay.GesturePinchAspectLock">
			<summary></summary>
			<remarks></remarks>
		</member>
		
		<member name="P:ShinobiCharts.SChartCanvasOverlay.GesturePanType">
			<summary></summary>
			<remarks></remarks>
		</member>
		
		<member name="M:ShinobiCharts.SChartCanvasOverlay.PositionCrosshairIfVisible">
			<summary></summary>
			<remarks></remarks>
		</member>
		
		<member name="M:ShinobiCharts.SChartCanvasOverlay.EnablePanning(System.Boolean)">
			<summary></summary>
			<remarks></remarks>
		</member>
		
		<member name="M:ShinobiCharts.SChartCanvasOverlay.AxisFinishedMomentumZooming(ShinobiCharts.SChartAxis)">
			<summary>
				Alerts chart delegate if all axes have finished momentum zooming
			</summary>
			<remarks></remarks>
		</member>
		
		<member name="M:ShinobiCharts.SChartCanvasOverlay.AxisFinishedMomentumPanning(ShinobiCharts.SChartAxis)">
			<summary>
				Alerts chart delegate if all axes have finished momentum panning
			</summary>
			<remarks></remarks>
		</member>
		
		<member name="M:ShinobiCharts.SChartCanvasOverlay.EnableAppropriateGestureRecognisers">
			<summary></summary>
			<remarks></remarks>
		</member>
		
		<member name="M:ShinobiCharts.SChartCanvasOverlay.CreateGestureRecognizers">
			<summary></summary>
			<remarks></remarks>
		</member>
		
		<member name="M:ShinobiCharts.SChartCanvasOverlay.AxisIsZooming(ShinobiCharts.SChartAxis)">
			<summary></summary>
			<remarks></remarks>
		</member>
		
		<member name="M:ShinobiCharts.SChartCanvasOverlay.AxisIsPanning(ShinobiCharts.SChartAxis)">
			<summary></summary>
			<remarks></remarks>
		</member>
		
		
		<member name="T:ShinobiCharts.SChartCanvasUnderlay">
			<summary>
				The canvas underlay is responsible for drawing things like gridlines and the axes.
			</summary>
			<remarks>
				It's a transparent layer that is currently rendered below the openGL layer.
			</remarks>
		</member>
		
		<member name="M:ShinobiCharts.SChartCanvasUnderlay.#ctor(MonoTouch.Foundation.NSCoder)">
			<summary>
				A constructor that initializes the object from the data stored in the unarchiver object.
			</summary>
			<remarks>
				This constructor is provided to allow the class to be initialized from an unarchiver (for example, during NIB deserialization).
			</remarks>
			<param name="coder">
				The unarchiver object
			</param>
		</member>
		
		<member name="M:ShinobiCharts.SChartCanvasUnderlay.#ctor(System.IntPtr)">
			<summary>
				A constructor used when creating managed representations of unmanaged objects.
			</summary>
			<remarks>
				You should not invoke this method directly.
			</remarks>
			<param name="handle">
				Handle of the unmanaged object
			</param>
		</member>
		
		<member name="M:ShinobiCharts.SChartCanvasUnderlay.#ctor(MonoTouch.Foundation.NSObjectFlag)">
			<summary>
				Constructor to call on derived classes to skip initialization and merely allocate the object.
			</summary>
			<remarks>
				You should not invoke this method directly.
			</remarks>
			<param name="t">
				Unused sentinel value
			</param>
		</member>
		
		<member name="M:ShinobiCharts.SChartCanvasUnderlay.#ctor(System.Drawing.RectangleF,ShinobiCharts.ShinobiChart)">
			<summary>
				Create our drawing layer - we must know where the openGL layer is to keep the scaling in synch.
			</summary>
			<remarks></remarks>
		</member>
		
		<member name="P:ShinobiCharts.SChartCanvasUnderlay.ClassHandle">
			<summary>
				The handle for this class.
			</summary>
			<remarks></remarks>
		</member>

		<member name="M:ShinobiCharts.SChartCanvasUnderlay.Dispose(System.Boolean)">
			<summary>Releases unmanaged resources.</summary>
			<param name="disposing">True if called by Dispose, false if called from a finalizer</param>
		</member>

		<member name="P:ShinobiCharts.SChartCanvasUnderlay.Chart">
			<summary>
				The chart owner  - available to let us access the chart objects when we need
			</summary>
			<remarks></remarks>
		</member>
		
		<member name="P:ShinobiCharts.SChartCanvasUnderlay.BorderColor">
			<summary>
				The color of the border on the plot area
			</summary>
			<remarks></remarks>
		</member>
		
		<member name="P:ShinobiCharts.SChartCanvasUnderlay.BorderThickness">
			<summary>
				The width of the border on the plot area
			</summary>
			<remarks></remarks>
		</member>
		
		<member name="M:ShinobiCharts.SChartCanvasUnderlay.DrawLines(MonoTouch.Foundation.NSArray,MonoTouch.Foundation.NSArray,MonoTouch.UIKit.UIColor,System.Single)">
			<summary></summary>
			<remarks></remarks>
		</member>
		
		<member name="M:ShinobiCharts.SChartCanvasUnderlay.DrawLines(MonoTouch.Foundation.NSArray,MonoTouch.Foundation.NSArray,MonoTouch.UIKit.UIColor,System.Single,MonoTouch.Foundation.NSArray)">
			<summary></summary>
			<remarks></remarks>
		</member>
		
		<member name="M:ShinobiCharts.SChartCanvasUnderlay.DrawRects(MonoTouch.Foundation.NSMutableArray,MonoTouch.UIKit.UIColor)">
			<summary></summary>
			<remarks></remarks>
		</member>
		
		
		<member name="T:ShinobiCharts.SChartGLTriangle">
			<summary></summary>
			<remarks></remarks>
		</member>
		
		<member name="M:ShinobiCharts.SChartGLTriangle.#ctor">
			<summary></summary>
			<remarks></remarks>
		</member>
		
		<member name="M:ShinobiCharts.SChartGLTriangle.#ctor(MonoTouch.Foundation.NSCoder)">
			<summary>
				A constructor that initializes the object from the data stored in the unarchiver object.
			</summary>
			<remarks>
				This constructor is provided to allow the class to be initialized from an unarchiver (for example, during NIB deserialization).
			</remarks>
			<param name="coder">
				The unarchiver object
			</param>
		</member>
		
		<member name="M:ShinobiCharts.SChartGLTriangle.#ctor(System.IntPtr)">
			<summary>
				A constructor used when creating managed representations of unmanaged objects.
			</summary>
			<remarks>
				You should not invoke this method directly.
			</remarks>
			<param name="handle">
				Handle of the unmanaged object
			</param>
		</member>
		
		<member name="M:ShinobiCharts.SChartGLTriangle.#ctor(MonoTouch.Foundation.NSObjectFlag)">
			<summary>
				Constructor to call on derived classes to skip initialization and merely allocate the object.
			</summary>
			<remarks>
				You should not invoke this method directly.
			</remarks>
			<param name="t">
				Unused sentinel value
			</param>
		</member>
		
		<member name="M:ShinobiCharts.SChartGLTriangle.#ctor(ShinobiCharts.GLTriangle3D)">
			<summary></summary>
			<remarks></remarks>
		</member>
		
		<member name="P:ShinobiCharts.SChartGLTriangle.ClassHandle">
			<summary>
				The handle for this class.
			</summary>
			<remarks></remarks>
		</member>
		
		<member name="P:ShinobiCharts.SChartGLTriangle.Triangle">
			<summary></summary>
			<remarks></remarks>
		</member>
		
		<member name="M:ShinobiCharts.SChartGLTriangle.CompareAlpha(ShinobiCharts.SChartGLTriangle)">
			<summary></summary>
			<remarks></remarks>
		</member>
		
		
		<member name="T:ShinobiCharts.SChartGLView">
			<summary></summary>
			<remarks></remarks>
		</member>
		
		<member name="M:ShinobiCharts.SChartGLView.#ctor(MonoTouch.Foundation.NSCoder)">
			<summary>
				A constructor that initializes the object from the data stored in the unarchiver object.
			</summary>
			<remarks>
				This constructor is provided to allow the class to be initialized from an unarchiver (for example, during NIB deserialization).
			</remarks>
			<param name="coder">
				The unarchiver object
			</param>
		</member>
		
		<member name="M:ShinobiCharts.SChartGLView.#ctor(System.IntPtr)">
			<summary>
				A constructor used when creating managed representations of unmanaged objects.
			</summary>
			<remarks>
				You should not invoke this method directly.
			</remarks>
			<param name="handle">
				Handle of the unmanaged object
			</param>
		</member>
		
		<member name="M:ShinobiCharts.SChartGLView.#ctor(MonoTouch.Foundation.NSObjectFlag)">
			<summary>
				Constructor to call on derived classes to skip initialization and merely allocate the object.
			</summary>
			<remarks>
				You should not invoke this method directly.
			</remarks>
			<param name="t">
				Unused sentinel value
			</param>
		</member>
		
		<member name="M:ShinobiCharts.SChartGLView.#ctor(System.Drawing.RectangleF)">
			<summary></summary>
			<remarks></remarks>
		</member>
		
		<member name="P:ShinobiCharts.SChartGLView.ClassHandle">
			<summary>
				The handle for this class.
			</summary>
			<remarks></remarks>
		</member>

		<member name="M:ShinobiCharts.SChartGLView.Dispose(System.Boolean)">
			<summary>Releases unmanaged resources.</summary>
			<param name="disposing">True if called by Dispose, false if called from a finalizer</param>
		</member>

		<member name="P:ShinobiCharts.SChartGLView.GLBounds">
			<summary></summary>
			<remarks></remarks>
		</member>
		
		<member name="P:ShinobiCharts.SChartGLView.PerformCalculations">
			<summary></summary>
			<remarks></remarks>
		</member>
		
		<member name="P:ShinobiCharts.SChartGLView.ResetAnimationTimer">
			<summary></summary>
			<remarks></remarks>
		</member>
		
		<member name="P:ShinobiCharts.SChartGLView.UpdateLineTriangles">
			<summary></summary>
			<remarks></remarks>
		</member>
		
		<member name="P:ShinobiCharts.SChartGLView.AllTextures">
			<summary></summary>
			<remarks></remarks>
		</member>
		
		<member name="P:ShinobiCharts.SChartGLView.AllSeries">
			<summary></summary>
			<remarks></remarks>
		</member>
		
		<member name="P:ShinobiCharts.SChartGLView.AreaColor">
			<summary></summary>
			<remarks></remarks>
		</member>
		
		<member name="P:ShinobiCharts.SChartGLView.GLWidth">
			<summary></summary>
			<remarks></remarks>
		</member>
		
		<member name="P:ShinobiCharts.SChartGLView.GLHeight">
			<summary></summary>
			<remarks></remarks>
		</member>
		
		<member name="P:ShinobiCharts.SChartGLView.FrameBuffer">
			<summary></summary>
			<remarks></remarks>
		</member>
		
		<member name="P:ShinobiCharts.SChartGLView.ColorRenderBuffer">
			<summary></summary>
			<remarks></remarks>
		</member>
		
		<member name="P:ShinobiCharts.SChartGLView.EAGLLayer">
			<summary></summary>
			<remarks></remarks>
		</member>
		
		<member name="P:ShinobiCharts.SChartGLView.Context">
			<summary></summary>
			<remarks></remarks>
		</member>
		
		<member name="M:ShinobiCharts.SChartGLView.SetupLayerWithBackgroundColor(MonoTouch.UIKit.UIColor)">
			<summary>Sets up a CAEAGLLayer</summary>
			<remarks></remarks>
		</member>
		
		<member name="M:ShinobiCharts.SChartGLView.Resize">
			<summary>
				Resize the render buffer and recalculate the viewport
			</summary>
			<remarks></remarks>
		</member>
		
		<member name="M:ShinobiCharts.SChartGLView.SetupFrameBuffer">
			<summary>
				Sets up a FrameBuffer
			</summary>
			<remarks></remarks>
		</member>
		
		<member name="M:ShinobiCharts.SChartGLView.DeleteFrameBuffer">
			<summary>
				Deletes the FrameBuffer
			</summary>
			<remarks></remarks>
		</member>
		
		<member name="M:ShinobiCharts.SChartGLView.CompileShaderWithType(System.Char,System.UInt32)">
			<summary>
				Compiles a GLSL shader
			</summary>
			<remarks></remarks>
		</member>
		
		<member name="M:ShinobiCharts.SChartGLView.CompileShaders">
			<summary>
				Compiles vertex and fragment shaders
			</summary>
			<remarks></remarks>
		</member>
		
		<member name="M:ShinobiCharts.SChartGLView.SetupVBOs">
			<summary>
				Sets up VBOs
			</summary>
			<remarks></remarks>
		</member>
		
		<member name="M:ShinobiCharts.SChartGLView.DeleteVBOs">
			<summary>
				Deletes VBOs
			</summary>
			<remarks></remarks>
		</member>
		
		<member name="M:ShinobiCharts.SChartGLView.AddTriangles(ShinobiCharts.GLTriangle3D,ShinobiCharts.SChartSeries,System.Int32,System.Boolean,ShinobiCharts.SChartGLStencilParams,ShinobiCharts.SChartGLTranslation,System.Boolean)">
			<summary></summary>
			<remarks></remarks>
		</member>
		
		<member name="M:ShinobiCharts.SChartGLView.AddTriangleStrip(ShinobiCharts.GLVertex3D,ShinobiCharts.SChartSeries,System.Int32,System.Boolean,ShinobiCharts.SChartGLStencilParams,ShinobiCharts.SChartGLTranslation,System.Boolean)">
			<summary></summary>
			<remarks></remarks>
		</member>
		
		<member name="M:ShinobiCharts.SChartGLView.AddIndexedTriangles(ShinobiCharts.GLVertex3D,ShinobiCharts.SChartSeries,System.Int32,System.UInt16,System.Int32,System.Boolean,ShinobiCharts.SChartGLStencilParams,ShinobiCharts.SChartGLTranslation,System.Boolean)">
			<summary></summary>
			<remarks></remarks>
		</member>
		
		<member name="M:ShinobiCharts.SChartGLView.AddLines(ShinobiCharts.GLVertex3D,ShinobiCharts.SChartSeries,System.Int32,System.UInt32,System.Single,System.Boolean,System.Int32,System.Boolean,ShinobiCharts.SChartGLStencilParams,ShinobiCharts.SChartGLTranslation,System.Boolean)">
			<summary></summary>
			<remarks></remarks>
		</member>
		
		<member name="M:ShinobiCharts.SChartGLView.AddIndexedLines(ShinobiCharts.GLVertex3D,ShinobiCharts.SChartSeries,System.Int32,System.UInt16,System.Int32,System.UInt32,System.Single,System.Boolean,System.Boolean,ShinobiCharts.SChartGLStencilParams,ShinobiCharts.SChartGLTranslation,System.Boolean)">
			<summary></summary>
			<remarks></remarks>
		</member>
		
		<member name="M:ShinobiCharts.SChartGLView.AddLinesWithOffset(ShinobiCharts.GLVertex3DWithOffset,ShinobiCharts.SChartSeries,System.Int32,System.UInt32,System.Single,System.Boolean,ShinobiCharts.SChartGLStencilParams,ShinobiCharts.SChartGLTranslation,System.Boolean)">
			<summary></summary>
			<remarks></remarks>
		</member>
		
		<member name="M:ShinobiCharts.SChartGLView.AddPoints(ShinobiCharts.GLVertex3DWithTexture,ShinobiCharts.SChartSeries,System.Int32,System.Single,System.Single,System.Boolean,ShinobiCharts.SChartGLTranslation,System.Boolean)">
			<summary></summary>
			<remarks></remarks>
		</member>
		
		<member name="M:ShinobiCharts.SChartGLView.AddDynamicTriangles(ShinobiCharts.GLTriangle3D,ShinobiCharts.SChartSeries,System.Int32,System.Boolean,ShinobiCharts.SChartGLStencilParams,System.Boolean,ShinobiCharts.SChartGLTranslation,System.Boolean)">
			<summary></summary>
			<remarks></remarks>
		</member>
		
		<member name="M:ShinobiCharts.SChartGLView.AddIndexedDynamicTriangles(ShinobiCharts.GLVertex3D,ShinobiCharts.SChartSeries,System.Int32,System.UInt16,System.Int32,System.Boolean,ShinobiCharts.SChartGLStencilParams,System.Boolean,ShinobiCharts.SChartGLTranslation,System.Boolean)">
			<summary></summary>
			<remarks></remarks>
		</member>
		
		<member name="M:ShinobiCharts.SChartGLView.AddIndexedOffsetTriangles(ShinobiCharts.GLVertex3DWithOffset,ShinobiCharts.SChartSeries,System.Int32,System.UInt16,System.Int32,System.Boolean,ShinobiCharts.SChartGLStencilParams,System.Boolean,ShinobiCharts.SChartGLTranslation,System.Boolean)">
			<summary></summary>
			<remarks></remarks>
		</member>
		
		<member name="M:ShinobiCharts.SChartGLView.AddPieSlice(ShinobiCharts.GLVertex3DWithUV,ShinobiCharts.SChartSeries,System.Int32,System.UInt16,System.Int32,ShinobiCharts.GLColour4f,ShinobiCharts.GLColour4f,System.Single,System.Single,System.Single,System.Int32,System.Boolean)">
			<summary></summary>
			<remarks></remarks>
		</member>
		
		<member name="M:ShinobiCharts.SChartGLView.GetPointTexture(System.Single,System.Boolean)">
			<summary></summary>
			<remarks></remarks>
		</member>
		
		<member name="M:ShinobiCharts.SChartGLView.BeginRender(System.Boolean,System.Boolean,System.Boolean)">
			<summary>
				Clears the canvas and buffers and resets the buffers
			</summary>
			<remarks></remarks>
		</member>
		
		<member name="M:ShinobiCharts.SChartGLView.EndRender">
			<summary>
				Displays objects drawn since beginRender was last called, returns true if needs to redraw next frame
			</summary>
			<remarks></remarks>
		</member>
		
		<member name="M:ShinobiCharts.SChartGLView.ConvertUIColorToGLColour4f(MonoTouch.UIKit.UIColor)">
			<summary>
				Converts a UIColor to a GLColour4f
			</summary>
			<remarks></remarks>
		</member>
		
		<member name="M:ShinobiCharts.SChartGLView.TimeIncrement">
			<summary></summary>
			<remarks></remarks>
		</member>
		
		<member name="P:ShinobiCharts.SChartGLView.UserTextures">
			<summary></summary>
			<remarks></remarks>
		</member>
		
		<member name="M:ShinobiCharts.SChartGLView.UpdateSeries(ShinobiCharts.SChartSeries,ShinobiCharts.SChartGLTranslation)">
			<summary></summary>
			<remarks></remarks>
		</member>
		
		<member name="M:ShinobiCharts.SChartGLView.UpdateRadialSeries(ShinobiCharts.SChartSeries,System.Int32,System.Single,System.Single,System.Single)">
			<summary></summary>
			<remarks></remarks>
		</member>
		
		<member name="M:ShinobiCharts.SChartGLView.Reset">
			<summary></summary>
			<remarks></remarks>
		</member>
		
		<member name="M:ShinobiCharts.SChartGLView.BeginRender(System.Boolean,System.Boolean)">
			<summary>
				Clears the canvas and buffers and resets the buffers
			</summary>
			<remarks></remarks>
		</member>
		
		<member name="M:ShinobiCharts.SChartGLView.AddSeries(ShinobiCharts.SChartSeries)">
			<summary></summary>
			<remarks></remarks>
		</member>


		<member name="T:ShinobiCharts.SChartiOS7Theme">
			<summary>
				The SChartiOS7Theme features solid-colored series without gradients on a light background and crisp and clear
				text to fit in with your iOS 7 app.
			</summary>
			<remarks>
				See <c>SChartTheme</c> for an explanation of how themes work.
			</remarks>
		</member>
		
		<member name="M:ShinobiCharts.SChartiOS7Theme.#ctor(MonoTouch.Foundation.NSCoder)">
			<summary>
				A constructor that initializes the object from the data stored in the unarchiver object.
			</summary>
			<remarks>
				This constructor is provided to allow the class to be initialized from an unarchiver (for example, during NIB deserialization).
			</remarks>
			<param name="coder">
				The unarchiver object
			</param>
		</member>
		
		<member name="M:ShinobiCharts.SChartiOS7Theme.#ctor(System.IntPtr)">
			<summary>
				A constructor used when creating managed representations of unmanaged objects.
			</summary>
			<remarks>
				You should not invoke this method directly.
			</remarks>
			<param name="handle">
				Handle of the unmanaged object
			</param>
		</member>
		
		<member name="M:ShinobiCharts.SChartiOS7Theme.#ctor(MonoTouch.Foundation.NSObjectFlag)">
			<summary>
				Constructor to call on derived classes to skip initialization and merely allocate the object.
			</summary>
			<remarks>
				You should not invoke this method directly.
			</remarks>
			<param name="t">
				Unused sentinel value
			</param>
		</member>
		
		<member name="M:ShinobiCharts.SChartiOS7Theme.#ctor">
			<summary>Default constructor.</summary>
			<remarks></remarks>
		</member>
		
		<member name="P:ShinobiCharts.SChartiOS7Theme.ClassHandle">
			<summary>
				The handle for this class.
			</summary>
			<remarks></remarks>
		</member>


		<member name="T:ShinobiCharts.SChartLayer">
			<summary></summary>
			<remarks></remarks>
		</member>
		
		<member name="M:ShinobiCharts.SChartLayer.#ctor">
			<summary></summary>
			<remarks></remarks>
		</member>
		
		<member name="M:ShinobiCharts.SChartLayer.#ctor(MonoTouch.Foundation.NSCoder)">
			<summary>
				A constructor that initializes the object from the data stored in the unarchiver object.
			</summary>
			<remarks>
				This constructor is provided to allow the class to be initialized from an unarchiver (for example, during NIB deserialization).
			</remarks>
			<param name="coder">
				The unarchiver object
			</param>
		</member>
		
		<member name="M:ShinobiCharts.SChartLayer.#ctor(System.IntPtr)">
			<summary>
				A constructor used when creating managed representations of unmanaged objects.
			</summary>
			<remarks>
				You should not invoke this method directly.
			</remarks>
			<param name="handle">
				Handle of the unmanaged object
			</param>
		</member>
		
		<member name="M:ShinobiCharts.SChartLayer.#ctor(MonoTouch.Foundation.NSObjectFlag)">
			<summary>
				Constructor to call on derived classes to skip initialization and merely allocate the object.
			</summary>
			<remarks>
				You should not invoke this method directly.
			</remarks>
			<param name="t">
				Unused sentinel value
			</param>
		</member>
		
		<member name="P:ShinobiCharts.SChartLayer.ClassHandle">
			<summary>
				The handle for this class.
			</summary>
			<remarks></remarks>
		</member>
		
		<member name="M:ShinobiCharts.SChartLayer.ConformsToProtocol(System.IntPtr)">
			<summary>
				Checks whether this object conforms to a protocol.
			</summary>
			<remarks>
				Not normally called from application code - used by the Shinobi framework.
			</remarks>
			<param name="protocol">
				The protocol
			</param>
			<returns>
				True if the object conforms to the protocol
			</returns>
		</member>
		
		<member name="M:ShinobiCharts.SChartLayer.ViewStartRotateWithDuration(MonoTouch.Foundation.NSNumber)">
			<summary>
				Layer should begin to rotate
			</summary>
			<remarks></remarks>
		</member>
		
		<member name="M:ShinobiCharts.SChartLayer.ViewEndRotateWithDuration(MonoTouch.Foundation.NSNumber)">
			<summary>
				Layer should stop rotating
			</summary>
			<remarks></remarks>
		</member>
		
		
		<member name="T:ShinobiCharts.SChartGLTranslation">
			<summary></summary>
			<remarks></remarks>
		</member>
		
		
		<member name="T:ShinobiCharts.SChartSeries_DataBins">
			<summary>Extension methods for SChartSeries related to DataBins.</summary>
			<remarks></remarks>
		</member>
		
		<member name="M:ShinobiCharts.SChartSeries_DataBins.NumberOfDataPointsInBin(ShinobiCharts.SChartSeries)">
			<summary></summary>
			<remarks></remarks>
		</member>
		
		<member name="M:ShinobiCharts.SChartSeries_DataBins.SetNumberOfDataPointsInBin(ShinobiCharts.SChartSeries,System.Int32)">
			<summary></summary>
			<remarks></remarks>
		</member>
		
		
		<member name="T:ShinobiCharts.GLColour4f">
			<summary></summary>
			<remarks></remarks>
		</member>
		
	</members>
</doc>                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           
